
BRPCalculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b6  00800060  000041ce  00004262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800216  00800216  00004418  2**0
                  ALLOC
  3 .stab         000045a8  00000000  00000000  00004418  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001afd  00000000  00000000  000089c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000a4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000a67d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000a88d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000cf17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000e3f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000f6a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000f880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000fb7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__vector_1>
       8:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 31       	cpi	r26, 0x16	; 22
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e1       	ldi	r26, 0x16	; 22
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 31       	cpi	r26, 0x1E	; 30
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <main>
      8a:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ae 20 	jmp	0x415c	; 0x415c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ef       	ldi	r26, 0xFE	; 254
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ca 20 	jmp	0x4194	; 0x4194 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ae 20 	jmp	0x415c	; 0x415c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ef       	ldi	r24, 0xFE	; 254
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ca 20 	jmp	0x4194	; 0x4194 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b6 20 	jmp	0x416c	; 0x416c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e ef       	ldi	r22, 0xFE	; 254
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ba 20 	jmp	0x4174	; 0x4174 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 be 20 	jmp	0x417c	; 0x417c <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 da 20 	jmp	0x41b4	; 0x41b4 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 b6 20 	jmp	0x416c	; 0x416c <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	ea 5f       	subi	r30, 0xFA	; 250
     b2a:	fe 4f       	sbci	r31, 0xFE	; 254
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <Queue_u8IsEmptyNum>:
#include"STD_TYPES.h"
#include"ArrayQueue.h"

uint8 Queue_u8IsEmptyNum(Queue_f32 *pq)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <Queue_u8IsEmptyNum+0x6>
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
    if((pq->front==-1)||(pq->front==pq->rear+1))
     e9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ea0:	fa 81       	ldd	r31, Y+2	; 0x02
     ea2:	80 a5       	ldd	r24, Z+40	; 0x28
     ea4:	8f 3f       	cpi	r24, 0xFF	; 255
     ea6:	89 f0       	breq	.+34     	; 0xeca <Queue_u8IsEmptyNum+0x3c>
     ea8:	e9 81       	ldd	r30, Y+1	; 0x01
     eaa:	fa 81       	ldd	r31, Y+2	; 0x02
     eac:	80 a5       	ldd	r24, Z+40	; 0x28
     eae:	28 2f       	mov	r18, r24
     eb0:	33 27       	eor	r19, r19
     eb2:	27 fd       	sbrc	r18, 7
     eb4:	30 95       	com	r19
     eb6:	e9 81       	ldd	r30, Y+1	; 0x01
     eb8:	fa 81       	ldd	r31, Y+2	; 0x02
     eba:	81 a5       	ldd	r24, Z+41	; 0x29
     ebc:	99 27       	eor	r25, r25
     ebe:	87 fd       	sbrc	r24, 7
     ec0:	90 95       	com	r25
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	28 17       	cp	r18, r24
     ec6:	39 07       	cpc	r19, r25
     ec8:	19 f4       	brne	.+6      	; 0xed0 <Queue_u8IsEmptyNum+0x42>
    {
        return 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <Queue_u8IsEmptyNum+0x44>
    }
    return 0;
     ed0:	1b 82       	std	Y+3, r1	; 0x03
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <Queue_u8IsEmptyOp>:

uint8 Queue_u8IsEmptyOp(Queue_uint8 *pq)
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <Queue_u8IsEmptyOp+0x6>
     ee6:	0f 92       	push	r0
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
    if((pq->front==-1)||(pq->front==pq->rear+1))
     ef0:	e9 81       	ldd	r30, Y+1	; 0x01
     ef2:	fa 81       	ldd	r31, Y+2	; 0x02
     ef4:	82 85       	ldd	r24, Z+10	; 0x0a
     ef6:	8f 3f       	cpi	r24, 0xFF	; 255
     ef8:	89 f0       	breq	.+34     	; 0xf1c <Queue_u8IsEmptyOp+0x3c>
     efa:	e9 81       	ldd	r30, Y+1	; 0x01
     efc:	fa 81       	ldd	r31, Y+2	; 0x02
     efe:	82 85       	ldd	r24, Z+10	; 0x0a
     f00:	28 2f       	mov	r18, r24
     f02:	33 27       	eor	r19, r19
     f04:	27 fd       	sbrc	r18, 7
     f06:	30 95       	com	r19
     f08:	e9 81       	ldd	r30, Y+1	; 0x01
     f0a:	fa 81       	ldd	r31, Y+2	; 0x02
     f0c:	83 85       	ldd	r24, Z+11	; 0x0b
     f0e:	99 27       	eor	r25, r25
     f10:	87 fd       	sbrc	r24, 7
     f12:	90 95       	com	r25
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	19 f4       	brne	.+6      	; 0xf22 <Queue_u8IsEmptyOp+0x42>
    {
        return 1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	8b 83       	std	Y+3, r24	; 0x03
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <Queue_u8IsEmptyOp+0x44>
    }
    return 0;
     f22:	1b 82       	std	Y+3, r1	; 0x03
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <Queue_vInitQueueNum>:

void Queue_vInitQueueNum(Queue_f32 *pq)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	00 d0       	rcall	.+0      	; 0xf38 <Queue_vInitQueueNum+0x6>
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	89 83       	std	Y+1, r24	; 0x01
    pq->front=-1;
     f40:	e9 81       	ldd	r30, Y+1	; 0x01
     f42:	fa 81       	ldd	r31, Y+2	; 0x02
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	80 a7       	std	Z+40, r24	; 0x28
    pq->rear=-1;
     f48:	e9 81       	ldd	r30, Y+1	; 0x01
     f4a:	fa 81       	ldd	r31, Y+2	; 0x02
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	81 a7       	std	Z+41, r24	; 0x29
    return;
}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <Queue_vInitQueueOp>:

void Queue_vInitQueueOp(Queue_uint8 *pq)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <Queue_vInitQueueOp+0x6>
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
    pq->front=-1;
     f68:	e9 81       	ldd	r30, Y+1	; 0x01
     f6a:	fa 81       	ldd	r31, Y+2	; 0x02
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
     f6e:	82 87       	std	Z+10, r24	; 0x0a
    pq->rear=-1;
     f70:	e9 81       	ldd	r30, Y+1	; 0x01
     f72:	fa 81       	ldd	r31, Y+2	; 0x02
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	83 87       	std	Z+11, r24	; 0x0b
    return;
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <Queue_vEnqueueNum>:

void Queue_vEnqueueNum(Queue_f32 *pq,f32 num)
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <Queue_vEnqueueNum+0x6>
     f88:	00 d0       	rcall	.+0      	; 0xf8a <Queue_vEnqueueNum+0x8>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <Queue_vEnqueueNum+0xa>
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	4b 83       	std	Y+3, r20	; 0x03
     f96:	5c 83       	std	Y+4, r21	; 0x04
     f98:	6d 83       	std	Y+5, r22	; 0x05
     f9a:	7e 83       	std	Y+6, r23	; 0x06
    if(pq->front==-1)
     f9c:	e9 81       	ldd	r30, Y+1	; 0x01
     f9e:	fa 81       	ldd	r31, Y+2	; 0x02
     fa0:	80 a5       	ldd	r24, Z+40	; 0x28
     fa2:	8f 3f       	cpi	r24, 0xFF	; 255
     fa4:	f1 f4       	brne	.+60     	; 0xfe2 <Queue_vEnqueueNum+0x60>
    {
        pq->front=0;
     fa6:	e9 81       	ldd	r30, Y+1	; 0x01
     fa8:	fa 81       	ldd	r31, Y+2	; 0x02
     faa:	10 a6       	std	Z+40, r1	; 0x28
        pq->rear=0;
     fac:	e9 81       	ldd	r30, Y+1	; 0x01
     fae:	fa 81       	ldd	r31, Y+2	; 0x02
     fb0:	11 a6       	std	Z+41, r1	; 0x29
        pq->arr[pq->front]=num;
     fb2:	e9 81       	ldd	r30, Y+1	; 0x01
     fb4:	fa 81       	ldd	r31, Y+2	; 0x02
     fb6:	80 a5       	ldd	r24, Z+40	; 0x28
     fb8:	99 27       	eor	r25, r25
     fba:	87 fd       	sbrc	r24, 7
     fbc:	90 95       	com	r25
     fbe:	29 81       	ldd	r18, Y+1	; 0x01
     fc0:	3a 81       	ldd	r19, Y+2	; 0x02
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	f9 01       	movw	r30, r18
     fcc:	e8 0f       	add	r30, r24
     fce:	f9 1f       	adc	r31, r25
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	ad 81       	ldd	r26, Y+5	; 0x05
     fd6:	be 81       	ldd	r27, Y+6	; 0x06
     fd8:	80 83       	st	Z, r24
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	a2 83       	std	Z+2, r26	; 0x02
     fde:	b3 83       	std	Z+3, r27	; 0x03
     fe0:	1e c0       	rjmp	.+60     	; 0x101e <Queue_vEnqueueNum+0x9c>
        return;
    }
    pq->rear++;
     fe2:	e9 81       	ldd	r30, Y+1	; 0x01
     fe4:	fa 81       	ldd	r31, Y+2	; 0x02
     fe6:	81 a5       	ldd	r24, Z+41	; 0x29
     fe8:	8f 5f       	subi	r24, 0xFF	; 255
     fea:	e9 81       	ldd	r30, Y+1	; 0x01
     fec:	fa 81       	ldd	r31, Y+2	; 0x02
     fee:	81 a7       	std	Z+41, r24	; 0x29
    pq->arr[pq->rear]=num;
     ff0:	e9 81       	ldd	r30, Y+1	; 0x01
     ff2:	fa 81       	ldd	r31, Y+2	; 0x02
     ff4:	81 a5       	ldd	r24, Z+41	; 0x29
     ff6:	99 27       	eor	r25, r25
     ff8:	87 fd       	sbrc	r24, 7
     ffa:	90 95       	com	r25
     ffc:	29 81       	ldd	r18, Y+1	; 0x01
     ffe:	3a 81       	ldd	r19, Y+2	; 0x02
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	f9 01       	movw	r30, r18
    100a:	e8 0f       	add	r30, r24
    100c:	f9 1f       	adc	r31, r25
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	9c 81       	ldd	r25, Y+4	; 0x04
    1012:	ad 81       	ldd	r26, Y+5	; 0x05
    1014:	be 81       	ldd	r27, Y+6	; 0x06
    1016:	80 83       	st	Z, r24
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	a2 83       	std	Z+2, r26	; 0x02
    101c:	b3 83       	std	Z+3, r27	; 0x03
    return;
}
    101e:	26 96       	adiw	r28, 0x06	; 6
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <Queue_vEnqueueOp>:

void Queue_vEnqueueOp(Queue_uint8 *pq,uint8 num)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <Queue_vEnqueueOp+0x6>
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	6b 83       	std	Y+3, r22	; 0x03
    if(pq->front==-1)
    1042:	e9 81       	ldd	r30, Y+1	; 0x01
    1044:	fa 81       	ldd	r31, Y+2	; 0x02
    1046:	82 85       	ldd	r24, Z+10	; 0x0a
    1048:	8f 3f       	cpi	r24, 0xFF	; 255
    104a:	a9 f4       	brne	.+42     	; 0x1076 <Queue_vEnqueueOp+0x46>
    {
        pq->front=0;
    104c:	e9 81       	ldd	r30, Y+1	; 0x01
    104e:	fa 81       	ldd	r31, Y+2	; 0x02
    1050:	12 86       	std	Z+10, r1	; 0x0a
        pq->rear=0;
    1052:	e9 81       	ldd	r30, Y+1	; 0x01
    1054:	fa 81       	ldd	r31, Y+2	; 0x02
    1056:	13 86       	std	Z+11, r1	; 0x0b
        pq->arr[pq->front]=num;
    1058:	e9 81       	ldd	r30, Y+1	; 0x01
    105a:	fa 81       	ldd	r31, Y+2	; 0x02
    105c:	82 85       	ldd	r24, Z+10	; 0x0a
    105e:	28 2f       	mov	r18, r24
    1060:	33 27       	eor	r19, r19
    1062:	27 fd       	sbrc	r18, 7
    1064:	30 95       	com	r19
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	fc 01       	movw	r30, r24
    106c:	e2 0f       	add	r30, r18
    106e:	f3 1f       	adc	r31, r19
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	80 83       	st	Z, r24
    1074:	15 c0       	rjmp	.+42     	; 0x10a0 <Queue_vEnqueueOp+0x70>
        return;
    }
    pq->rear++;
    1076:	e9 81       	ldd	r30, Y+1	; 0x01
    1078:	fa 81       	ldd	r31, Y+2	; 0x02
    107a:	83 85       	ldd	r24, Z+11	; 0x0b
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	e9 81       	ldd	r30, Y+1	; 0x01
    1080:	fa 81       	ldd	r31, Y+2	; 0x02
    1082:	83 87       	std	Z+11, r24	; 0x0b
    pq->arr[pq->rear]=num;
    1084:	e9 81       	ldd	r30, Y+1	; 0x01
    1086:	fa 81       	ldd	r31, Y+2	; 0x02
    1088:	83 85       	ldd	r24, Z+11	; 0x0b
    108a:	28 2f       	mov	r18, r24
    108c:	33 27       	eor	r19, r19
    108e:	27 fd       	sbrc	r18, 7
    1090:	30 95       	com	r19
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	fc 01       	movw	r30, r24
    1098:	e2 0f       	add	r30, r18
    109a:	f3 1f       	adc	r31, r19
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	80 83       	st	Z, r24
    return;
}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <Queue_f32DequeueNum>:

f32 Queue_f32DequeueNum(Queue_f32 *pq)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <Queue_f32DequeueNum+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <Queue_f32DequeueNum+0x8>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <Queue_f32DequeueNum+0xa>
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	9e 83       	std	Y+6, r25	; 0x06
    10bc:	8d 83       	std	Y+5, r24	; 0x05
	f32 Local_f32Num=pq->arr[pq->front];
    10be:	ed 81       	ldd	r30, Y+5	; 0x05
    10c0:	fe 81       	ldd	r31, Y+6	; 0x06
    10c2:	80 a5       	ldd	r24, Z+40	; 0x28
    10c4:	99 27       	eor	r25, r25
    10c6:	87 fd       	sbrc	r24, 7
    10c8:	90 95       	com	r25
    10ca:	2d 81       	ldd	r18, Y+5	; 0x05
    10cc:	3e 81       	ldd	r19, Y+6	; 0x06
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	f9 01       	movw	r30, r18
    10d8:	e8 0f       	add	r30, r24
    10da:	f9 1f       	adc	r31, r25
    10dc:	80 81       	ld	r24, Z
    10de:	91 81       	ldd	r25, Z+1	; 0x01
    10e0:	a2 81       	ldd	r26, Z+2	; 0x02
    10e2:	b3 81       	ldd	r27, Z+3	; 0x03
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	9a 83       	std	Y+2, r25	; 0x02
    10e8:	ab 83       	std	Y+3, r26	; 0x03
    10ea:	bc 83       	std	Y+4, r27	; 0x04
    pq->front++;
    10ec:	ed 81       	ldd	r30, Y+5	; 0x05
    10ee:	fe 81       	ldd	r31, Y+6	; 0x06
    10f0:	80 a5       	ldd	r24, Z+40	; 0x28
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	ed 81       	ldd	r30, Y+5	; 0x05
    10f6:	fe 81       	ldd	r31, Y+6	; 0x06
    10f8:	80 a7       	std	Z+40, r24	; 0x28
    return Local_f32Num;
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1100:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	26 96       	adiw	r28, 0x06	; 6
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <Queue_f32DequeueOp>:

uint8 Queue_f32DequeueOp(Queue_uint8 *pq)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <Queue_f32DequeueOp+0x6>
    111e:	0f 92       	push	r0
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	9b 83       	std	Y+3, r25	; 0x03
    1126:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Num=pq->arr[pq->front];
    1128:	ea 81       	ldd	r30, Y+2	; 0x02
    112a:	fb 81       	ldd	r31, Y+3	; 0x03
    112c:	82 85       	ldd	r24, Z+10	; 0x0a
    112e:	28 2f       	mov	r18, r24
    1130:	33 27       	eor	r19, r19
    1132:	27 fd       	sbrc	r18, 7
    1134:	30 95       	com	r19
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	9b 81       	ldd	r25, Y+3	; 0x03
    113a:	fc 01       	movw	r30, r24
    113c:	e2 0f       	add	r30, r18
    113e:	f3 1f       	adc	r31, r19
    1140:	80 81       	ld	r24, Z
    1142:	89 83       	std	Y+1, r24	; 0x01
    pq->front++;
    1144:	ea 81       	ldd	r30, Y+2	; 0x02
    1146:	fb 81       	ldd	r31, Y+3	; 0x03
    1148:	82 85       	ldd	r24, Z+10	; 0x0a
    114a:	8f 5f       	subi	r24, 0xFF	; 255
    114c:	ea 81       	ldd	r30, Y+2	; 0x02
    114e:	fb 81       	ldd	r31, Y+3	; 0x03
    1150:	82 87       	std	Z+10, r24	; 0x0a
    return Local_u8Num;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <Queue_u8CountNumb>:

uint8 Queue_u8CountNumb(Queue_f32* pq)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <Queue_u8CountNumb+0x6>
    1166:	00 d0       	rcall	.+0      	; 0x1168 <Queue_u8CountNumb+0x8>
    1168:	00 d0       	rcall	.+0      	; 0x116a <Queue_u8CountNumb+0xa>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	9d 83       	std	Y+5, r25	; 0x05
    1170:	8c 83       	std	Y+4, r24	; 0x04
	uint8 Local_u8Num=0;
    1172:	1b 82       	std	Y+3, r1	; 0x03
    if(Queue_u8IsEmptyNum(pq))
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	9d 81       	ldd	r25, Y+5	; 0x05
    1178:	0e 94 47 07 	call	0xe8e	; 0xe8e <Queue_u8IsEmptyNum>
    117c:	88 23       	and	r24, r24
    117e:	11 f0       	breq	.+4      	; 0x1184 <Queue_u8CountNumb+0x24>
    {
        return 0;
    1180:	1e 82       	std	Y+6, r1	; 0x06
    1182:	1f c0       	rjmp	.+62     	; 0x11c2 <Queue_u8CountNumb+0x62>
    }
    for(int i=pq->front;i<=pq->rear;i++)
    1184:	ec 81       	ldd	r30, Y+4	; 0x04
    1186:	fd 81       	ldd	r31, Y+5	; 0x05
    1188:	80 a5       	ldd	r24, Z+40	; 0x28
    118a:	99 27       	eor	r25, r25
    118c:	87 fd       	sbrc	r24, 7
    118e:	90 95       	com	r25
    1190:	9a 83       	std	Y+2, r25	; 0x02
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	08 c0       	rjmp	.+16     	; 0x11a6 <Queue_u8CountNumb+0x46>
    {
    	Local_u8Num++;
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8Num=0;
    if(Queue_u8IsEmptyNum(pq))
    {
        return 0;
    }
    for(int i=pq->front;i<=pq->rear;i++)
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	ec 81       	ldd	r30, Y+4	; 0x04
    11a8:	fd 81       	ldd	r31, Y+5	; 0x05
    11aa:	81 a5       	ldd	r24, Z+41	; 0x29
    11ac:	28 2f       	mov	r18, r24
    11ae:	33 27       	eor	r19, r19
    11b0:	27 fd       	sbrc	r18, 7
    11b2:	30 95       	com	r19
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	28 17       	cp	r18, r24
    11ba:	39 07       	cpc	r19, r25
    11bc:	64 f7       	brge	.-40     	; 0x1196 <Queue_u8CountNumb+0x36>
    {
    	Local_u8Num++;
    }
    return Local_u8Num;
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	8e 83       	std	Y+6, r24	; 0x06
    11c2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    11c4:	26 96       	adiw	r28, 0x06	; 6
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <Queue_u8CountOp>:

uint8 Queue_u8CountOp(Queue_uint8* pq)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <Queue_u8CountOp+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <Queue_u8CountOp+0x8>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <Queue_u8CountOp+0xa>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9d 83       	std	Y+5, r25	; 0x05
    11e6:	8c 83       	std	Y+4, r24	; 0x04
	uint8 Local_u8Num=0;
    11e8:	1b 82       	std	Y+3, r1	; 0x03
    if(Queue_u8IsEmptyOp(pq))
    11ea:	8c 81       	ldd	r24, Y+4	; 0x04
    11ec:	9d 81       	ldd	r25, Y+5	; 0x05
    11ee:	0e 94 70 07 	call	0xee0	; 0xee0 <Queue_u8IsEmptyOp>
    11f2:	88 23       	and	r24, r24
    11f4:	11 f0       	breq	.+4      	; 0x11fa <Queue_u8CountOp+0x24>
    {
        return 0;
    11f6:	1e 82       	std	Y+6, r1	; 0x06
    11f8:	1f c0       	rjmp	.+62     	; 0x1238 <Queue_u8CountOp+0x62>
    }
    for(int i=pq->front;i<=pq->rear;i++)
    11fa:	ec 81       	ldd	r30, Y+4	; 0x04
    11fc:	fd 81       	ldd	r31, Y+5	; 0x05
    11fe:	82 85       	ldd	r24, Z+10	; 0x0a
    1200:	99 27       	eor	r25, r25
    1202:	87 fd       	sbrc	r24, 7
    1204:	90 95       	com	r25
    1206:	9a 83       	std	Y+2, r25	; 0x02
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	08 c0       	rjmp	.+16     	; 0x121c <Queue_u8CountOp+0x46>
    {
    	Local_u8Num++;
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8Num=0;
    if(Queue_u8IsEmptyOp(pq))
    {
        return 0;
    }
    for(int i=pq->front;i<=pq->rear;i++)
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	ec 81       	ldd	r30, Y+4	; 0x04
    121e:	fd 81       	ldd	r31, Y+5	; 0x05
    1220:	83 85       	ldd	r24, Z+11	; 0x0b
    1222:	28 2f       	mov	r18, r24
    1224:	33 27       	eor	r19, r19
    1226:	27 fd       	sbrc	r18, 7
    1228:	30 95       	com	r19
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	28 17       	cp	r18, r24
    1230:	39 07       	cpc	r19, r25
    1232:	64 f7       	brge	.-40     	; 0x120c <Queue_u8CountOp+0x36>
    {
    	Local_u8Num++;
    }
    return Local_u8Num;
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	8e 83       	std	Y+6, r24	; 0x06
    1238:	8e 81       	ldd	r24, Y+6	; 0x06
}
    123a:	26 96       	adiw	r28, 0x06	; 6
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <StackNum_vInit>:
#include<stdio.h>
#include"STD_TYPES.h"
#include"ArrayStack.h"

void StackNum_vInit(StackF32 *ps)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <StackNum_vInit+0x6>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	89 83       	std	Y+1, r24	; 0x01
    ps->top=-1;
    125a:	e9 81       	ldd	r30, Y+1	; 0x01
    125c:	fa 81       	ldd	r31, Y+2	; 0x02
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	80 83       	st	Z, r24
    return;
}
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <StackChar_vInit>:

void StackChar_vInit(StackUint8 *ps)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <StackChar_vInit+0x6>
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
    ps->top=-1;
    127a:	e9 81       	ldd	r30, Y+1	; 0x01
    127c:	fa 81       	ldd	r31, Y+2	; 0x02
    127e:	8f ef       	ldi	r24, 0xFF	; 255
    1280:	80 83       	st	Z, r24
    return;
}
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <StackNum_vPushNum>:


void StackNum_vPushNum(StackF32 *ps, f32 num)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <StackNum_vPushNum+0x6>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <StackNum_vPushNum+0x8>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <StackNum_vPushNum+0xa>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	4b 83       	std	Y+3, r20	; 0x03
    12a0:	5c 83       	std	Y+4, r21	; 0x04
    12a2:	6d 83       	std	Y+5, r22	; 0x05
    12a4:	7e 83       	std	Y+6, r23	; 0x06
    ps->top++;
    12a6:	e9 81       	ldd	r30, Y+1	; 0x01
    12a8:	fa 81       	ldd	r31, Y+2	; 0x02
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	e9 81       	ldd	r30, Y+1	; 0x01
    12b0:	fa 81       	ldd	r31, Y+2	; 0x02
    12b2:	80 83       	st	Z, r24
    ps->arr[ps->top]=num;
    12b4:	e9 81       	ldd	r30, Y+1	; 0x01
    12b6:	fa 81       	ldd	r31, Y+2	; 0x02
    12b8:	80 81       	ld	r24, Z
    12ba:	99 27       	eor	r25, r25
    12bc:	87 fd       	sbrc	r24, 7
    12be:	90 95       	com	r25
    12c0:	29 81       	ldd	r18, Y+1	; 0x01
    12c2:	3a 81       	ldd	r19, Y+2	; 0x02
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	82 0f       	add	r24, r18
    12ce:	93 1f       	adc	r25, r19
    12d0:	fc 01       	movw	r30, r24
    12d2:	31 96       	adiw	r30, 0x01	; 1
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	ad 81       	ldd	r26, Y+5	; 0x05
    12da:	be 81       	ldd	r27, Y+6	; 0x06
    12dc:	80 83       	st	Z, r24
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	a2 83       	std	Z+2, r26	; 0x02
    12e2:	b3 83       	std	Z+3, r27	; 0x03
    return;
}
    12e4:	26 96       	adiw	r28, 0x06	; 6
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <StackChar_vPushOp>:

void StackChar_vPushOp(StackUint8 *ps, uint8 Op)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <StackChar_vPushOp+0x6>
    12fc:	0f 92       	push	r0
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	6b 83       	std	Y+3, r22	; 0x03
    ps->top++;
    1308:	e9 81       	ldd	r30, Y+1	; 0x01
    130a:	fa 81       	ldd	r31, Y+2	; 0x02
    130c:	80 81       	ld	r24, Z
    130e:	8f 5f       	subi	r24, 0xFF	; 255
    1310:	e9 81       	ldd	r30, Y+1	; 0x01
    1312:	fa 81       	ldd	r31, Y+2	; 0x02
    1314:	80 83       	st	Z, r24
    ps->arr[ps->top]=Op;
    1316:	e9 81       	ldd	r30, Y+1	; 0x01
    1318:	fa 81       	ldd	r31, Y+2	; 0x02
    131a:	80 81       	ld	r24, Z
    131c:	28 2f       	mov	r18, r24
    131e:	33 27       	eor	r19, r19
    1320:	27 fd       	sbrc	r18, 7
    1322:	30 95       	com	r19
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	9a 81       	ldd	r25, Y+2	; 0x02
    1328:	82 0f       	add	r24, r18
    132a:	93 1f       	adc	r25, r19
    132c:	fc 01       	movw	r30, r24
    132e:	31 96       	adiw	r30, 0x01	; 1
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	80 83       	st	Z, r24
    return;
}
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <Stack_u8IsEmptyNum>:

uint8 Stack_u8IsEmptyNum(StackF32 *ps)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <Stack_u8IsEmptyNum+0x6>
    1346:	0f 92       	push	r0
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
    if(ps->top==-1)
    1350:	e9 81       	ldd	r30, Y+1	; 0x01
    1352:	fa 81       	ldd	r31, Y+2	; 0x02
    1354:	80 81       	ld	r24, Z
    1356:	8f 3f       	cpi	r24, 0xFF	; 255
    1358:	19 f4       	brne	.+6      	; 0x1360 <Stack_u8IsEmptyNum+0x20>
    {
        return 1;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	8b 83       	std	Y+3, r24	; 0x03
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <Stack_u8IsEmptyNum+0x22>
    }
    else
    {
        return 0;
    1360:	1b 82       	std	Y+3, r1	; 0x03
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <Stack_u8IsEmptyOp>:

uint8 Stack_u8IsEmptyOp(StackUint8 *ps)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <Stack_u8IsEmptyOp+0x6>
    1376:	0f 92       	push	r0
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	89 83       	std	Y+1, r24	; 0x01
    if(ps->top==-1)
    1380:	e9 81       	ldd	r30, Y+1	; 0x01
    1382:	fa 81       	ldd	r31, Y+2	; 0x02
    1384:	80 81       	ld	r24, Z
    1386:	8f 3f       	cpi	r24, 0xFF	; 255
    1388:	19 f4       	brne	.+6      	; 0x1390 <Stack_u8IsEmptyOp+0x20>
    {
        return 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	8b 83       	std	Y+3, r24	; 0x03
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <Stack_u8IsEmptyOp+0x22>
    }
    else
    {
        return 0;
    1390:	1b 82       	std	Y+3, r1	; 0x03
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <StackNum_u8Pop>:

f32 StackNum_u8Pop(StackF32 *ps)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <StackNum_u8Pop+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <StackNum_u8Pop+0x8>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <StackNum_u8Pop+0xa>
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	9e 83       	std	Y+6, r25	; 0x06
    13b0:	8d 83       	std	Y+5, r24	; 0x05
	f32 Local_u32Num=ps->arr[ps->top];
    13b2:	ed 81       	ldd	r30, Y+5	; 0x05
    13b4:	fe 81       	ldd	r31, Y+6	; 0x06
    13b6:	80 81       	ld	r24, Z
    13b8:	99 27       	eor	r25, r25
    13ba:	87 fd       	sbrc	r24, 7
    13bc:	90 95       	com	r25
    13be:	2d 81       	ldd	r18, Y+5	; 0x05
    13c0:	3e 81       	ldd	r19, Y+6	; 0x06
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	82 0f       	add	r24, r18
    13cc:	93 1f       	adc	r25, r19
    13ce:	fc 01       	movw	r30, r24
    13d0:	31 96       	adiw	r30, 0x01	; 1
    13d2:	80 81       	ld	r24, Z
    13d4:	91 81       	ldd	r25, Z+1	; 0x01
    13d6:	a2 81       	ldd	r26, Z+2	; 0x02
    13d8:	b3 81       	ldd	r27, Z+3	; 0x03
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	ab 83       	std	Y+3, r26	; 0x03
    13e0:	bc 83       	std	Y+4, r27	; 0x04
    ps->top=ps->top-1;
    13e2:	ed 81       	ldd	r30, Y+5	; 0x05
    13e4:	fe 81       	ldd	r31, Y+6	; 0x06
    13e6:	80 81       	ld	r24, Z
    13e8:	81 50       	subi	r24, 0x01	; 1
    13ea:	ed 81       	ldd	r30, Y+5	; 0x05
    13ec:	fe 81       	ldd	r31, Y+6	; 0x06
    13ee:	80 83       	st	Z, r24
	return Local_u32Num;
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	9a 81       	ldd	r25, Y+2	; 0x02
    13f4:	ab 81       	ldd	r26, Y+3	; 0x03
    13f6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	26 96       	adiw	r28, 0x06	; 6
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <StackChar_u8Pop>:

uint8 StackChar_u8Pop(StackUint8 *ps)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <StackChar_u8Pop+0x6>
    1414:	0f 92       	push	r0
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	9b 83       	std	Y+3, r25	; 0x03
    141c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Op=ps->arr[ps->top];
    141e:	ea 81       	ldd	r30, Y+2	; 0x02
    1420:	fb 81       	ldd	r31, Y+3	; 0x03
    1422:	80 81       	ld	r24, Z
    1424:	28 2f       	mov	r18, r24
    1426:	33 27       	eor	r19, r19
    1428:	27 fd       	sbrc	r18, 7
    142a:	30 95       	com	r19
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	9b 81       	ldd	r25, Y+3	; 0x03
    1430:	82 0f       	add	r24, r18
    1432:	93 1f       	adc	r25, r19
    1434:	fc 01       	movw	r30, r24
    1436:	31 96       	adiw	r30, 0x01	; 1
    1438:	80 81       	ld	r24, Z
    143a:	89 83       	std	Y+1, r24	; 0x01
    ps->top=ps->top-1;
    143c:	ea 81       	ldd	r30, Y+2	; 0x02
    143e:	fb 81       	ldd	r31, Y+3	; 0x03
    1440:	80 81       	ld	r24, Z
    1442:	81 50       	subi	r24, 0x01	; 1
    1444:	ea 81       	ldd	r30, Y+2	; 0x02
    1446:	fb 81       	ldd	r31, Y+3	; 0x03
    1448:	80 83       	st	Z, r24
	return Local_u8Op;
    144a:	89 81       	ldd	r24, Y+1	; 0x01
}
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <vSendEnablePulse>:
#include"CLCD_cfg.h"
#include"CLCD_prv.h"
#include"BIT_MATH.h"
#include"ErrType.h"
static void vSendEnablePulse()
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	2e 97       	sbiw	r28, 0x0e	; 14
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(CLCD_u8CONTROL_PORT, CLCD_u8ENABLE_PIN, DIO_u8PIN_HIGH);
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	62 e0       	ldi	r22, 0x02	; 2
    1470:	41 e0       	ldi	r20, 0x01	; 1
    1472:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DIO_u8SetPinValue>
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a0 e0       	ldi	r26, 0x00	; 0
    147c:	b0 e4       	ldi	r27, 0x40	; 64
    147e:	8b 87       	std	Y+11, r24	; 0x0b
    1480:	9c 87       	std	Y+12, r25	; 0x0c
    1482:	ad 87       	std	Y+13, r26	; 0x0d
    1484:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1486:	6b 85       	ldd	r22, Y+11	; 0x0b
    1488:	7c 85       	ldd	r23, Y+12	; 0x0c
    148a:	8d 85       	ldd	r24, Y+13	; 0x0d
    148c:	9e 85       	ldd	r25, Y+14	; 0x0e
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	4a e7       	ldi	r20, 0x7A	; 122
    1494:	55 e4       	ldi	r21, 0x45	; 69
    1496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	8f 83       	std	Y+7, r24	; 0x07
    14a0:	98 87       	std	Y+8, r25	; 0x08
    14a2:	a9 87       	std	Y+9, r26	; 0x09
    14a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a6:	6f 81       	ldd	r22, Y+7	; 0x07
    14a8:	78 85       	ldd	r23, Y+8	; 0x08
    14aa:	89 85       	ldd	r24, Y+9	; 0x09
    14ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e8       	ldi	r20, 0x80	; 128
    14b4:	5f e3       	ldi	r21, 0x3F	; 63
    14b6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    14ba:	88 23       	and	r24, r24
    14bc:	2c f4       	brge	.+10     	; 0x14c8 <vSendEnablePulse+0x70>
		__ticks = 1;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	9e 83       	std	Y+6, r25	; 0x06
    14c4:	8d 83       	std	Y+5, r24	; 0x05
    14c6:	3f c0       	rjmp	.+126    	; 0x1546 <vSendEnablePulse+0xee>
	else if (__tmp > 65535)
    14c8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ca:	78 85       	ldd	r23, Y+8	; 0x08
    14cc:	89 85       	ldd	r24, Y+9	; 0x09
    14ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	3f ef       	ldi	r19, 0xFF	; 255
    14d4:	4f e7       	ldi	r20, 0x7F	; 127
    14d6:	57 e4       	ldi	r21, 0x47	; 71
    14d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    14dc:	18 16       	cp	r1, r24
    14de:	4c f5       	brge	.+82     	; 0x1532 <vSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e2       	ldi	r20, 0x20	; 32
    14ee:	51 e4       	ldi	r21, 0x41	; 65
    14f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	9e 83       	std	Y+6, r25	; 0x06
    1506:	8d 83       	std	Y+5, r24	; 0x05
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <vSendEnablePulse+0xd0>
    150a:	80 e9       	ldi	r24, 0x90	; 144
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	9c 83       	std	Y+4, r25	; 0x04
    1510:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <vSendEnablePulse+0xbe>
    151a:	9c 83       	std	Y+4, r25	; 0x04
    151c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	9e 83       	std	Y+6, r25	; 0x06
    1526:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1528:	8d 81       	ldd	r24, Y+5	; 0x05
    152a:	9e 81       	ldd	r25, Y+6	; 0x06
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	69 f7       	brne	.-38     	; 0x150a <vSendEnablePulse+0xb2>
    1530:	14 c0       	rjmp	.+40     	; 0x155a <vSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1532:	6f 81       	ldd	r22, Y+7	; 0x07
    1534:	78 85       	ldd	r23, Y+8	; 0x08
    1536:	89 85       	ldd	r24, Y+9	; 0x09
    1538:	9a 85       	ldd	r25, Y+10	; 0x0a
    153a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	9e 83       	std	Y+6, r25	; 0x06
    1544:	8d 83       	std	Y+5, r24	; 0x05
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <vSendEnablePulse+0xfa>
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8CONTROL_PORT, CLCD_u8ENABLE_PIN, DIO_u8PIN_LOW);
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	62 e0       	ldi	r22, 0x02	; 2
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DIO_u8SetPinValue>
}
    1564:	2e 96       	adiw	r28, 0x0e	; 14
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <vSendHalfData>:

static void vSendHalfData(uint8 cpy_u8Data)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	0f 92       	push	r0
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8DATA_PIN4,GET_BIT(cpy_u8Data,0));
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	98 2f       	mov	r25, r24
    1586:	91 70       	andi	r25, 0x01	; 1
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	63 e0       	ldi	r22, 0x03	; 3
    158c:	49 2f       	mov	r20, r25
    158e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8DATA_PIN5,GET_BIT(cpy_u8Data,1));
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	86 95       	lsr	r24
    1596:	98 2f       	mov	r25, r24
    1598:	91 70       	andi	r25, 0x01	; 1
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	64 e0       	ldi	r22, 0x04	; 4
    159e:	49 2f       	mov	r20, r25
    15a0:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8DATA_PIN6,GET_BIT(cpy_u8Data,2));
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	86 95       	lsr	r24
    15a8:	86 95       	lsr	r24
    15aa:	98 2f       	mov	r25, r24
    15ac:	91 70       	andi	r25, 0x01	; 1
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	65 e0       	ldi	r22, 0x05	; 5
    15b2:	49 2f       	mov	r20, r25
    15b4:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8DATA_PIN7,GET_BIT(cpy_u8Data,3));
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	86 95       	lsr	r24
    15bc:	86 95       	lsr	r24
    15be:	86 95       	lsr	r24
    15c0:	98 2f       	mov	r25, r24
    15c2:	91 70       	andi	r25, 0x01	; 1
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	66 e0       	ldi	r22, 0x06	; 6
    15c8:	49 2f       	mov	r20, r25
    15ca:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DIO_u8SetPinValue>
	vSendEnablePulse();
    15ce:	0e 94 2c 0a 	call	0x1458	; 0x1458 <vSendEnablePulse>
}
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <CLCD_vSendCommand>:

void CLCD_vSendCommand(uint8 cpy_u8Command)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	0f 92       	push	r0
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8CONTROL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_LOW);
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DIO_u8SetPinValue>

	#if CLCD_u8MODE==EIGHT_BIT
	DIO_u8SetPortValue(CLCD_u8DATA_PORT, cpy_u8Command);
	vSendEnablePulse();
	#elif CLCD_u8MODE==FOUR_BIT
	vSendHalfData((cpy_u8Command>>4));
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	82 95       	swap	r24
    15f4:	8f 70       	andi	r24, 0x0F	; 15
    15f6:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vSendHalfData>
	vSendHalfData(cpy_u8Command);
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vSendHalfData>
	#endif
}
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <CLCD_vSendData>:

void CLCD_vSendData(uint8 cpy_u8Data)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	0f 92       	push	r0
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8CONTROL_PORT, CLCD_u8RS_PIN, DIO_u8PIN_HIGH);
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	61 e0       	ldi	r22, 0x01	; 1
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DIO_u8SetPinValue>
	#endif
	#if CLCD_u8MODE==EIGHT_BIT
	DIO_u8SetPortValue(CLCD_u8DATA_PORT, cpy_u8Data);
	vSendEnablePulse();
	#elif CLCD_u8MODE==FOUR_BIT
	vSendHalfData((cpy_u8Data>>4));
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	82 95       	swap	r24
    1622:	8f 70       	andi	r24, 0x0F	; 15
    1624:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vSendHalfData>
	vSendHalfData(cpy_u8Data);
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vSendHalfData>
	#endif
}
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <CLCD_vInitLcd>:

void CLCD_vInitLcd()
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	2e 97       	sbiw	r28, 0x0e	; 14
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a0 e2       	ldi	r26, 0x20	; 32
    1650:	b2 e4       	ldi	r27, 0x42	; 66
    1652:	8b 87       	std	Y+11, r24	; 0x0b
    1654:	9c 87       	std	Y+12, r25	; 0x0c
    1656:	ad 87       	std	Y+13, r26	; 0x0d
    1658:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165a:	6b 85       	ldd	r22, Y+11	; 0x0b
    165c:	7c 85       	ldd	r23, Y+12	; 0x0c
    165e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1660:	9e 85       	ldd	r25, Y+14	; 0x0e
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	4a e7       	ldi	r20, 0x7A	; 122
    1668:	55 e4       	ldi	r21, 0x45	; 69
    166a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	8f 83       	std	Y+7, r24	; 0x07
    1674:	98 87       	std	Y+8, r25	; 0x08
    1676:	a9 87       	std	Y+9, r26	; 0x09
    1678:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    167a:	6f 81       	ldd	r22, Y+7	; 0x07
    167c:	78 85       	ldd	r23, Y+8	; 0x08
    167e:	89 85       	ldd	r24, Y+9	; 0x09
    1680:	9a 85       	ldd	r25, Y+10	; 0x0a
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e8       	ldi	r20, 0x80	; 128
    1688:	5f e3       	ldi	r21, 0x3F	; 63
    168a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    168e:	88 23       	and	r24, r24
    1690:	2c f4       	brge	.+10     	; 0x169c <CLCD_vInitLcd+0x66>
		__ticks = 1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
    169a:	3f c0       	rjmp	.+126    	; 0x171a <CLCD_vInitLcd+0xe4>
	else if (__tmp > 65535)
    169c:	6f 81       	ldd	r22, Y+7	; 0x07
    169e:	78 85       	ldd	r23, Y+8	; 0x08
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	3f ef       	ldi	r19, 0xFF	; 255
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	57 e4       	ldi	r21, 0x47	; 71
    16ac:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	4c f5       	brge	.+82     	; 0x1706 <CLCD_vInitLcd+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e2       	ldi	r20, 0x20	; 32
    16c2:	51 e4       	ldi	r21, 0x41	; 65
    16c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	9e 83       	std	Y+6, r25	; 0x06
    16da:	8d 83       	std	Y+5, r24	; 0x05
    16dc:	0f c0       	rjmp	.+30     	; 0x16fc <CLCD_vInitLcd+0xc6>
    16de:	80 e9       	ldi	r24, 0x90	; 144
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	8b 83       	std	Y+3, r24	; 0x03
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <CLCD_vInitLcd+0xb4>
    16ee:	9c 83       	std	Y+4, r25	; 0x04
    16f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	69 f7       	brne	.-38     	; 0x16de <CLCD_vInitLcd+0xa8>
    1704:	14 c0       	rjmp	.+40     	; 0x172e <CLCD_vInitLcd+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1706:	6f 81       	ldd	r22, Y+7	; 0x07
    1708:	78 85       	ldd	r23, Y+8	; 0x08
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    170c:	9a 85       	ldd	r25, Y+10	; 0x0a
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <CLCD_vInitLcd+0xf0>
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	#if CLCD_u8MODE==EIGHT_BIT
	CLCD_vSendCommand(0b00111000);
	#elif CLCD_u8MODE==FOUR_BIT
	vSendHalfData(0b0010);
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vSendHalfData>
	vSendHalfData(0b0010);
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vSendHalfData>
	vSendHalfData(0b1000);
    173a:	88 e0       	ldi	r24, 0x08	; 8
    173c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <vSendHalfData>
	#endif
	CLCD_vSendCommand(0b00001100);
    1740:	8c e0       	ldi	r24, 0x0C	; 12
    1742:	0e 94 ed 0a 	call	0x15da	; 0x15da <CLCD_vSendCommand>
	CLCD_vSendCommand(1);
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	0e 94 ed 0a 	call	0x15da	; 0x15da <CLCD_vSendCommand>
}
    174c:	2e 96       	adiw	r28, 0x0e	; 14
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <CLCD_vSendString>:
void CLCD_vSendString(uint8* ptr_u8Data)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	00 d0       	rcall	.+0      	; 0x1764 <CLCD_vSendString+0x6>
    1764:	0f 92       	push	r0
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	9b 83       	std	Y+3, r25	; 0x03
    176c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Loc_u8Iterator=0;
    176e:	19 82       	std	Y+1, r1	; 0x01
    1770:	0e c0       	rjmp	.+28     	; 0x178e <CLCD_vSendString+0x30>
	while(ptr_u8Data[Loc_u8Iterator])
	{
		CLCD_vSendData(ptr_u8Data[Loc_u8Iterator]);
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	9b 81       	ldd	r25, Y+3	; 0x03
    177c:	fc 01       	movw	r30, r24
    177e:	e2 0f       	add	r30, r18
    1780:	f3 1f       	adc	r31, r19
    1782:	80 81       	ld	r24, Z
    1784:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
		Loc_u8Iterator++;
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	8f 5f       	subi	r24, 0xFF	; 255
    178c:	89 83       	std	Y+1, r24	; 0x01
	CLCD_vSendCommand(1);
}
void CLCD_vSendString(uint8* ptr_u8Data)
{
	uint8 Loc_u8Iterator=0;
	while(ptr_u8Data[Loc_u8Iterator])
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	fc 01       	movw	r30, r24
    179a:	e2 0f       	add	r30, r18
    179c:	f3 1f       	adc	r31, r19
    179e:	80 81       	ld	r24, Z
    17a0:	88 23       	and	r24, r24
    17a2:	39 f7       	brne	.-50     	; 0x1772 <CLCD_vSendString+0x14>
	{
		CLCD_vSendData(ptr_u8Data[Loc_u8Iterator]);
		Loc_u8Iterator++;
	}
}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <CLCD_vSendNumber>:

void CLCD_vSendNumber(sint32 cpy_s32Data)
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	2d 97       	sbiw	r28, 0x0d	; 13
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	69 87       	std	Y+9, r22	; 0x09
    17c6:	7a 87       	std	Y+10, r23	; 0x0a
    17c8:	8b 87       	std	Y+11, r24	; 0x0b
    17ca:	9c 87       	std	Y+12, r25	; 0x0c
	if(cpy_s32Data<0)
    17cc:	89 85       	ldd	r24, Y+9	; 0x09
    17ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d0:	ab 85       	ldd	r26, Y+11	; 0x0b
    17d2:	bc 85       	ldd	r27, Y+12	; 0x0c
    17d4:	bb 23       	and	r27, r27
    17d6:	94 f4       	brge	.+36     	; 0x17fc <CLCD_vSendNumber+0x4c>
	{
		CLCD_vSendData('-');
    17d8:	8d e2       	ldi	r24, 0x2D	; 45
    17da:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
		cpy_s32Data=-1*cpy_s32Data;
    17de:	89 85       	ldd	r24, Y+9	; 0x09
    17e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e2:	ab 85       	ldd	r26, Y+11	; 0x0b
    17e4:	bc 85       	ldd	r27, Y+12	; 0x0c
    17e6:	b0 95       	com	r27
    17e8:	a0 95       	com	r26
    17ea:	90 95       	com	r25
    17ec:	81 95       	neg	r24
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	af 4f       	sbci	r26, 0xFF	; 255
    17f2:	bf 4f       	sbci	r27, 0xFF	; 255
    17f4:	89 87       	std	Y+9, r24	; 0x09
    17f6:	9a 87       	std	Y+10, r25	; 0x0a
    17f8:	ab 87       	std	Y+11, r26	; 0x0b
    17fa:	bc 87       	std	Y+12, r27	; 0x0c
	}
	if(cpy_s32Data==0)
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	ab 85       	ldd	r26, Y+11	; 0x0b
    1802:	bc 85       	ldd	r27, Y+12	; 0x0c
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	a1 05       	cpc	r26, r1
    1808:	b1 05       	cpc	r27, r1
    180a:	19 f4       	brne	.+6      	; 0x1812 <CLCD_vSendNumber+0x62>
	{
		CLCD_vSendData('0');
    180c:	80 e3       	ldi	r24, 0x30	; 48
    180e:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
	}
	sint32 Loc_u32Num=0,Loc_u32Counter=0;
    1812:	1d 82       	std	Y+5, r1	; 0x05
    1814:	1e 82       	std	Y+6, r1	; 0x06
    1816:	1f 82       	std	Y+7, r1	; 0x07
    1818:	18 86       	std	Y+8, r1	; 0x08
    181a:	19 82       	std	Y+1, r1	; 0x01
    181c:	1a 82       	std	Y+2, r1	; 0x02
    181e:	1b 82       	std	Y+3, r1	; 0x03
    1820:	1c 82       	std	Y+4, r1	; 0x04
    1822:	4b c0       	rjmp	.+150    	; 0x18ba <CLCD_vSendNumber+0x10a>
	while(cpy_s32Data>0)
	{
		Loc_u32Num*=10;
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	af 81       	ldd	r26, Y+7	; 0x07
    182a:	b8 85       	ldd	r27, Y+8	; 0x08
    182c:	2a e0       	ldi	r18, 0x0A	; 10
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e0       	ldi	r20, 0x00	; 0
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	bc 01       	movw	r22, r24
    1836:	cd 01       	movw	r24, r26
    1838:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsi3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	af 83       	std	Y+7, r26	; 0x07
    1846:	b8 87       	std	Y+8, r27	; 0x08
		Loc_u32Counter++;
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	ab 81       	ldd	r26, Y+3	; 0x03
    184e:	bc 81       	ldd	r27, Y+4	; 0x04
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	a1 1d       	adc	r26, r1
    1854:	b1 1d       	adc	r27, r1
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	ab 83       	std	Y+3, r26	; 0x03
    185c:	bc 83       	std	Y+4, r27	; 0x04
		Loc_u32Num+=(cpy_s32Data%10);
    185e:	89 85       	ldd	r24, Y+9	; 0x09
    1860:	9a 85       	ldd	r25, Y+10	; 0x0a
    1862:	ab 85       	ldd	r26, Y+11	; 0x0b
    1864:	bc 85       	ldd	r27, Y+12	; 0x0c
    1866:	2a e0       	ldi	r18, 0x0A	; 10
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e0       	ldi	r20, 0x00	; 0
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	0e 94 71 20 	call	0x40e2	; 0x40e2 <__divmodsi4>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9c 01       	movw	r18, r24
    187c:	ad 01       	movw	r20, r26
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	af 81       	ldd	r26, Y+7	; 0x07
    1884:	b8 85       	ldd	r27, Y+8	; 0x08
    1886:	82 0f       	add	r24, r18
    1888:	93 1f       	adc	r25, r19
    188a:	a4 1f       	adc	r26, r20
    188c:	b5 1f       	adc	r27, r21
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	af 83       	std	Y+7, r26	; 0x07
    1894:	b8 87       	std	Y+8, r27	; 0x08
		cpy_s32Data/=10;
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	ab 85       	ldd	r26, Y+11	; 0x0b
    189c:	bc 85       	ldd	r27, Y+12	; 0x0c
    189e:	2a e0       	ldi	r18, 0x0A	; 10
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	0e 94 71 20 	call	0x40e2	; 0x40e2 <__divmodsi4>
    18ae:	da 01       	movw	r26, r20
    18b0:	c9 01       	movw	r24, r18
    18b2:	89 87       	std	Y+9, r24	; 0x09
    18b4:	9a 87       	std	Y+10, r25	; 0x0a
    18b6:	ab 87       	std	Y+11, r26	; 0x0b
    18b8:	bc 87       	std	Y+12, r27	; 0x0c
	if(cpy_s32Data==0)
	{
		CLCD_vSendData('0');
	}
	sint32 Loc_u32Num=0,Loc_u32Counter=0;
	while(cpy_s32Data>0)
    18ba:	89 85       	ldd	r24, Y+9	; 0x09
    18bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18be:	ab 85       	ldd	r26, Y+11	; 0x0b
    18c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    18c2:	18 16       	cp	r1, r24
    18c4:	19 06       	cpc	r1, r25
    18c6:	1a 06       	cpc	r1, r26
    18c8:	1b 06       	cpc	r1, r27
    18ca:	0c f4       	brge	.+2      	; 0x18ce <CLCD_vSendNumber+0x11e>
    18cc:	ab cf       	rjmp	.-170    	; 0x1824 <CLCD_vSendNumber+0x74>
    18ce:	2e c0       	rjmp	.+92     	; 0x192c <CLCD_vSendNumber+0x17c>
		Loc_u32Num+=(cpy_s32Data%10);
		cpy_s32Data/=10;
	}
	while(Loc_u32Num)
	{
		CLCD_vSendData((uint8)(Loc_u32Num%10)+'0');
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	af 81       	ldd	r26, Y+7	; 0x07
    18d6:	b8 85       	ldd	r27, Y+8	; 0x08
    18d8:	2a e0       	ldi	r18, 0x0A	; 10
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 71 20 	call	0x40e2	; 0x40e2 <__divmodsi4>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	80 5d       	subi	r24, 0xD0	; 208
    18ee:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
		Loc_u32Num/=10;
    18f2:	8d 81       	ldd	r24, Y+5	; 0x05
    18f4:	9e 81       	ldd	r25, Y+6	; 0x06
    18f6:	af 81       	ldd	r26, Y+7	; 0x07
    18f8:	b8 85       	ldd	r27, Y+8	; 0x08
    18fa:	2a e0       	ldi	r18, 0x0A	; 10
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	0e 94 71 20 	call	0x40e2	; 0x40e2 <__divmodsi4>
    190a:	da 01       	movw	r26, r20
    190c:	c9 01       	movw	r24, r18
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	af 83       	std	Y+7, r26	; 0x07
    1914:	b8 87       	std	Y+8, r27	; 0x08
		Loc_u32Counter--;
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	9a 81       	ldd	r25, Y+2	; 0x02
    191a:	ab 81       	ldd	r26, Y+3	; 0x03
    191c:	bc 81       	ldd	r27, Y+4	; 0x04
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	a1 09       	sbc	r26, r1
    1922:	b1 09       	sbc	r27, r1
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	9a 83       	std	Y+2, r25	; 0x02
    1928:	ab 83       	std	Y+3, r26	; 0x03
    192a:	bc 83       	std	Y+4, r27	; 0x04
		Loc_u32Num*=10;
		Loc_u32Counter++;
		Loc_u32Num+=(cpy_s32Data%10);
		cpy_s32Data/=10;
	}
	while(Loc_u32Num)
    192c:	8d 81       	ldd	r24, Y+5	; 0x05
    192e:	9e 81       	ldd	r25, Y+6	; 0x06
    1930:	af 81       	ldd	r26, Y+7	; 0x07
    1932:	b8 85       	ldd	r27, Y+8	; 0x08
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	a1 05       	cpc	r26, r1
    1938:	b1 05       	cpc	r27, r1
    193a:	51 f6       	brne	.-108    	; 0x18d0 <CLCD_vSendNumber+0x120>
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <CLCD_vSendNumber+0x194>
		Loc_u32Num/=10;
		Loc_u32Counter--;
	}
	while(Loc_u32Counter--)
	{
		CLCD_vSendData('0');
    193e:	80 e3       	ldi	r24, 0x30	; 48
    1940:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
	{
		CLCD_vSendData((uint8)(Loc_u32Num%10)+'0');
		Loc_u32Num/=10;
		Loc_u32Counter--;
	}
	while(Loc_u32Counter--)
    1944:	1d 86       	std	Y+13, r1	; 0x0d
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	ab 81       	ldd	r26, Y+3	; 0x03
    194c:	bc 81       	ldd	r27, Y+4	; 0x04
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	a1 05       	cpc	r26, r1
    1952:	b1 05       	cpc	r27, r1
    1954:	11 f0       	breq	.+4      	; 0x195a <CLCD_vSendNumber+0x1aa>
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	8d 87       	std	Y+13, r24	; 0x0d
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	ab 81       	ldd	r26, Y+3	; 0x03
    1960:	bc 81       	ldd	r27, Y+4	; 0x04
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	a1 09       	sbc	r26, r1
    1966:	b1 09       	sbc	r27, r1
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	9a 83       	std	Y+2, r25	; 0x02
    196c:	ab 83       	std	Y+3, r26	; 0x03
    196e:	bc 83       	std	Y+4, r27	; 0x04
    1970:	8d 85       	ldd	r24, Y+13	; 0x0d
    1972:	88 23       	and	r24, r24
    1974:	21 f7       	brne	.-56     	; 0x193e <CLCD_vSendNumber+0x18e>
	{
		CLCD_vSendData('0');
	}
}
    1976:	2d 96       	adiw	r28, 0x0d	; 13
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <CLCD_vSendPosition>:
void CLCD_vSendPosition(uint8 cpy_u8XPosition,uint8 cpy_u8YPosition)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	00 d0       	rcall	.+0      	; 0x198e <CLCD_vSendPosition+0x6>
    198e:	0f 92       	push	r0
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	8a 83       	std	Y+2, r24	; 0x02
    1996:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Loc_u8Position=0;
    1998:	19 82       	std	Y+1, r1	; 0x01
	Loc_u8Position=(0x40)*cpy_u8YPosition+cpy_u8XPosition;
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	00 24       	eor	r0, r0
    19a2:	96 95       	lsr	r25
    19a4:	87 95       	ror	r24
    19a6:	07 94       	ror	r0
    19a8:	96 95       	lsr	r25
    19aa:	87 95       	ror	r24
    19ac:	07 94       	ror	r0
    19ae:	98 2f       	mov	r25, r24
    19b0:	80 2d       	mov	r24, r0
    19b2:	98 2f       	mov	r25, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	89 0f       	add	r24, r25
    19b8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Loc_u8Position,7);
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	80 68       	ori	r24, 0x80	; 128
    19be:	89 83       	std	Y+1, r24	; 0x01
	CLCD_vSendCommand(Loc_u8Position);
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	0e 94 ed 0a 	call	0x15da	; 0x15da <CLCD_vSendCommand>
}
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <CLCD_u8SendPattern>:
uint8 CLCD_u8SendPattern(uint8 cpy_u8MemoryLocation,uint8* ptr_u8Pattern)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <CLCD_u8SendPattern+0x6>
    19d8:	00 d0       	rcall	.+0      	; 0x19da <CLCD_u8SendPattern+0x8>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <CLCD_u8SendPattern+0xa>
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	8c 83       	std	Y+4, r24	; 0x04
    19e2:	7e 83       	std	Y+6, r23	; 0x06
    19e4:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Loc_u8ErrorState=OK;
    19e6:	1b 82       	std	Y+3, r1	; 0x03
	if(ptr_u8Pattern!=NULL)
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	21 f1       	breq	.+72     	; 0x1a38 <CLCD_u8SendPattern+0x66>
	{
		uint8 Loc_u8Location=cpy_u8MemoryLocation*8;
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(Loc_u8Location,6);
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	80 64       	ori	r24, 0x40	; 64
    1a08:	8a 83       	std	Y+2, r24	; 0x02
		CLCD_vSendCommand(Loc_u8Location);
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	0e 94 ed 0a 	call	0x15da	; 0x15da <CLCD_vSendCommand>
		uint8 Loc_u8Iterator=0;
    1a10:	19 82       	std	Y+1, r1	; 0x01
    1a12:	0e c0       	rjmp	.+28     	; 0x1a30 <CLCD_u8SendPattern+0x5e>
		for(;Loc_u8Iterator<8;Loc_u8Iterator++)
		{
			CLCD_vSendData(ptr_u8Pattern[Loc_u8Iterator]);
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	fc 01       	movw	r30, r24
    1a20:	e2 0f       	add	r30, r18
    1a22:	f3 1f       	adc	r31, r19
    1a24:	80 81       	ld	r24, Z
    1a26:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
	{
		uint8 Loc_u8Location=cpy_u8MemoryLocation*8;
		SET_BIT(Loc_u8Location,6);
		CLCD_vSendCommand(Loc_u8Location);
		uint8 Loc_u8Iterator=0;
		for(;Loc_u8Iterator<8;Loc_u8Iterator++)
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	8f 5f       	subi	r24, 0xFF	; 255
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	88 30       	cpi	r24, 0x08	; 8
    1a34:	78 f3       	brcs	.-34     	; 0x1a14 <CLCD_u8SendPattern+0x42>
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <CLCD_u8SendPattern+0x6a>
			CLCD_vSendData(ptr_u8Pattern[Loc_u8Iterator]);
		}
	}
	else
	{
		Loc_u8ErrorState=NULL_PTR;
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Loc_u8ErrorState;
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a3e:	26 96       	adiw	r28, 0x06	; 6
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <CLCD_vClear>:
void CLCD_vClear()
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
	CLCD_vSendCommand(1);
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	0e 94 ed 0a 	call	0x15da	; 0x15da <CLCD_vSendCommand>
}
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <DIO_u8SetPinDirection>:
#include "DIO_prv.h"
#include "DIO_cnfg.h"
#include "DIO_reg.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction )
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	28 97       	sbiw	r28, 0x08	; 8
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	8a 83       	std	Y+2, r24	; 0x02
    1a7a:	6b 83       	std	Y+3, r22	; 0x03
    1a7c:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1a7e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	88 30       	cpi	r24, 0x08	; 8
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <DIO_u8SetPinDirection+0x24>
    1a86:	f4 c0       	rjmp	.+488    	; 0x1c70 <DIO_u8SetPinDirection+0x20c>
	{

		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    1a88:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8a:	88 23       	and	r24, r24
    1a8c:	09 f0       	breq	.+2      	; 0x1a90 <DIO_u8SetPinDirection+0x2c>
    1a8e:	77 c0       	rjmp	.+238    	; 0x1b7e <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	38 87       	std	Y+8, r19	; 0x08
    1a98:	2f 83       	std	Y+7, r18	; 0x07
    1a9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9c:	98 85       	ldd	r25, Y+8	; 0x08
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	59 f1       	breq	.+86     	; 0x1afa <DIO_u8SetPinDirection+0x96>
    1aa4:	2f 81       	ldd	r18, Y+7	; 0x07
    1aa6:	38 85       	ldd	r19, Y+8	; 0x08
    1aa8:	22 30       	cpi	r18, 0x02	; 2
    1aaa:	31 05       	cpc	r19, r1
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <DIO_u8SetPinDirection+0x54>
    1aae:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab0:	98 85       	ldd	r25, Y+8	; 0x08
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	69 f0       	breq	.+26     	; 0x1ad0 <DIO_u8SetPinDirection+0x6c>
    1ab6:	60 c0       	rjmp	.+192    	; 0x1b78 <DIO_u8SetPinDirection+0x114>
    1ab8:	2f 81       	ldd	r18, Y+7	; 0x07
    1aba:	38 85       	ldd	r19, Y+8	; 0x08
    1abc:	22 30       	cpi	r18, 0x02	; 2
    1abe:	31 05       	cpc	r19, r1
    1ac0:	89 f1       	breq	.+98     	; 0x1b24 <DIO_u8SetPinDirection+0xc0>
    1ac2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac4:	98 85       	ldd	r25, Y+8	; 0x08
    1ac6:	83 30       	cpi	r24, 0x03	; 3
    1ac8:	91 05       	cpc	r25, r1
    1aca:	09 f4       	brne	.+2      	; 0x1ace <DIO_u8SetPinDirection+0x6a>
    1acc:	40 c0       	rjmp	.+128    	; 0x1b4e <DIO_u8SetPinDirection+0xea>
    1ace:	54 c0       	rjmp	.+168    	; 0x1b78 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    1ad0:	aa e3       	ldi	r26, 0x3A	; 58
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	ea e3       	ldi	r30, 0x3A	; 58
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	48 2f       	mov	r20, r24
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	02 2e       	mov	r0, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <DIO_u8SetPinDirection+0x8a>
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	0a 94       	dec	r0
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <DIO_u8SetPinDirection+0x86>
    1af2:	80 95       	com	r24
    1af4:	84 23       	and	r24, r20
    1af6:	8c 93       	st	X, r24
    1af8:	bd c0       	rjmp	.+378    	; 0x1c74 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    1afa:	a7 e3       	ldi	r26, 0x37	; 55
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e7 e3       	ldi	r30, 0x37	; 55
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 2e       	mov	r0, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <DIO_u8SetPinDirection+0xb4>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <DIO_u8SetPinDirection+0xb0>
    1b1c:	80 95       	com	r24
    1b1e:	84 23       	and	r24, r20
    1b20:	8c 93       	st	X, r24
    1b22:	a8 c0       	rjmp	.+336    	; 0x1c74 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    1b24:	a4 e3       	ldi	r26, 0x34	; 52
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e4 e3       	ldi	r30, 0x34	; 52
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	48 2f       	mov	r20, r24
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	02 2e       	mov	r0, r18
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <DIO_u8SetPinDirection+0xde>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	0a 94       	dec	r0
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <DIO_u8SetPinDirection+0xda>
    1b46:	80 95       	com	r24
    1b48:	84 23       	and	r24, r20
    1b4a:	8c 93       	st	X, r24
    1b4c:	93 c0       	rjmp	.+294    	; 0x1c74 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    1b4e:	a1 e3       	ldi	r26, 0x31	; 49
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e1 e3       	ldi	r30, 0x31	; 49
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_u8SetPinDirection+0x108>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <DIO_u8SetPinDirection+0x104>
    1b70:	80 95       	com	r24
    1b72:	84 23       	and	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	7e c0       	rjmp	.+252    	; 0x1c74 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	7b c0       	rjmp	.+246    	; 0x1c74 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <DIO_u8SetPinDirection+0x122>
    1b84:	72 c0       	rjmp	.+228    	; 0x1c6a <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	3e 83       	std	Y+6, r19	; 0x06
    1b8e:	2d 83       	std	Y+5, r18	; 0x05
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	91 05       	cpc	r25, r1
    1b98:	49 f1       	breq	.+82     	; 0x1bec <DIO_u8SetPinDirection+0x188>
    1b9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b9c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b9e:	22 30       	cpi	r18, 0x02	; 2
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	2c f4       	brge	.+10     	; 0x1bae <DIO_u8SetPinDirection+0x14a>
    1ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	61 f0       	breq	.+24     	; 0x1bc4 <DIO_u8SetPinDirection+0x160>
    1bac:	5b c0       	rjmp	.+182    	; 0x1c64 <DIO_u8SetPinDirection+0x200>
    1bae:	2d 81       	ldd	r18, Y+5	; 0x05
    1bb0:	3e 81       	ldd	r19, Y+6	; 0x06
    1bb2:	22 30       	cpi	r18, 0x02	; 2
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	71 f1       	breq	.+92     	; 0x1c14 <DIO_u8SetPinDirection+0x1b0>
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	83 30       	cpi	r24, 0x03	; 3
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	e9 f1       	breq	.+122    	; 0x1c3c <DIO_u8SetPinDirection+0x1d8>
    1bc2:	50 c0       	rjmp	.+160    	; 0x1c64 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    1bc4:	aa e3       	ldi	r26, 0x3A	; 58
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ea e3       	ldi	r30, 0x3A	; 58
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	48 2f       	mov	r20, r24
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	02 2e       	mov	r0, r18
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <DIO_u8SetPinDirection+0x17e>
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	0a 94       	dec	r0
    1be4:	e2 f7       	brpl	.-8      	; 0x1bde <DIO_u8SetPinDirection+0x17a>
    1be6:	84 2b       	or	r24, r20
    1be8:	8c 93       	st	X, r24
    1bea:	44 c0       	rjmp	.+136    	; 0x1c74 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    1bec:	a7 e3       	ldi	r26, 0x37	; 55
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e7 e3       	ldi	r30, 0x37	; 55
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	48 2f       	mov	r20, r24
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	02 2e       	mov	r0, r18
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <DIO_u8SetPinDirection+0x1a6>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	0a 94       	dec	r0
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <DIO_u8SetPinDirection+0x1a2>
    1c0e:	84 2b       	or	r24, r20
    1c10:	8c 93       	st	X, r24
    1c12:	30 c0       	rjmp	.+96     	; 0x1c74 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    1c14:	a4 e3       	ldi	r26, 0x34	; 52
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e4 e3       	ldi	r30, 0x34	; 52
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <DIO_u8SetPinDirection+0x1ce>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <DIO_u8SetPinDirection+0x1ca>
    1c36:	84 2b       	or	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	1c c0       	rjmp	.+56     	; 0x1c74 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    1c3c:	a1 e3       	ldi	r26, 0x31	; 49
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e1 e3       	ldi	r30, 0x31	; 49
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_u8SetPinDirection+0x1f6>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_u8SetPinDirection+0x1f2>
    1c5e:	84 2b       	or	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	08 c0       	rjmp	.+16     	; 0x1c74 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	05 c0       	rjmp	.+10     	; 0x1c74 <DIO_u8SetPinDirection+0x210>
			}
		}

		else
		{
			Local_u8ErrorState = NOK;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c76:	28 96       	adiw	r28, 0x08	; 8
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <DIO_u8SetPinValue>:
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value )
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	28 97       	sbiw	r28, 0x08	; 8
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	8a 83       	std	Y+2, r24	; 0x02
    1c9e:	6b 83       	std	Y+3, r22	; 0x03
    1ca0:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1ca2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	88 30       	cpi	r24, 0x08	; 8
    1ca8:	08 f0       	brcs	.+2      	; 0x1cac <DIO_u8SetPinValue+0x24>
    1caa:	f4 c0       	rjmp	.+488    	; 0x1e94 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    1cac:	8c 81       	ldd	r24, Y+4	; 0x04
    1cae:	88 23       	and	r24, r24
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <DIO_u8SetPinValue+0x2c>
    1cb2:	77 c0       	rjmp	.+238    	; 0x1da2 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	38 87       	std	Y+8, r19	; 0x08
    1cbc:	2f 83       	std	Y+7, r18	; 0x07
    1cbe:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc0:	98 85       	ldd	r25, Y+8	; 0x08
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	59 f1       	breq	.+86     	; 0x1d1e <DIO_u8SetPinValue+0x96>
    1cc8:	2f 81       	ldd	r18, Y+7	; 0x07
    1cca:	38 85       	ldd	r19, Y+8	; 0x08
    1ccc:	22 30       	cpi	r18, 0x02	; 2
    1cce:	31 05       	cpc	r19, r1
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <DIO_u8SetPinValue+0x54>
    1cd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd4:	98 85       	ldd	r25, Y+8	; 0x08
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	69 f0       	breq	.+26     	; 0x1cf4 <DIO_u8SetPinValue+0x6c>
    1cda:	60 c0       	rjmp	.+192    	; 0x1d9c <DIO_u8SetPinValue+0x114>
    1cdc:	2f 81       	ldd	r18, Y+7	; 0x07
    1cde:	38 85       	ldd	r19, Y+8	; 0x08
    1ce0:	22 30       	cpi	r18, 0x02	; 2
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	89 f1       	breq	.+98     	; 0x1d48 <DIO_u8SetPinValue+0xc0>
    1ce6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce8:	98 85       	ldd	r25, Y+8	; 0x08
    1cea:	83 30       	cpi	r24, 0x03	; 3
    1cec:	91 05       	cpc	r25, r1
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <DIO_u8SetPinValue+0x6a>
    1cf0:	40 c0       	rjmp	.+128    	; 0x1d72 <DIO_u8SetPinValue+0xea>
    1cf2:	54 c0       	rjmp	.+168    	; 0x1d9c <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    1cf4:	ab e3       	ldi	r26, 0x3B	; 59
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	eb e3       	ldi	r30, 0x3B	; 59
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	48 2f       	mov	r20, r24
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	02 2e       	mov	r0, r18
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <DIO_u8SetPinValue+0x8a>
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	0a 94       	dec	r0
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <DIO_u8SetPinValue+0x86>
    1d16:	80 95       	com	r24
    1d18:	84 23       	and	r24, r20
    1d1a:	8c 93       	st	X, r24
    1d1c:	bd c0       	rjmp	.+378    	; 0x1e98 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    1d1e:	a8 e3       	ldi	r26, 0x38	; 56
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e8 e3       	ldi	r30, 0x38	; 56
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_u8SetPinValue+0xb4>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <DIO_u8SetPinValue+0xb0>
    1d40:	80 95       	com	r24
    1d42:	84 23       	and	r24, r20
    1d44:	8c 93       	st	X, r24
    1d46:	a8 c0       	rjmp	.+336    	; 0x1e98 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    1d48:	a5 e3       	ldi	r26, 0x35	; 53
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e5 e3       	ldi	r30, 0x35	; 53
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	48 2f       	mov	r20, r24
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 2e       	mov	r0, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <DIO_u8SetPinValue+0xde>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <DIO_u8SetPinValue+0xda>
    1d6a:	80 95       	com	r24
    1d6c:	84 23       	and	r24, r20
    1d6e:	8c 93       	st	X, r24
    1d70:	93 c0       	rjmp	.+294    	; 0x1e98 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    1d72:	a2 e3       	ldi	r26, 0x32	; 50
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e2 e3       	ldi	r30, 0x32	; 50
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_u8SetPinValue+0x108>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_u8SetPinValue+0x104>
    1d94:	80 95       	com	r24
    1d96:	84 23       	and	r24, r20
    1d98:	8c 93       	st	X, r24
    1d9a:	7e c0       	rjmp	.+252    	; 0x1e98 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	7b c0       	rjmp	.+246    	; 0x1e98 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1da2:	8c 81       	ldd	r24, Y+4	; 0x04
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	09 f0       	breq	.+2      	; 0x1daa <DIO_u8SetPinValue+0x122>
    1da8:	72 c0       	rjmp	.+228    	; 0x1e8e <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	3e 83       	std	Y+6, r19	; 0x06
    1db2:	2d 83       	std	Y+5, r18	; 0x05
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	91 05       	cpc	r25, r1
    1dbc:	49 f1       	breq	.+82     	; 0x1e10 <DIO_u8SetPinValue+0x188>
    1dbe:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc0:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc2:	22 30       	cpi	r18, 0x02	; 2
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <DIO_u8SetPinValue+0x14a>
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	61 f0       	breq	.+24     	; 0x1de8 <DIO_u8SetPinValue+0x160>
    1dd0:	5b c0       	rjmp	.+182    	; 0x1e88 <DIO_u8SetPinValue+0x200>
    1dd2:	2d 81       	ldd	r18, Y+5	; 0x05
    1dd4:	3e 81       	ldd	r19, Y+6	; 0x06
    1dd6:	22 30       	cpi	r18, 0x02	; 2
    1dd8:	31 05       	cpc	r19, r1
    1dda:	71 f1       	breq	.+92     	; 0x1e38 <DIO_u8SetPinValue+0x1b0>
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	83 30       	cpi	r24, 0x03	; 3
    1de2:	91 05       	cpc	r25, r1
    1de4:	e9 f1       	breq	.+122    	; 0x1e60 <DIO_u8SetPinValue+0x1d8>
    1de6:	50 c0       	rjmp	.+160    	; 0x1e88 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    1de8:	ab e3       	ldi	r26, 0x3B	; 59
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	eb e3       	ldi	r30, 0x3B	; 59
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	48 2f       	mov	r20, r24
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	02 2e       	mov	r0, r18
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <DIO_u8SetPinValue+0x17e>
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	0a 94       	dec	r0
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <DIO_u8SetPinValue+0x17a>
    1e0a:	84 2b       	or	r24, r20
    1e0c:	8c 93       	st	X, r24
    1e0e:	44 c0       	rjmp	.+136    	; 0x1e98 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    1e10:	a8 e3       	ldi	r26, 0x38	; 56
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e8 e3       	ldi	r30, 0x38	; 56
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	02 2e       	mov	r0, r18
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <DIO_u8SetPinValue+0x1a6>
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	0a 94       	dec	r0
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <DIO_u8SetPinValue+0x1a2>
    1e32:	84 2b       	or	r24, r20
    1e34:	8c 93       	st	X, r24
    1e36:	30 c0       	rjmp	.+96     	; 0x1e98 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    1e38:	a5 e3       	ldi	r26, 0x35	; 53
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e5 e3       	ldi	r30, 0x35	; 53
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	48 2f       	mov	r20, r24
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	02 2e       	mov	r0, r18
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <DIO_u8SetPinValue+0x1ce>
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	0a 94       	dec	r0
    1e58:	e2 f7       	brpl	.-8      	; 0x1e52 <DIO_u8SetPinValue+0x1ca>
    1e5a:	84 2b       	or	r24, r20
    1e5c:	8c 93       	st	X, r24
    1e5e:	1c c0       	rjmp	.+56     	; 0x1e98 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    1e60:	a2 e3       	ldi	r26, 0x32	; 50
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e2 e3       	ldi	r30, 0x32	; 50
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	48 2f       	mov	r20, r24
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	02 2e       	mov	r0, r18
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <DIO_u8SetPinValue+0x1f6>
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	0a 94       	dec	r0
    1e80:	e2 f7       	brpl	.-8      	; 0x1e7a <DIO_u8SetPinValue+0x1f2>
    1e82:	84 2b       	or	r24, r20
    1e84:	8c 93       	st	X, r24
    1e86:	08 c0       	rjmp	.+16     	; 0x1e98 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	05 c0       	rjmp	.+10     	; 0x1e98 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e9a:	28 96       	adiw	r28, 0x08	; 8
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <DIO_u8ReadPinValue>:
uint8 DIO_u8ReadPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* ptr_u8Value)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	27 97       	sbiw	r28, 0x07	; 7
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	8a 83       	std	Y+2, r24	; 0x02
    1ec2:	6b 83       	std	Y+3, r22	; 0x03
    1ec4:	5d 83       	std	Y+5, r21	; 0x05
    1ec6:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1ec8:	19 82       	std	Y+1, r1	; 0x01

	if(ptr_u8Value != NULL)
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <DIO_u8ReadPinValue+0x28>
    1ed2:	7b c0       	rjmp	.+246    	; 0x1fca <DIO_u8ReadPinValue+0x11e>
	{
		if(Copy_u8Pin <=DIO_u8PIN7)
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	88 30       	cpi	r24, 0x08	; 8
    1ed8:	08 f0       	brcs	.+2      	; 0x1edc <DIO_u8ReadPinValue+0x30>
    1eda:	74 c0       	rjmp	.+232    	; 0x1fc4 <DIO_u8ReadPinValue+0x118>
		{
			switch(Copy_u8Port)
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	3f 83       	std	Y+7, r19	; 0x07
    1ee4:	2e 83       	std	Y+6, r18	; 0x06
    1ee6:	4e 81       	ldd	r20, Y+6	; 0x06
    1ee8:	5f 81       	ldd	r21, Y+7	; 0x07
    1eea:	41 30       	cpi	r20, 0x01	; 1
    1eec:	51 05       	cpc	r21, r1
    1eee:	59 f1       	breq	.+86     	; 0x1f46 <DIO_u8ReadPinValue+0x9a>
    1ef0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef4:	82 30       	cpi	r24, 0x02	; 2
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	34 f4       	brge	.+12     	; 0x1f06 <DIO_u8ReadPinValue+0x5a>
    1efa:	2e 81       	ldd	r18, Y+6	; 0x06
    1efc:	3f 81       	ldd	r19, Y+7	; 0x07
    1efe:	21 15       	cp	r18, r1
    1f00:	31 05       	cpc	r19, r1
    1f02:	69 f0       	breq	.+26     	; 0x1f1e <DIO_u8ReadPinValue+0x72>
    1f04:	5c c0       	rjmp	.+184    	; 0x1fbe <DIO_u8ReadPinValue+0x112>
    1f06:	4e 81       	ldd	r20, Y+6	; 0x06
    1f08:	5f 81       	ldd	r21, Y+7	; 0x07
    1f0a:	42 30       	cpi	r20, 0x02	; 2
    1f0c:	51 05       	cpc	r21, r1
    1f0e:	79 f1       	breq	.+94     	; 0x1f6e <DIO_u8ReadPinValue+0xc2>
    1f10:	8e 81       	ldd	r24, Y+6	; 0x06
    1f12:	9f 81       	ldd	r25, Y+7	; 0x07
    1f14:	83 30       	cpi	r24, 0x03	; 3
    1f16:	91 05       	cpc	r25, r1
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <DIO_u8ReadPinValue+0x70>
    1f1a:	3d c0       	rjmp	.+122    	; 0x1f96 <DIO_u8ReadPinValue+0xea>
    1f1c:	50 c0       	rjmp	.+160    	; 0x1fbe <DIO_u8ReadPinValue+0x112>
			{
			case DIO_u8PORTA :*ptr_u8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1f1e:	e9 e3       	ldi	r30, 0x39	; 57
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	a9 01       	movw	r20, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <DIO_u8ReadPinValue+0x8a>
    1f32:	55 95       	asr	r21
    1f34:	47 95       	ror	r20
    1f36:	8a 95       	dec	r24
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <DIO_u8ReadPinValue+0x86>
    1f3a:	ca 01       	movw	r24, r20
    1f3c:	81 70       	andi	r24, 0x01	; 1
    1f3e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f40:	fd 81       	ldd	r31, Y+5	; 0x05
    1f42:	80 83       	st	Z, r24
    1f44:	44 c0       	rjmp	.+136    	; 0x1fce <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTB :*ptr_u8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1f46:	e6 e3       	ldi	r30, 0x36	; 54
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a9 01       	movw	r20, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <DIO_u8ReadPinValue+0xb2>
    1f5a:	55 95       	asr	r21
    1f5c:	47 95       	ror	r20
    1f5e:	8a 95       	dec	r24
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <DIO_u8ReadPinValue+0xae>
    1f62:	ca 01       	movw	r24, r20
    1f64:	81 70       	andi	r24, 0x01	; 1
    1f66:	ec 81       	ldd	r30, Y+4	; 0x04
    1f68:	fd 81       	ldd	r31, Y+5	; 0x05
    1f6a:	80 83       	st	Z, r24
    1f6c:	30 c0       	rjmp	.+96     	; 0x1fce <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTC :*ptr_u8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1f6e:	e3 e3       	ldi	r30, 0x33	; 51
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	88 2f       	mov	r24, r24
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a9 01       	movw	r20, r18
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <DIO_u8ReadPinValue+0xda>
    1f82:	55 95       	asr	r21
    1f84:	47 95       	ror	r20
    1f86:	8a 95       	dec	r24
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <DIO_u8ReadPinValue+0xd6>
    1f8a:	ca 01       	movw	r24, r20
    1f8c:	81 70       	andi	r24, 0x01	; 1
    1f8e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f90:	fd 81       	ldd	r31, Y+5	; 0x05
    1f92:	80 83       	st	Z, r24
    1f94:	1c c0       	rjmp	.+56     	; 0x1fce <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTD :*ptr_u8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1f96:	e0 e3       	ldi	r30, 0x30	; 48
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	88 2f       	mov	r24, r24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a9 01       	movw	r20, r18
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <DIO_u8ReadPinValue+0x102>
    1faa:	55 95       	asr	r21
    1fac:	47 95       	ror	r20
    1fae:	8a 95       	dec	r24
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <DIO_u8ReadPinValue+0xfe>
    1fb2:	ca 01       	movw	r24, r20
    1fb4:	81 70       	andi	r24, 0x01	; 1
    1fb6:	ec 81       	ldd	r30, Y+4	; 0x04
    1fb8:	fd 81       	ldd	r31, Y+5	; 0x05
    1fba:	80 83       	st	Z, r24
    1fbc:	08 c0       	rjmp	.+16     	; 0x1fce <DIO_u8ReadPinValue+0x122>
			default : Local_u8ErrorState = NOK; 		 break;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	05 c0       	rjmp	.+10     	; 0x1fce <DIO_u8ReadPinValue+0x122>
			}
		}
		else
		{
			/*Pin number is invalid*/
			Local_u8ErrorState = NOK;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <DIO_u8ReadPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR;
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd0:	27 96       	adiw	r28, 0x07	; 7
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <DIO_u8SetPortDirection>:


uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction )
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <DIO_u8SetPortDirection+0x6>
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <DIO_u8SetPortDirection+0x8>
    1fea:	0f 92       	push	r0
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	8a 83       	std	Y+2, r24	; 0x02
    1ff2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1ff4:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	3d 83       	std	Y+5, r19	; 0x05
    1ffe:	2c 83       	std	Y+4, r18	; 0x04
    2000:	8c 81       	ldd	r24, Y+4	; 0x04
    2002:	9d 81       	ldd	r25, Y+5	; 0x05
    2004:	81 30       	cpi	r24, 0x01	; 1
    2006:	91 05       	cpc	r25, r1
    2008:	d1 f0       	breq	.+52     	; 0x203e <DIO_u8SetPortDirection+0x5c>
    200a:	2c 81       	ldd	r18, Y+4	; 0x04
    200c:	3d 81       	ldd	r19, Y+5	; 0x05
    200e:	22 30       	cpi	r18, 0x02	; 2
    2010:	31 05       	cpc	r19, r1
    2012:	2c f4       	brge	.+10     	; 0x201e <DIO_u8SetPortDirection+0x3c>
    2014:	8c 81       	ldd	r24, Y+4	; 0x04
    2016:	9d 81       	ldd	r25, Y+5	; 0x05
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	61 f0       	breq	.+24     	; 0x2034 <DIO_u8SetPortDirection+0x52>
    201c:	1f c0       	rjmp	.+62     	; 0x205c <DIO_u8SetPortDirection+0x7a>
    201e:	2c 81       	ldd	r18, Y+4	; 0x04
    2020:	3d 81       	ldd	r19, Y+5	; 0x05
    2022:	22 30       	cpi	r18, 0x02	; 2
    2024:	31 05       	cpc	r19, r1
    2026:	81 f0       	breq	.+32     	; 0x2048 <DIO_u8SetPortDirection+0x66>
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	9d 81       	ldd	r25, Y+5	; 0x05
    202c:	83 30       	cpi	r24, 0x03	; 3
    202e:	91 05       	cpc	r25, r1
    2030:	81 f0       	breq	.+32     	; 0x2052 <DIO_u8SetPortDirection+0x70>
    2032:	14 c0       	rjmp	.+40     	; 0x205c <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    2034:	ea e3       	ldi	r30, 0x3A	; 58
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	80 83       	st	Z, r24
    203c:	11 c0       	rjmp	.+34     	; 0x2060 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    203e:	e7 e3       	ldi	r30, 0x37	; 55
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	80 83       	st	Z, r24
    2046:	0c c0       	rjmp	.+24     	; 0x2060 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    2048:	e4 e3       	ldi	r30, 0x34	; 52
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	80 83       	st	Z, r24
    2050:	07 c0       	rjmp	.+14     	; 0x2060 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    2052:	e1 e3       	ldi	r30, 0x31	; 49
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	80 83       	st	Z, r24
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState = NOK; 		break;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2060:	89 81       	ldd	r24, Y+1	; 0x01
}
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value )
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	00 d0       	rcall	.+0      	; 0x2078 <DIO_u8SetPortValue+0x6>
    2078:	00 d0       	rcall	.+0      	; 0x207a <DIO_u8SetPortValue+0x8>
    207a:	0f 92       	push	r0
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	8a 83       	std	Y+2, r24	; 0x02
    2082:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    2084:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	3d 83       	std	Y+5, r19	; 0x05
    208e:	2c 83       	std	Y+4, r18	; 0x04
    2090:	8c 81       	ldd	r24, Y+4	; 0x04
    2092:	9d 81       	ldd	r25, Y+5	; 0x05
    2094:	81 30       	cpi	r24, 0x01	; 1
    2096:	91 05       	cpc	r25, r1
    2098:	d1 f0       	breq	.+52     	; 0x20ce <DIO_u8SetPortValue+0x5c>
    209a:	2c 81       	ldd	r18, Y+4	; 0x04
    209c:	3d 81       	ldd	r19, Y+5	; 0x05
    209e:	22 30       	cpi	r18, 0x02	; 2
    20a0:	31 05       	cpc	r19, r1
    20a2:	2c f4       	brge	.+10     	; 0x20ae <DIO_u8SetPortValue+0x3c>
    20a4:	8c 81       	ldd	r24, Y+4	; 0x04
    20a6:	9d 81       	ldd	r25, Y+5	; 0x05
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	61 f0       	breq	.+24     	; 0x20c4 <DIO_u8SetPortValue+0x52>
    20ac:	1f c0       	rjmp	.+62     	; 0x20ec <DIO_u8SetPortValue+0x7a>
    20ae:	2c 81       	ldd	r18, Y+4	; 0x04
    20b0:	3d 81       	ldd	r19, Y+5	; 0x05
    20b2:	22 30       	cpi	r18, 0x02	; 2
    20b4:	31 05       	cpc	r19, r1
    20b6:	81 f0       	breq	.+32     	; 0x20d8 <DIO_u8SetPortValue+0x66>
    20b8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ba:	9d 81       	ldd	r25, Y+5	; 0x05
    20bc:	83 30       	cpi	r24, 0x03	; 3
    20be:	91 05       	cpc	r25, r1
    20c0:	81 f0       	breq	.+32     	; 0x20e2 <DIO_u8SetPortValue+0x70>
    20c2:	14 c0       	rjmp	.+40     	; 0x20ec <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    20c4:	eb e3       	ldi	r30, 0x3B	; 59
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	80 83       	st	Z, r24
    20cc:	11 c0       	rjmp	.+34     	; 0x20f0 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    20ce:	e8 e3       	ldi	r30, 0x38	; 56
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	80 83       	st	Z, r24
    20d6:	0c c0       	rjmp	.+24     	; 0x20f0 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    20d8:	e5 e3       	ldi	r30, 0x35	; 53
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	80 83       	st	Z, r24
    20e0:	07 c0       	rjmp	.+14     	; 0x20f0 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    20e2:	e2 e3       	ldi	r30, 0x32	; 50
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	80 83       	st	Z, r24
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState = NOK; 	 break;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <DIO_u8TogglePin>:

uint8 DIO_u8TogglePin(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	00 d0       	rcall	.+0      	; 0x2108 <DIO_u8TogglePin+0x6>
    2108:	00 d0       	rcall	.+0      	; 0x210a <DIO_u8TogglePin+0x8>
    210a:	0f 92       	push	r0
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	8a 83       	std	Y+2, r24	; 0x02
    2112:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    2114:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	88 30       	cpi	r24, 0x08	; 8
    211a:	08 f0       	brcs	.+2      	; 0x211e <DIO_u8TogglePin+0x1c>
    211c:	72 c0       	rjmp	.+228    	; 0x2202 <DIO_u8TogglePin+0x100>
	{
		switch(Copy_u8Port)
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	3d 83       	std	Y+5, r19	; 0x05
    2126:	2c 83       	std	Y+4, r18	; 0x04
    2128:	8c 81       	ldd	r24, Y+4	; 0x04
    212a:	9d 81       	ldd	r25, Y+5	; 0x05
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	91 05       	cpc	r25, r1
    2130:	49 f1       	breq	.+82     	; 0x2184 <DIO_u8TogglePin+0x82>
    2132:	2c 81       	ldd	r18, Y+4	; 0x04
    2134:	3d 81       	ldd	r19, Y+5	; 0x05
    2136:	22 30       	cpi	r18, 0x02	; 2
    2138:	31 05       	cpc	r19, r1
    213a:	2c f4       	brge	.+10     	; 0x2146 <DIO_u8TogglePin+0x44>
    213c:	8c 81       	ldd	r24, Y+4	; 0x04
    213e:	9d 81       	ldd	r25, Y+5	; 0x05
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	61 f0       	breq	.+24     	; 0x215c <DIO_u8TogglePin+0x5a>
    2144:	5b c0       	rjmp	.+182    	; 0x21fc <DIO_u8TogglePin+0xfa>
    2146:	2c 81       	ldd	r18, Y+4	; 0x04
    2148:	3d 81       	ldd	r19, Y+5	; 0x05
    214a:	22 30       	cpi	r18, 0x02	; 2
    214c:	31 05       	cpc	r19, r1
    214e:	71 f1       	breq	.+92     	; 0x21ac <DIO_u8TogglePin+0xaa>
    2150:	8c 81       	ldd	r24, Y+4	; 0x04
    2152:	9d 81       	ldd	r25, Y+5	; 0x05
    2154:	83 30       	cpi	r24, 0x03	; 3
    2156:	91 05       	cpc	r25, r1
    2158:	e9 f1       	breq	.+122    	; 0x21d4 <DIO_u8TogglePin+0xd2>
    215a:	50 c0       	rjmp	.+160    	; 0x21fc <DIO_u8TogglePin+0xfa>
		{
		case DIO_u8PORTA : TOG_BIT(PORTA,Copy_u8Pin); break;
    215c:	ab e3       	ldi	r26, 0x3B	; 59
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	eb e3       	ldi	r30, 0x3B	; 59
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	48 2f       	mov	r20, r24
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	02 2e       	mov	r0, r18
    2174:	02 c0       	rjmp	.+4      	; 0x217a <DIO_u8TogglePin+0x78>
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	0a 94       	dec	r0
    217c:	e2 f7       	brpl	.-8      	; 0x2176 <DIO_u8TogglePin+0x74>
    217e:	84 27       	eor	r24, r20
    2180:	8c 93       	st	X, r24
    2182:	41 c0       	rjmp	.+130    	; 0x2206 <DIO_u8TogglePin+0x104>
		case DIO_u8PORTB : TOG_BIT(PORTB,Copy_u8Pin); break;
    2184:	a8 e3       	ldi	r26, 0x38	; 56
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e8 e3       	ldi	r30, 0x38	; 56
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	48 2f       	mov	r20, r24
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	02 2e       	mov	r0, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <DIO_u8TogglePin+0xa0>
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	0a 94       	dec	r0
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <DIO_u8TogglePin+0x9c>
    21a6:	84 27       	eor	r24, r20
    21a8:	8c 93       	st	X, r24
    21aa:	2d c0       	rjmp	.+90     	; 0x2206 <DIO_u8TogglePin+0x104>
		case DIO_u8PORTC : TOG_BIT(PORTC,Copy_u8Pin); break;
    21ac:	a5 e3       	ldi	r26, 0x35	; 53
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e5 e3       	ldi	r30, 0x35	; 53
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	48 2f       	mov	r20, r24
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	02 2e       	mov	r0, r18
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <DIO_u8TogglePin+0xc8>
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	0a 94       	dec	r0
    21cc:	e2 f7       	brpl	.-8      	; 0x21c6 <DIO_u8TogglePin+0xc4>
    21ce:	84 27       	eor	r24, r20
    21d0:	8c 93       	st	X, r24
    21d2:	19 c0       	rjmp	.+50     	; 0x2206 <DIO_u8TogglePin+0x104>
		case DIO_u8PORTD : TOG_BIT(PORTD,Copy_u8Pin); break;
    21d4:	a2 e3       	ldi	r26, 0x32	; 50
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e2 e3       	ldi	r30, 0x32	; 50
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <DIO_u8TogglePin+0xf0>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <DIO_u8TogglePin+0xec>
    21f6:	84 27       	eor	r24, r20
    21f8:	8c 93       	st	X, r24
    21fa:	05 c0       	rjmp	.+10     	; 0x2206 <DIO_u8TogglePin+0x104>
		default : Local_u8ErrorState = NOK; 		 break;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <DIO_u8TogglePin+0x104>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    2206:	89 81       	ldd	r24, Y+1	; 0x01
}
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <EXTI_u8SetCallBack>:
#include"EXTI_cfg.h"
#include"EXTI_reg.h"
#include"EXTI_interface.h"
static void (*arr_funcptr[3])(void);
uint8 EXTI_u8SetCallBack(ChannelPin Cpy_sPin,void(*Ptr_function)(void))
{
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	00 d0       	rcall	.+0      	; 0x221e <EXTI_u8SetCallBack+0x6>
    221e:	00 d0       	rcall	.+0      	; 0x2220 <EXTI_u8SetCallBack+0x8>
    2220:	00 d0       	rcall	.+0      	; 0x2222 <EXTI_u8SetCallBack+0xa>
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	8a 83       	std	Y+2, r24	; 0x02
    2228:	7c 83       	std	Y+4, r23	; 0x04
    222a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrState=OK;
    222c:	19 82       	std	Y+1, r1	; 0x01
	if(Ptr_function!=NULL)
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	59 f1       	breq	.+86     	; 0x228c <EXTI_u8SetCallBack+0x74>
	{
		switch(Cpy_sPin)
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	3e 83       	std	Y+6, r19	; 0x06
    223e:	2d 83       	std	Y+5, r18	; 0x05
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	91 05       	cpc	r25, r1
    2248:	81 f0       	breq	.+32     	; 0x226a <EXTI_u8SetCallBack+0x52>
    224a:	2d 81       	ldd	r18, Y+5	; 0x05
    224c:	3e 81       	ldd	r19, Y+6	; 0x06
    224e:	22 30       	cpi	r18, 0x02	; 2
    2250:	31 05       	cpc	r19, r1
    2252:	91 f0       	breq	.+36     	; 0x2278 <EXTI_u8SetCallBack+0x60>
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	a9 f4       	brne	.+42     	; 0x2286 <EXTI_u8SetCallBack+0x6e>
		{
			case INT0:arr_funcptr[0]=Ptr_function; break;
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	90 93 17 02 	sts	0x0217, r25
    2264:	80 93 16 02 	sts	0x0216, r24
    2268:	13 c0       	rjmp	.+38     	; 0x2290 <EXTI_u8SetCallBack+0x78>
			case INT1:arr_funcptr[1]=Ptr_function; break;
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	90 93 19 02 	sts	0x0219, r25
    2272:	80 93 18 02 	sts	0x0218, r24
    2276:	0c c0       	rjmp	.+24     	; 0x2290 <EXTI_u8SetCallBack+0x78>
			case INT2:arr_funcptr[2]=Ptr_function; break;
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	90 93 1b 02 	sts	0x021B, r25
    2280:	80 93 1a 02 	sts	0x021A, r24
    2284:	05 c0       	rjmp	.+10     	; 0x2290 <EXTI_u8SetCallBack+0x78>
			default:Local_u8ErrState=NOK; break;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <EXTI_u8SetCallBack+0x78>
		}
	}
	else
	{
		Local_u8ErrState=NULL_PTR;
    228c:	82 e0       	ldi	r24, 0x02	; 2
    228e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
    2290:	89 81       	ldd	r24, Y+1	; 0x01
}
    2292:	26 96       	adiw	r28, 0x06	; 6
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <EXTI_vInit>:
void EXTI_vInit(void)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62

#if INT0_STATE==ENABLE
SET_BIT(GICR,GICR_INT0_ENABLE_PIN);
    22ac:	ab e5       	ldi	r26, 0x5B	; 91
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	eb e5       	ldi	r30, 0x5B	; 91
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	80 64       	ori	r24, 0x40	; 64
    22b8:	8c 93       	st	X, r24
#else
#warning WRONG CONFIGRATION FOR INT0 STATE
#endif

#if INT1_STATE==ENABLE
SET_BIT(GICR,GICR_INT1_ENABLE_PIN);
    22ba:	ab e5       	ldi	r26, 0x5B	; 91
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	eb e5       	ldi	r30, 0x5B	; 91
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	80 68       	ori	r24, 0x80	; 128
    22c6:	8c 93       	st	X, r24
#endif

#if INT2_STATE==ENABLE
SET_BIT(GICR,GICR_INT2_ENABLE_PIN);
#elif INT2_STATE==DISABLE
CLR_BIT(GICR,GICR_INT2_ENABLE_PIN);
    22c8:	ab e5       	ldi	r26, 0x5B	; 91
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	eb e5       	ldi	r30, 0x5B	; 91
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	8f 7d       	andi	r24, 0xDF	; 223
    22d4:	8c 93       	st	X, r24

#if INT0_SENSE_CTRL_TYPE==EXTI_u8RISING_EDGE
SET_BIT(MCUCR,MCUCR_ISC00_BIT);
SET_BIT(MCUCR,MCUCR_ISC01_BIT);
#elif INT0_SENSE_CTRL_TYPE==EXTI_u8FALLING_EDGE
CLR_BIT(MCUCR,MCUCR_ISC00_BIT);
    22d6:	a5 e5       	ldi	r26, 0x55	; 85
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e5 e5       	ldi	r30, 0x55	; 85
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	8e 7f       	andi	r24, 0xFE	; 254
    22e2:	8c 93       	st	X, r24
SET_BIT(MCUCR,MCUCR_ISC01_BIT);
    22e4:	a5 e5       	ldi	r26, 0x55	; 85
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e5 e5       	ldi	r30, 0x55	; 85
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	82 60       	ori	r24, 0x02	; 2
    22f0:	8c 93       	st	X, r24

#if INT1_SENSE_CTRL_TYPE==EXTI_u8RISING_EDGE
SET_BIT(MCUCR,MCUCR_ISC10_BIT);
SET_BIT(MCUCR,MCUCR_ISC11_BIT);
#elif INT1_SENSE_CTRL_TYPE==EXTI_u8FALLING_EDGE
CLR_BIT(MCUCR,MCUCR_ISC10_BIT);
    22f2:	a5 e5       	ldi	r26, 0x55	; 85
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e5 e5       	ldi	r30, 0x55	; 85
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	8b 7f       	andi	r24, 0xFB	; 251
    22fe:	8c 93       	st	X, r24
SET_BIT(MCUCR,MCUCR_ISC11_BIT);
    2300:	a5 e5       	ldi	r26, 0x55	; 85
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e5 e5       	ldi	r30, 0x55	; 85
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	88 60       	ori	r24, 0x08	; 8
    230c:	8c 93       	st	X, r24
#endif

#if INT2_SENSE_CTRL_TYPE==EXTI_u8RISING_EDGE
SET_BIT(MCUCSR,MCUCSR_ISC2_BIT);
#elif INT2_SENSE_CTRL_TYPE==EXTI_u8FALLING_EDGE
CLR_BIT(MCUCR,MCUCSR_ISC2_BIT);
    230e:	a5 e5       	ldi	r26, 0x55	; 85
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	e5 e5       	ldi	r30, 0x55	; 85
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	8f 7e       	andi	r24, 0xEF	; 239
    231a:	8c 93       	st	X, r24
#else
#warning WORNG CONFIGRATION FOR INT1
#endif
}
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <EXTI_u8EnableIntChannel>:

uint8 EXTI_u8EnableIntChannel(ChannelPin Cpy_sPin)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	00 d0       	rcall	.+0      	; 0x2328 <EXTI_u8EnableIntChannel+0x6>
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrState=OK;
    232e:	19 82       	std	Y+1, r1	; 0x01
	if(Cpy_sPin==INT0)
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	88 23       	and	r24, r24
    2334:	41 f4       	brne	.+16     	; 0x2346 <EXTI_u8EnableIntChannel+0x24>
	{
		SET_BIT(GICR,GICR_INT0_ENABLE_PIN);
    2336:	ab e5       	ldi	r26, 0x5B	; 91
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	eb e5       	ldi	r30, 0x5B	; 91
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	80 64       	ori	r24, 0x40	; 64
    2342:	8c 93       	st	X, r24
    2344:	18 c0       	rjmp	.+48     	; 0x2376 <EXTI_u8EnableIntChannel+0x54>
	}
	else if(Cpy_sPin==INT1)
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	81 30       	cpi	r24, 0x01	; 1
    234a:	41 f4       	brne	.+16     	; 0x235c <EXTI_u8EnableIntChannel+0x3a>
	{
		SET_BIT(GICR,GICR_INT1_ENABLE_PIN);
    234c:	ab e5       	ldi	r26, 0x5B	; 91
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	eb e5       	ldi	r30, 0x5B	; 91
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	80 68       	ori	r24, 0x80	; 128
    2358:	8c 93       	st	X, r24
    235a:	0d c0       	rjmp	.+26     	; 0x2376 <EXTI_u8EnableIntChannel+0x54>
	}
	else if(Cpy_sPin==INT2)
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	82 30       	cpi	r24, 0x02	; 2
    2360:	41 f4       	brne	.+16     	; 0x2372 <EXTI_u8EnableIntChannel+0x50>
	{
		SET_BIT(GICR,GICR_INT2_ENABLE_PIN);
    2362:	ab e5       	ldi	r26, 0x5B	; 91
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	eb e5       	ldi	r30, 0x5B	; 91
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	80 62       	ori	r24, 0x20	; 32
    236e:	8c 93       	st	X, r24
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <EXTI_u8EnableIntChannel+0x54>
	}
	else
	{
		Local_u8ErrState=NOK;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
    2376:	89 81       	ldd	r24, Y+1	; 0x01
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <EXTI_u8DisableIntChannel>:

uint8 EXTI_u8DisableIntChannel(ChannelPin Cpy_sPin)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <EXTI_u8DisableIntChannel+0x6>
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrState=OK;
    238e:	19 82       	std	Y+1, r1	; 0x01
	if(Cpy_sPin==INT0)
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	88 23       	and	r24, r24
    2394:	41 f4       	brne	.+16     	; 0x23a6 <EXTI_u8DisableIntChannel+0x24>
	{
		CLR_BIT(GICR,GICR_INT0_ENABLE_PIN);
    2396:	ab e5       	ldi	r26, 0x5B	; 91
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	eb e5       	ldi	r30, 0x5B	; 91
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	8f 7b       	andi	r24, 0xBF	; 191
    23a2:	8c 93       	st	X, r24
    23a4:	18 c0       	rjmp	.+48     	; 0x23d6 <EXTI_u8DisableIntChannel+0x54>
	}
	else if(Cpy_sPin==INT1)
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	81 30       	cpi	r24, 0x01	; 1
    23aa:	41 f4       	brne	.+16     	; 0x23bc <EXTI_u8DisableIntChannel+0x3a>
	{
		CLR_BIT(GICR,GICR_INT1_ENABLE_PIN);
    23ac:	ab e5       	ldi	r26, 0x5B	; 91
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	eb e5       	ldi	r30, 0x5B	; 91
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 77       	andi	r24, 0x7F	; 127
    23b8:	8c 93       	st	X, r24
    23ba:	0d c0       	rjmp	.+26     	; 0x23d6 <EXTI_u8DisableIntChannel+0x54>
	}
	else if(Cpy_sPin==INT2)
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	82 30       	cpi	r24, 0x02	; 2
    23c0:	41 f4       	brne	.+16     	; 0x23d2 <EXTI_u8DisableIntChannel+0x50>
	{
		CLR_BIT(GICR,GICR_INT2_ENABLE_PIN);
    23c2:	ab e5       	ldi	r26, 0x5B	; 91
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	eb e5       	ldi	r30, 0x5B	; 91
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	8f 7d       	andi	r24, 0xDF	; 223
    23ce:	8c 93       	st	X, r24
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <EXTI_u8DisableIntChannel+0x54>
	}
	else
	{
		Local_u8ErrState=NOK;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <EXTI_u8SetSenseCtrl>:

uint8 EXTI_u8SetSenseCtrl(ChannelPin Cpy_sPin,SenseCtrlType Cpy_sType)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	29 97       	sbiw	r28, 0x09	; 9
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	8a 83       	std	Y+2, r24	; 0x02
    23f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrState=OK;
    23fa:	19 82       	std	Y+1, r1	; 0x01
	if(Cpy_sPin==INT0)
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	88 23       	and	r24, r24
    2400:	09 f0       	breq	.+2      	; 0x2404 <EXTI_u8SetSenseCtrl+0x22>
    2402:	5f c0       	rjmp	.+190    	; 0x24c2 <EXTI_u8SetSenseCtrl+0xe0>
	{
		switch(Cpy_sType)
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	39 87       	std	Y+9, r19	; 0x09
    240c:	28 87       	std	Y+8, r18	; 0x08
    240e:	88 85       	ldd	r24, Y+8	; 0x08
    2410:	99 85       	ldd	r25, Y+9	; 0x09
    2412:	81 30       	cpi	r24, 0x01	; 1
    2414:	91 05       	cpc	r25, r1
    2416:	09 f4       	brne	.+2      	; 0x241a <EXTI_u8SetSenseCtrl+0x38>
    2418:	42 c0       	rjmp	.+132    	; 0x249e <EXTI_u8SetSenseCtrl+0xbc>
    241a:	28 85       	ldd	r18, Y+8	; 0x08
    241c:	39 85       	ldd	r19, Y+9	; 0x09
    241e:	22 30       	cpi	r18, 0x02	; 2
    2420:	31 05       	cpc	r19, r1
    2422:	2c f4       	brge	.+10     	; 0x242e <EXTI_u8SetSenseCtrl+0x4c>
    2424:	88 85       	ldd	r24, Y+8	; 0x08
    2426:	99 85       	ldd	r25, Y+9	; 0x09
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	51 f1       	breq	.+84     	; 0x2480 <EXTI_u8SetSenseCtrl+0x9e>
    242c:	47 c0       	rjmp	.+142    	; 0x24bc <EXTI_u8SetSenseCtrl+0xda>
    242e:	28 85       	ldd	r18, Y+8	; 0x08
    2430:	39 85       	ldd	r19, Y+9	; 0x09
    2432:	22 30       	cpi	r18, 0x02	; 2
    2434:	31 05       	cpc	r19, r1
    2436:	31 f0       	breq	.+12     	; 0x2444 <EXTI_u8SetSenseCtrl+0x62>
    2438:	88 85       	ldd	r24, Y+8	; 0x08
    243a:	99 85       	ldd	r25, Y+9	; 0x09
    243c:	83 30       	cpi	r24, 0x03	; 3
    243e:	91 05       	cpc	r25, r1
    2440:	81 f0       	breq	.+32     	; 0x2462 <EXTI_u8SetSenseCtrl+0x80>
    2442:	3c c0       	rjmp	.+120    	; 0x24bc <EXTI_u8SetSenseCtrl+0xda>
		{
			case FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC00_BIT); SET_BIT(MCUCR,MCUCR_ISC01_BIT); break;
    2444:	a5 e5       	ldi	r26, 0x55	; 85
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e5 e5       	ldi	r30, 0x55	; 85
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	8e 7f       	andi	r24, 0xFE	; 254
    2450:	8c 93       	st	X, r24
    2452:	a5 e5       	ldi	r26, 0x55	; 85
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e5 e5       	ldi	r30, 0x55	; 85
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	82 60       	ori	r24, 0x02	; 2
    245e:	8c 93       	st	X, r24
    2460:	bb c0       	rjmp	.+374    	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
			case RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC00_BIT); SET_BIT(MCUCR,MCUCR_ISC01_BIT); break;
    2462:	a5 e5       	ldi	r26, 0x55	; 85
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e5 e5       	ldi	r30, 0x55	; 85
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	81 60       	ori	r24, 0x01	; 1
    246e:	8c 93       	st	X, r24
    2470:	a5 e5       	ldi	r26, 0x55	; 85
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e5 e5       	ldi	r30, 0x55	; 85
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	82 60       	ori	r24, 0x02	; 2
    247c:	8c 93       	st	X, r24
    247e:	ac c0       	rjmp	.+344    	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
			case LOW_LEVEL:CLR_BIT(MCUCR,MCUCR_ISC00_BIT); CLR_BIT(MCUCR,MCUCR_ISC01_BIT); break;
    2480:	a5 e5       	ldi	r26, 0x55	; 85
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	e5 e5       	ldi	r30, 0x55	; 85
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	8e 7f       	andi	r24, 0xFE	; 254
    248c:	8c 93       	st	X, r24
    248e:	a5 e5       	ldi	r26, 0x55	; 85
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e5 e5       	ldi	r30, 0x55	; 85
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	8d 7f       	andi	r24, 0xFD	; 253
    249a:	8c 93       	st	X, r24
    249c:	9d c0       	rjmp	.+314    	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
			case ON_CHANGE:SET_BIT(MCUCR,MCUCR_ISC00_BIT); CLR_BIT(MCUCR,MCUCR_ISC01_BIT); break;
    249e:	a5 e5       	ldi	r26, 0x55	; 85
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e5 e5       	ldi	r30, 0x55	; 85
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	81 60       	ori	r24, 0x01	; 1
    24aa:	8c 93       	st	X, r24
    24ac:	a5 e5       	ldi	r26, 0x55	; 85
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e5 e5       	ldi	r30, 0x55	; 85
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	8d 7f       	andi	r24, 0xFD	; 253
    24b8:	8c 93       	st	X, r24
    24ba:	8e c0       	rjmp	.+284    	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
			default:Local_u8ErrState=NOK; break;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	8b c0       	rjmp	.+278    	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
		}
	}
	else if(Cpy_sPin==INT1)
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	81 30       	cpi	r24, 0x01	; 1
    24c6:	09 f0       	breq	.+2      	; 0x24ca <EXTI_u8SetSenseCtrl+0xe8>
    24c8:	5f c0       	rjmp	.+190    	; 0x2588 <EXTI_u8SetSenseCtrl+0x1a6>
	{
		switch(Cpy_sType)
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	3f 83       	std	Y+7, r19	; 0x07
    24d2:	2e 83       	std	Y+6, r18	; 0x06
    24d4:	8e 81       	ldd	r24, Y+6	; 0x06
    24d6:	9f 81       	ldd	r25, Y+7	; 0x07
    24d8:	81 30       	cpi	r24, 0x01	; 1
    24da:	91 05       	cpc	r25, r1
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <EXTI_u8SetSenseCtrl+0xfe>
    24de:	42 c0       	rjmp	.+132    	; 0x2564 <EXTI_u8SetSenseCtrl+0x182>
    24e0:	2e 81       	ldd	r18, Y+6	; 0x06
    24e2:	3f 81       	ldd	r19, Y+7	; 0x07
    24e4:	22 30       	cpi	r18, 0x02	; 2
    24e6:	31 05       	cpc	r19, r1
    24e8:	2c f4       	brge	.+10     	; 0x24f4 <EXTI_u8SetSenseCtrl+0x112>
    24ea:	8e 81       	ldd	r24, Y+6	; 0x06
    24ec:	9f 81       	ldd	r25, Y+7	; 0x07
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	51 f1       	breq	.+84     	; 0x2546 <EXTI_u8SetSenseCtrl+0x164>
    24f2:	47 c0       	rjmp	.+142    	; 0x2582 <EXTI_u8SetSenseCtrl+0x1a0>
    24f4:	2e 81       	ldd	r18, Y+6	; 0x06
    24f6:	3f 81       	ldd	r19, Y+7	; 0x07
    24f8:	22 30       	cpi	r18, 0x02	; 2
    24fa:	31 05       	cpc	r19, r1
    24fc:	31 f0       	breq	.+12     	; 0x250a <EXTI_u8SetSenseCtrl+0x128>
    24fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2500:	9f 81       	ldd	r25, Y+7	; 0x07
    2502:	83 30       	cpi	r24, 0x03	; 3
    2504:	91 05       	cpc	r25, r1
    2506:	81 f0       	breq	.+32     	; 0x2528 <EXTI_u8SetSenseCtrl+0x146>
    2508:	3c c0       	rjmp	.+120    	; 0x2582 <EXTI_u8SetSenseCtrl+0x1a0>
		{
			case FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC10_BIT); SET_BIT(MCUCR,MCUCR_ISC11_BIT); break;
    250a:	a5 e5       	ldi	r26, 0x55	; 85
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e5 e5       	ldi	r30, 0x55	; 85
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	8b 7f       	andi	r24, 0xFB	; 251
    2516:	8c 93       	st	X, r24
    2518:	a5 e5       	ldi	r26, 0x55	; 85
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e5 e5       	ldi	r30, 0x55	; 85
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	88 60       	ori	r24, 0x08	; 8
    2524:	8c 93       	st	X, r24
    2526:	58 c0       	rjmp	.+176    	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
			case RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC10_BIT); SET_BIT(MCUCR,MCUCR_ISC11_BIT); break;
    2528:	a5 e5       	ldi	r26, 0x55	; 85
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	e5 e5       	ldi	r30, 0x55	; 85
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	84 60       	ori	r24, 0x04	; 4
    2534:	8c 93       	st	X, r24
    2536:	a5 e5       	ldi	r26, 0x55	; 85
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e5 e5       	ldi	r30, 0x55	; 85
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	88 60       	ori	r24, 0x08	; 8
    2542:	8c 93       	st	X, r24
    2544:	49 c0       	rjmp	.+146    	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
			case LOW_LEVEL:CLR_BIT(MCUCR,MCUCR_ISC10_BIT); CLR_BIT(MCUCR,MCUCR_ISC11_BIT); break;
    2546:	a5 e5       	ldi	r26, 0x55	; 85
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e5 e5       	ldi	r30, 0x55	; 85
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	8b 7f       	andi	r24, 0xFB	; 251
    2552:	8c 93       	st	X, r24
    2554:	a5 e5       	ldi	r26, 0x55	; 85
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	e5 e5       	ldi	r30, 0x55	; 85
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	87 7f       	andi	r24, 0xF7	; 247
    2560:	8c 93       	st	X, r24
    2562:	3a c0       	rjmp	.+116    	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
			case ON_CHANGE:SET_BIT(MCUCR,MCUCR_ISC10_BIT); CLR_BIT(MCUCR,MCUCR_ISC11_BIT); break;
    2564:	a5 e5       	ldi	r26, 0x55	; 85
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	e5 e5       	ldi	r30, 0x55	; 85
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	84 60       	ori	r24, 0x04	; 4
    2570:	8c 93       	st	X, r24
    2572:	a5 e5       	ldi	r26, 0x55	; 85
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	e5 e5       	ldi	r30, 0x55	; 85
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	87 7f       	andi	r24, 0xF7	; 247
    257e:	8c 93       	st	X, r24
    2580:	2b c0       	rjmp	.+86     	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
			default:Local_u8ErrState=NOK; break;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	28 c0       	rjmp	.+80     	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
		}
	}
	else if(Cpy_sPin==INT2)
    2588:	8a 81       	ldd	r24, Y+2	; 0x02
    258a:	82 30       	cpi	r24, 0x02	; 2
    258c:	19 f5       	brne	.+70     	; 0x25d4 <EXTI_u8SetSenseCtrl+0x1f2>
	{
		switch(Cpy_sType)
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	3d 83       	std	Y+5, r19	; 0x05
    2596:	2c 83       	std	Y+4, r18	; 0x04
    2598:	8c 81       	ldd	r24, Y+4	; 0x04
    259a:	9d 81       	ldd	r25, Y+5	; 0x05
    259c:	82 30       	cpi	r24, 0x02	; 2
    259e:	91 05       	cpc	r25, r1
    25a0:	31 f0       	breq	.+12     	; 0x25ae <EXTI_u8SetSenseCtrl+0x1cc>
    25a2:	2c 81       	ldd	r18, Y+4	; 0x04
    25a4:	3d 81       	ldd	r19, Y+5	; 0x05
    25a6:	23 30       	cpi	r18, 0x03	; 3
    25a8:	31 05       	cpc	r19, r1
    25aa:	49 f0       	breq	.+18     	; 0x25be <EXTI_u8SetSenseCtrl+0x1dc>
    25ac:	10 c0       	rjmp	.+32     	; 0x25ce <EXTI_u8SetSenseCtrl+0x1ec>
		{
			case FALLING_EDGE:CLR_BIT(MCUCR,MCUCSR_ISC2_BIT); break;
    25ae:	a5 e5       	ldi	r26, 0x55	; 85
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e5 e5       	ldi	r30, 0x55	; 85
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	8f 7e       	andi	r24, 0xEF	; 239
    25ba:	8c 93       	st	X, r24
    25bc:	0d c0       	rjmp	.+26     	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
			case RISING_EDGE:SET_BIT(MCUCSR,MCUCSR_ISC2_BIT); break;
    25be:	a4 e5       	ldi	r26, 0x54	; 84
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e4 e5       	ldi	r30, 0x54	; 84
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	80 61       	ori	r24, 0x10	; 16
    25ca:	8c 93       	st	X, r24
    25cc:	05 c0       	rjmp	.+10     	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
			default:Local_u8ErrState=NOK; break;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <EXTI_u8SetSenseCtrl+0x1f6>
		}
	}
	else
	{
		Local_u8ErrState=NOK;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrState;
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    25da:	29 96       	adiw	r28, 0x09	; 9
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <__vector_2>:
__attribute__((signal)) void __vector_2(void);
void __vector_2(void)
{
    25ec:	1f 92       	push	r1
    25ee:	0f 92       	push	r0
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	0f 92       	push	r0
    25f4:	11 24       	eor	r1, r1
    25f6:	2f 93       	push	r18
    25f8:	3f 93       	push	r19
    25fa:	4f 93       	push	r20
    25fc:	5f 93       	push	r21
    25fe:	6f 93       	push	r22
    2600:	7f 93       	push	r23
    2602:	8f 93       	push	r24
    2604:	9f 93       	push	r25
    2606:	af 93       	push	r26
    2608:	bf 93       	push	r27
    260a:	ef 93       	push	r30
    260c:	ff 93       	push	r31
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	if(arr_funcptr[1]!=NULL)
    2616:	80 91 18 02 	lds	r24, 0x0218
    261a:	90 91 19 02 	lds	r25, 0x0219
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	29 f0       	breq	.+10     	; 0x262c <__vector_2+0x40>
	{
		arr_funcptr[1]();
    2622:	e0 91 18 02 	lds	r30, 0x0218
    2626:	f0 91 19 02 	lds	r31, 0x0219
    262a:	09 95       	icall
		return;
	}
}
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	ff 91       	pop	r31
    2632:	ef 91       	pop	r30
    2634:	bf 91       	pop	r27
    2636:	af 91       	pop	r26
    2638:	9f 91       	pop	r25
    263a:	8f 91       	pop	r24
    263c:	7f 91       	pop	r23
    263e:	6f 91       	pop	r22
    2640:	5f 91       	pop	r21
    2642:	4f 91       	pop	r20
    2644:	3f 91       	pop	r19
    2646:	2f 91       	pop	r18
    2648:	0f 90       	pop	r0
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	0f 90       	pop	r0
    264e:	1f 90       	pop	r1
    2650:	18 95       	reti

00002652 <__vector_1>:
__attribute__((signal)) void __vector_1(void);
void __vector_1(void)
{
    2652:	1f 92       	push	r1
    2654:	0f 92       	push	r0
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	0f 92       	push	r0
    265a:	11 24       	eor	r1, r1
    265c:	2f 93       	push	r18
    265e:	3f 93       	push	r19
    2660:	4f 93       	push	r20
    2662:	5f 93       	push	r21
    2664:	6f 93       	push	r22
    2666:	7f 93       	push	r23
    2668:	8f 93       	push	r24
    266a:	9f 93       	push	r25
    266c:	af 93       	push	r26
    266e:	bf 93       	push	r27
    2670:	ef 93       	push	r30
    2672:	ff 93       	push	r31
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
	if(arr_funcptr[0]!=NULL)
    267c:	80 91 16 02 	lds	r24, 0x0216
    2680:	90 91 17 02 	lds	r25, 0x0217
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	29 f0       	breq	.+10     	; 0x2692 <__vector_1+0x40>
	{
		arr_funcptr[0]();
    2688:	e0 91 16 02 	lds	r30, 0x0216
    268c:	f0 91 17 02 	lds	r31, 0x0217
    2690:	09 95       	icall
		return;
	}
}
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	ff 91       	pop	r31
    2698:	ef 91       	pop	r30
    269a:	bf 91       	pop	r27
    269c:	af 91       	pop	r26
    269e:	9f 91       	pop	r25
    26a0:	8f 91       	pop	r24
    26a2:	7f 91       	pop	r23
    26a4:	6f 91       	pop	r22
    26a6:	5f 91       	pop	r21
    26a8:	4f 91       	pop	r20
    26aa:	3f 91       	pop	r19
    26ac:	2f 91       	pop	r18
    26ae:	0f 90       	pop	r0
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	0f 90       	pop	r0
    26b4:	1f 90       	pop	r1
    26b6:	18 95       	reti

000026b8 <GIE_vEnableGlobalInterrupt>:

void GIE_vEnableGlobalInterrupt()
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
	__asm volatile("SEI");
    26c0:	78 94       	sei
}
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <GIE_vDisableGlobalInterrupt>:


void GIE_vDisableGlobalInterrupt()
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
	__asm volatile("CLI");
    26d0:	f8 94       	cli
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <KPD_u8GetPressedButton>:
#include"KPD_interface.h"
#include"KPD_cfg.h"
#include"KPD_prv.h"

uint8 KPD_u8GetPressedButton()
{
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	a1 97       	sbiw	r28, 0x21	; 33
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_au8RowsPins[u8ROWNUM]={KPD_u8ROW1,KPD_u8ROW2,KPD_u8ROW3,KPD_u8ROW4};
    26ec:	84 e0       	ldi	r24, 0x04	; 4
    26ee:	8b 83       	std	Y+3, r24	; 0x03
    26f0:	85 e0       	ldi	r24, 0x05	; 5
    26f2:	8c 83       	std	Y+4, r24	; 0x04
    26f4:	86 e0       	ldi	r24, 0x06	; 6
    26f6:	8d 83       	std	Y+5, r24	; 0x05
    26f8:	87 e0       	ldi	r24, 0x07	; 7
    26fa:	8e 83       	std	Y+6, r24	; 0x06
	uint8 Local_au8CouloumsPins[u8COLNUM]={KPD_u8COLOUM1,KPD_u8COLOUM2,KPD_u8COLOUM3,KPD_u8COLOUM4};
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	8f 83       	std	Y+7, r24	; 0x07
    2700:	83 e0       	ldi	r24, 0x03	; 3
    2702:	88 87       	std	Y+8, r24	; 0x08
    2704:	84 e0       	ldi	r24, 0x04	; 4
    2706:	89 87       	std	Y+9, r24	; 0x09
    2708:	85 e0       	ldi	r24, 0x05	; 5
    270a:	8a 87       	std	Y+10, r24	; 0x0a
	uint8 Local_u8RowIterator=0;
    270c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8CouloumIterator=0;
    270e:	19 82       	std	Y+1, r1	; 0x01
	uint8 Local_u8PressedButton=DIO_u8PIN_HIGH;
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 Local_au8KeyValue[u8COLNUM][u8ROWNUM]=KPD_au8BUTTONSVALUE;
    2714:	ce 01       	movw	r24, r28
    2716:	0c 96       	adiw	r24, 0x0c	; 12
    2718:	9e 8f       	std	Y+30, r25	; 0x1e
    271a:	8d 8f       	std	Y+29, r24	; 0x1d
    271c:	e6 e0       	ldi	r30, 0x06	; 6
    271e:	f2 e0       	ldi	r31, 0x02	; 2
    2720:	f8 a3       	std	Y+32, r31	; 0x20
    2722:	ef 8f       	std	Y+31, r30	; 0x1f
    2724:	f0 e1       	ldi	r31, 0x10	; 16
    2726:	f9 a3       	std	Y+33, r31	; 0x21
    2728:	ef 8d       	ldd	r30, Y+31	; 0x1f
    272a:	f8 a1       	ldd	r31, Y+32	; 0x20
    272c:	00 80       	ld	r0, Z
    272e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2730:	98 a1       	ldd	r25, Y+32	; 0x20
    2732:	01 96       	adiw	r24, 0x01	; 1
    2734:	98 a3       	std	Y+32, r25	; 0x20
    2736:	8f 8f       	std	Y+31, r24	; 0x1f
    2738:	ed 8d       	ldd	r30, Y+29	; 0x1d
    273a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    273c:	00 82       	st	Z, r0
    273e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2740:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2742:	01 96       	adiw	r24, 0x01	; 1
    2744:	9e 8f       	std	Y+30, r25	; 0x1e
    2746:	8d 8f       	std	Y+29, r24	; 0x1d
    2748:	99 a1       	ldd	r25, Y+33	; 0x21
    274a:	91 50       	subi	r25, 0x01	; 1
    274c:	99 a3       	std	Y+33, r25	; 0x21
    274e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2750:	ee 23       	and	r30, r30
    2752:	51 f7       	brne	.-44     	; 0x2728 <KPD_u8GetPressedButton+0x50>
	for(Local_u8CouloumIterator=0;Local_u8CouloumIterator<u8COLNUM;Local_u8CouloumIterator++)
    2754:	19 82       	std	Y+1, r1	; 0x01
    2756:	74 c0       	rjmp	.+232    	; 0x2840 <KPD_u8GetPressedButton+0x168>
	{
		DIO_u8SetPinValue(KPD_u8COLOUM_PORT, Local_au8CouloumsPins[Local_u8CouloumIterator], DIO_u8PIN_LOW);
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	ce 01       	movw	r24, r28
    2760:	07 96       	adiw	r24, 0x07	; 7
    2762:	fc 01       	movw	r30, r24
    2764:	e2 0f       	add	r30, r18
    2766:	f3 1f       	adc	r31, r19
    2768:	90 81       	ld	r25, Z
    276a:	83 e0       	ldi	r24, 0x03	; 3
    276c:	69 2f       	mov	r22, r25
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DIO_u8SetPinValue>
		for(Local_u8RowIterator=0;Local_u8RowIterator<u8COLNUM;Local_u8RowIterator++)
    2774:	1a 82       	std	Y+2, r1	; 0x02
    2776:	4f c0       	rjmp	.+158    	; 0x2816 <KPD_u8GetPressedButton+0x13e>
		{
			DIO_u8ReadPinValue(KPD_u8ROW_PORT, Local_au8RowsPins[Local_u8RowIterator], &Local_u8PressedButton);
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	ce 01       	movw	r24, r28
    2780:	03 96       	adiw	r24, 0x03	; 3
    2782:	fc 01       	movw	r30, r24
    2784:	e2 0f       	add	r30, r18
    2786:	f3 1f       	adc	r31, r19
    2788:	90 81       	ld	r25, Z
    278a:	9e 01       	movw	r18, r28
    278c:	25 5f       	subi	r18, 0xF5	; 245
    278e:	3f 4f       	sbci	r19, 0xFF	; 255
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	69 2f       	mov	r22, r25
    2794:	a9 01       	movw	r20, r18
    2796:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_u8ReadPinValue>
			if(Local_u8PressedButton==DIO_u8PIN_LOW)
    279a:	8b 85       	ldd	r24, Y+11	; 0x0b
    279c:	88 23       	and	r24, r24
    279e:	c1 f5       	brne	.+112    	; 0x2810 <KPD_u8GetPressedButton+0x138>
    27a0:	11 c0       	rjmp	.+34     	; 0x27c4 <KPD_u8GetPressedButton+0xec>
			{
				while(Local_u8PressedButton==DIO_u8PIN_LOW)
				{
					DIO_u8ReadPinValue(KPD_u8ROW_PORT, Local_au8RowsPins[Local_u8RowIterator], &Local_u8PressedButton);
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	28 2f       	mov	r18, r24
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	ce 01       	movw	r24, r28
    27aa:	03 96       	adiw	r24, 0x03	; 3
    27ac:	fc 01       	movw	r30, r24
    27ae:	e2 0f       	add	r30, r18
    27b0:	f3 1f       	adc	r31, r19
    27b2:	90 81       	ld	r25, Z
    27b4:	9e 01       	movw	r18, r28
    27b6:	25 5f       	subi	r18, 0xF5	; 245
    27b8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	69 2f       	mov	r22, r25
    27be:	a9 01       	movw	r20, r18
    27c0:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_u8ReadPinValue>
		for(Local_u8RowIterator=0;Local_u8RowIterator<u8COLNUM;Local_u8RowIterator++)
		{
			DIO_u8ReadPinValue(KPD_u8ROW_PORT, Local_au8RowsPins[Local_u8RowIterator], &Local_u8PressedButton);
			if(Local_u8PressedButton==DIO_u8PIN_LOW)
			{
				while(Local_u8PressedButton==DIO_u8PIN_LOW)
    27c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    27c6:	88 23       	and	r24, r24
    27c8:	61 f3       	breq	.-40     	; 0x27a2 <KPD_u8GetPressedButton+0xca>
				{
					DIO_u8ReadPinValue(KPD_u8ROW_PORT, Local_au8RowsPins[Local_u8RowIterator], &Local_u8PressedButton);
				}
				DIO_u8SetPinValue(KPD_u8COLOUM_PORT, Local_au8CouloumsPins[Local_u8CouloumIterator], DIO_u8PIN_HIGH);
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	ce 01       	movw	r24, r28
    27d2:	07 96       	adiw	r24, 0x07	; 7
    27d4:	fc 01       	movw	r30, r24
    27d6:	e2 0f       	add	r30, r18
    27d8:	f3 1f       	adc	r31, r19
    27da:	90 81       	ld	r25, Z
    27dc:	83 e0       	ldi	r24, 0x03	; 3
    27de:	69 2f       	mov	r22, r25
    27e0:	41 e0       	ldi	r20, 0x01	; 1
    27e2:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DIO_u8SetPinValue>
				return Local_au8KeyValue[Local_u8RowIterator][Local_u8CouloumIterator];
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	48 2f       	mov	r20, r24
    27f0:	50 e0       	ldi	r21, 0x00	; 0
    27f2:	22 0f       	add	r18, r18
    27f4:	33 1f       	adc	r19, r19
    27f6:	22 0f       	add	r18, r18
    27f8:	33 1f       	adc	r19, r19
    27fa:	ce 01       	movw	r24, r28
    27fc:	01 96       	adiw	r24, 0x01	; 1
    27fe:	82 0f       	add	r24, r18
    2800:	93 1f       	adc	r25, r19
    2802:	84 0f       	add	r24, r20
    2804:	95 1f       	adc	r25, r21
    2806:	fc 01       	movw	r30, r24
    2808:	3b 96       	adiw	r30, 0x0b	; 11
    280a:	80 81       	ld	r24, Z
    280c:	8c 8f       	std	Y+28, r24	; 0x1c
    280e:	1e c0       	rjmp	.+60     	; 0x284c <KPD_u8GetPressedButton+0x174>
	uint8 Local_u8PressedButton=DIO_u8PIN_HIGH;
	uint8 Local_au8KeyValue[u8COLNUM][u8ROWNUM]=KPD_au8BUTTONSVALUE;
	for(Local_u8CouloumIterator=0;Local_u8CouloumIterator<u8COLNUM;Local_u8CouloumIterator++)
	{
		DIO_u8SetPinValue(KPD_u8COLOUM_PORT, Local_au8CouloumsPins[Local_u8CouloumIterator], DIO_u8PIN_LOW);
		for(Local_u8RowIterator=0;Local_u8RowIterator<u8COLNUM;Local_u8RowIterator++)
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	8f 5f       	subi	r24, 0xFF	; 255
    2814:	8a 83       	std	Y+2, r24	; 0x02
    2816:	8a 81       	ldd	r24, Y+2	; 0x02
    2818:	84 30       	cpi	r24, 0x04	; 4
    281a:	08 f4       	brcc	.+2      	; 0x281e <KPD_u8GetPressedButton+0x146>
    281c:	ad cf       	rjmp	.-166    	; 0x2778 <KPD_u8GetPressedButton+0xa0>
				}
				DIO_u8SetPinValue(KPD_u8COLOUM_PORT, Local_au8CouloumsPins[Local_u8CouloumIterator], DIO_u8PIN_HIGH);
				return Local_au8KeyValue[Local_u8RowIterator][Local_u8CouloumIterator];
			}
		}
		DIO_u8SetPinValue(KPD_u8COLOUM_PORT, Local_au8CouloumsPins[Local_u8CouloumIterator], DIO_u8PIN_HIGH);
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	ce 01       	movw	r24, r28
    2826:	07 96       	adiw	r24, 0x07	; 7
    2828:	fc 01       	movw	r30, r24
    282a:	e2 0f       	add	r30, r18
    282c:	f3 1f       	adc	r31, r19
    282e:	90 81       	ld	r25, Z
    2830:	83 e0       	ldi	r24, 0x03	; 3
    2832:	69 2f       	mov	r22, r25
    2834:	41 e0       	ldi	r20, 0x01	; 1
    2836:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DIO_u8SetPinValue>
	uint8 Local_au8CouloumsPins[u8COLNUM]={KPD_u8COLOUM1,KPD_u8COLOUM2,KPD_u8COLOUM3,KPD_u8COLOUM4};
	uint8 Local_u8RowIterator=0;
	uint8 Local_u8CouloumIterator=0;
	uint8 Local_u8PressedButton=DIO_u8PIN_HIGH;
	uint8 Local_au8KeyValue[u8COLNUM][u8ROWNUM]=KPD_au8BUTTONSVALUE;
	for(Local_u8CouloumIterator=0;Local_u8CouloumIterator<u8COLNUM;Local_u8CouloumIterator++)
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	8f 5f       	subi	r24, 0xFF	; 255
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	84 30       	cpi	r24, 0x04	; 4
    2844:	08 f4       	brcc	.+2      	; 0x2848 <KPD_u8GetPressedButton+0x170>
    2846:	88 cf       	rjmp	.-240    	; 0x2758 <KPD_u8GetPressedButton+0x80>
				return Local_au8KeyValue[Local_u8RowIterator][Local_u8CouloumIterator];
			}
		}
		DIO_u8SetPinValue(KPD_u8COLOUM_PORT, Local_au8CouloumsPins[Local_u8CouloumIterator], DIO_u8PIN_HIGH);
	}
	return KPD_u8UNPRESSEDBUTTON;
    2848:	9f ef       	ldi	r25, 0xFF	; 255
    284a:	9c 8f       	std	Y+28, r25	; 0x1c
    284c:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    284e:	a1 96       	adiw	r28, 0x21	; 33
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <PORT_vInitDirection>:
#include"PORT_prv.h"
#include"PORT_cfg.h"
#include"PORT_interface.h"
#include"PORT_reg.h"
void PORT_vInitDirection(void)
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    2868:	ea e3       	ldi	r30, 0x3A	; 58
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	8e e7       	ldi	r24, 0x7E	; 126
    286e:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    2870:	e7 e3       	ldi	r30, 0x37	; 55
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
    2876:	e4 e3       	ldi	r30, 0x34	; 52
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
    287c:	e1 e3       	ldi	r30, 0x31	; 49
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	8c e3       	ldi	r24, 0x3C	; 60
    2882:	80 83       	st	Z, r24
	PORTA=PORTA_INIT;
    2884:	eb e3       	ldi	r30, 0x3B	; 59
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	10 82       	st	Z, r1
	PORTB=PORTB_INIT;
    288a:	e8 e3       	ldi	r30, 0x38	; 56
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	84 ef       	ldi	r24, 0xF4	; 244
    2890:	80 83       	st	Z, r24
	PORTC=PORTC_INIT;
    2892:	e5 e3       	ldi	r30, 0x35	; 53
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	8f e0       	ldi	r24, 0x0F	; 15
    2898:	80 83       	st	Z, r24
	PORTD=PORTD_INIT;
    289a:	e2 e3       	ldi	r30, 0x32	; 50
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	8c e3       	ldi	r24, 0x3C	; 60
    28a0:	80 83       	st	Z, r24
}
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <ISR>:
#include"util/delay.h"

uint8 Glob_u8MathErr=0,Glob_u8Reset=0;

void ISR(void)
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
	Glob_u8Reset=1;
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	80 93 1d 02 	sts	0x021D, r24
}
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <POW>:

uint32 POW(uint32 base,uint32 exp)
{
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	2d 97       	sbiw	r28, 0x0d	; 13
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	de bf       	out	0x3e, r29	; 62
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	cd bf       	out	0x3d, r28	; 61
    28d0:	6e 83       	std	Y+6, r22	; 0x06
    28d2:	7f 83       	std	Y+7, r23	; 0x07
    28d4:	88 87       	std	Y+8, r24	; 0x08
    28d6:	99 87       	std	Y+9, r25	; 0x09
    28d8:	2a 87       	std	Y+10, r18	; 0x0a
    28da:	3b 87       	std	Y+11, r19	; 0x0b
    28dc:	4c 87       	std	Y+12, r20	; 0x0c
    28de:	5d 87       	std	Y+13, r21	; 0x0d
	uint32 Local_u32Num=1;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 e0       	ldi	r26, 0x00	; 0
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	8a 83       	std	Y+2, r24	; 0x02
    28ea:	9b 83       	std	Y+3, r25	; 0x03
    28ec:	ac 83       	std	Y+4, r26	; 0x04
    28ee:	bd 83       	std	Y+5, r27	; 0x05
	for(uint8 Local_u8Iterator=0;Local_u8Iterator<exp;Local_u8Iterator++)
    28f0:	19 82       	std	Y+1, r1	; 0x01
    28f2:	15 c0       	rjmp	.+42     	; 0x291e <POW+0x62>
	{
		Local_u32Num=Local_u32Num*base;
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	9b 81       	ldd	r25, Y+3	; 0x03
    28f8:	ac 81       	ldd	r26, Y+4	; 0x04
    28fa:	bd 81       	ldd	r27, Y+5	; 0x05
    28fc:	2e 81       	ldd	r18, Y+6	; 0x06
    28fe:	3f 81       	ldd	r19, Y+7	; 0x07
    2900:	48 85       	ldd	r20, Y+8	; 0x08
    2902:	59 85       	ldd	r21, Y+9	; 0x09
    2904:	bc 01       	movw	r22, r24
    2906:	cd 01       	movw	r24, r26
    2908:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsi3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	8a 83       	std	Y+2, r24	; 0x02
    2912:	9b 83       	std	Y+3, r25	; 0x03
    2914:	ac 83       	std	Y+4, r26	; 0x04
    2916:	bd 83       	std	Y+5, r27	; 0x05
}

uint32 POW(uint32 base,uint32 exp)
{
	uint32 Local_u32Num=1;
	for(uint8 Local_u8Iterator=0;Local_u8Iterator<exp;Local_u8Iterator++)
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	8f 5f       	subi	r24, 0xFF	; 255
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	28 2f       	mov	r18, r24
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	8a 85       	ldd	r24, Y+10	; 0x0a
    292a:	9b 85       	ldd	r25, Y+11	; 0x0b
    292c:	ac 85       	ldd	r26, Y+12	; 0x0c
    292e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2930:	28 17       	cp	r18, r24
    2932:	39 07       	cpc	r19, r25
    2934:	4a 07       	cpc	r20, r26
    2936:	5b 07       	cpc	r21, r27
    2938:	e8 f2       	brcs	.-70     	; 0x28f4 <POW+0x38>
	{
		Local_u32Num=Local_u32Num*base;
	}
	return Local_u32Num;
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	ac 81       	ldd	r26, Y+4	; 0x04
    2940:	bd 81       	ldd	r27, Y+5	; 0x05
}
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	2d 96       	adiw	r28, 0x0d	; 13
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	08 95       	ret

00002958 <FromHexToDec>:
uint32 FromHexToDec(StackUint8* Ps)
{
    2958:	ef 92       	push	r14
    295a:	ff 92       	push	r15
    295c:	0f 93       	push	r16
    295e:	1f 93       	push	r17
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	28 97       	sbiw	r28, 0x08	; 8
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	f8 94       	cli
    296e:	de bf       	out	0x3e, r29	; 62
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	cd bf       	out	0x3d, r28	; 61
    2974:	98 87       	std	Y+8, r25	; 0x08
    2976:	8f 83       	std	Y+7, r24	; 0x07
    uint32 Local_u32Decimal=0;
    2978:	1b 82       	std	Y+3, r1	; 0x03
    297a:	1c 82       	std	Y+4, r1	; 0x04
    297c:	1d 82       	std	Y+5, r1	; 0x05
    297e:	1e 82       	std	Y+6, r1	; 0x06
    uint8 Local_u8Current=0;
    2980:	1a 82       	std	Y+2, r1	; 0x02
    uint8 Local_u8Iterator=0;
    2982:	19 82       	std	Y+1, r1	; 0x01
    2984:	5c c0       	rjmp	.+184    	; 0x2a3e <FromHexToDec+0xe6>
    while(!Stack_u8IsEmptyOp(Ps))
    {
        Local_u8Current=StackChar_u8Pop(Ps);
    2986:	8f 81       	ldd	r24, Y+7	; 0x07
    2988:	98 85       	ldd	r25, Y+8	; 0x08
    298a:	0e 94 07 0a 	call	0x140e	; 0x140e <StackChar_u8Pop>
    298e:	8a 83       	std	Y+2, r24	; 0x02
        if(Local_u8Current<='9')
    2990:	8a 81       	ldd	r24, Y+2	; 0x02
    2992:	8a 33       	cpi	r24, 0x3A	; 58
    2994:	48 f5       	brcc	.+82     	; 0x29e8 <FromHexToDec+0x90>
        {
            Local_u32Decimal=Local_u32Decimal+(Local_u8Current-'0')*POW(16,Local_u8Iterator);
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	88 2f       	mov	r24, r24
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	c0 97       	sbiw	r24, 0x30	; 48
    299e:	7c 01       	movw	r14, r24
    29a0:	00 27       	eor	r16, r16
    29a2:	f7 fc       	sbrc	r15, 7
    29a4:	00 95       	com	r16
    29a6:	10 2f       	mov	r17, r16
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	50 e0       	ldi	r21, 0x00	; 0
    29b2:	60 e1       	ldi	r22, 0x10	; 16
    29b4:	70 e0       	ldi	r23, 0x00	; 0
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 5e 14 	call	0x28bc	; 0x28bc <POW>
    29be:	9b 01       	movw	r18, r22
    29c0:	ac 01       	movw	r20, r24
    29c2:	c8 01       	movw	r24, r16
    29c4:	b7 01       	movw	r22, r14
    29c6:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsi3>
    29ca:	9b 01       	movw	r18, r22
    29cc:	ac 01       	movw	r20, r24
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	9c 81       	ldd	r25, Y+4	; 0x04
    29d2:	ad 81       	ldd	r26, Y+5	; 0x05
    29d4:	be 81       	ldd	r27, Y+6	; 0x06
    29d6:	82 0f       	add	r24, r18
    29d8:	93 1f       	adc	r25, r19
    29da:	a4 1f       	adc	r26, r20
    29dc:	b5 1f       	adc	r27, r21
    29de:	8b 83       	std	Y+3, r24	; 0x03
    29e0:	9c 83       	std	Y+4, r25	; 0x04
    29e2:	ad 83       	std	Y+5, r26	; 0x05
    29e4:	be 83       	std	Y+6, r27	; 0x06
    29e6:	28 c0       	rjmp	.+80     	; 0x2a38 <FromHexToDec+0xe0>
        }
        else
        {
            Local_u32Decimal=Local_u32Decimal+(Local_u8Current-'A'+10)*POW(16,Local_u8Iterator);
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	88 2f       	mov	r24, r24
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	c7 97       	sbiw	r24, 0x37	; 55
    29f0:	7c 01       	movw	r14, r24
    29f2:	00 27       	eor	r16, r16
    29f4:	f7 fc       	sbrc	r15, 7
    29f6:	00 95       	com	r16
    29f8:	10 2f       	mov	r17, r16
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	50 e0       	ldi	r21, 0x00	; 0
    2a04:	60 e1       	ldi	r22, 0x10	; 16
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 5e 14 	call	0x28bc	; 0x28bc <POW>
    2a10:	9b 01       	movw	r18, r22
    2a12:	ac 01       	movw	r20, r24
    2a14:	c8 01       	movw	r24, r16
    2a16:	b7 01       	movw	r22, r14
    2a18:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsi3>
    2a1c:	9b 01       	movw	r18, r22
    2a1e:	ac 01       	movw	r20, r24
    2a20:	8b 81       	ldd	r24, Y+3	; 0x03
    2a22:	9c 81       	ldd	r25, Y+4	; 0x04
    2a24:	ad 81       	ldd	r26, Y+5	; 0x05
    2a26:	be 81       	ldd	r27, Y+6	; 0x06
    2a28:	82 0f       	add	r24, r18
    2a2a:	93 1f       	adc	r25, r19
    2a2c:	a4 1f       	adc	r26, r20
    2a2e:	b5 1f       	adc	r27, r21
    2a30:	8b 83       	std	Y+3, r24	; 0x03
    2a32:	9c 83       	std	Y+4, r25	; 0x04
    2a34:	ad 83       	std	Y+5, r26	; 0x05
    2a36:	be 83       	std	Y+6, r27	; 0x06
        }
        Local_u8Iterator++;
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	8f 5f       	subi	r24, 0xFF	; 255
    2a3c:	89 83       	std	Y+1, r24	; 0x01
uint32 FromHexToDec(StackUint8* Ps)
{
    uint32 Local_u32Decimal=0;
    uint8 Local_u8Current=0;
    uint8 Local_u8Iterator=0;
    while(!Stack_u8IsEmptyOp(Ps))
    2a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a40:	98 85       	ldd	r25, Y+8	; 0x08
    2a42:	0e 94 b8 09 	call	0x1370	; 0x1370 <Stack_u8IsEmptyOp>
    2a46:	88 23       	and	r24, r24
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <FromHexToDec+0xf4>
    2a4a:	9d cf       	rjmp	.-198    	; 0x2986 <FromHexToDec+0x2e>
        {
            Local_u32Decimal=Local_u32Decimal+(Local_u8Current-'A'+10)*POW(16,Local_u8Iterator);
        }
        Local_u8Iterator++;
    }
    return Local_u32Decimal;
    2a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a50:	ad 81       	ldd	r26, Y+5	; 0x05
    2a52:	be 81       	ldd	r27, Y+6	; 0x06
}
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	28 96       	adiw	r28, 0x08	; 8
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	ff 90       	pop	r15
    2a6e:	ef 90       	pop	r14
    2a70:	08 95       	ret

00002a72 <FromOctalToDec>:

uint32 FromOctalToDec(StackUint8* Ps)
{
    2a72:	ef 92       	push	r14
    2a74:	ff 92       	push	r15
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	28 97       	sbiw	r28, 0x08	; 8
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	98 87       	std	Y+8, r25	; 0x08
    2a90:	8f 83       	std	Y+7, r24	; 0x07
    uint32 Local_u32Decimal=0;
    2a92:	1b 82       	std	Y+3, r1	; 0x03
    2a94:	1c 82       	std	Y+4, r1	; 0x04
    2a96:	1d 82       	std	Y+5, r1	; 0x05
    2a98:	1e 82       	std	Y+6, r1	; 0x06
    uint8 Local_u8Current=0;
    2a9a:	1a 82       	std	Y+2, r1	; 0x02
    uint8 Local_u8Iterator=0;
    2a9c:	19 82       	std	Y+1, r1	; 0x01
    2a9e:	30 c0       	rjmp	.+96     	; 0x2b00 <FromOctalToDec+0x8e>
    while(!Stack_u8IsEmptyOp(Ps))
    {
        Local_u8Current=StackChar_u8Pop(Ps);
    2aa0:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa2:	98 85       	ldd	r25, Y+8	; 0x08
    2aa4:	0e 94 07 0a 	call	0x140e	; 0x140e <StackChar_u8Pop>
    2aa8:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32Decimal=Local_u32Decimal+(Local_u8Current-'0')*POW(8,Local_u8Iterator);
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	c0 97       	sbiw	r24, 0x30	; 48
    2ab2:	7c 01       	movw	r14, r24
    2ab4:	00 27       	eor	r16, r16
    2ab6:	f7 fc       	sbrc	r15, 7
    2ab8:	00 95       	com	r16
    2aba:	10 2f       	mov	r17, r16
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	28 2f       	mov	r18, r24
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	68 e0       	ldi	r22, 0x08	; 8
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	0e 94 5e 14 	call	0x28bc	; 0x28bc <POW>
    2ad2:	9b 01       	movw	r18, r22
    2ad4:	ac 01       	movw	r20, r24
    2ad6:	c8 01       	movw	r24, r16
    2ad8:	b7 01       	movw	r22, r14
    2ada:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsi3>
    2ade:	9b 01       	movw	r18, r22
    2ae0:	ac 01       	movw	r20, r24
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae6:	ad 81       	ldd	r26, Y+5	; 0x05
    2ae8:	be 81       	ldd	r27, Y+6	; 0x06
    2aea:	82 0f       	add	r24, r18
    2aec:	93 1f       	adc	r25, r19
    2aee:	a4 1f       	adc	r26, r20
    2af0:	b5 1f       	adc	r27, r21
    2af2:	8b 83       	std	Y+3, r24	; 0x03
    2af4:	9c 83       	std	Y+4, r25	; 0x04
    2af6:	ad 83       	std	Y+5, r26	; 0x05
    2af8:	be 83       	std	Y+6, r27	; 0x06
        Local_u8Iterator++;
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	89 83       	std	Y+1, r24	; 0x01
uint32 FromOctalToDec(StackUint8* Ps)
{
    uint32 Local_u32Decimal=0;
    uint8 Local_u8Current=0;
    uint8 Local_u8Iterator=0;
    while(!Stack_u8IsEmptyOp(Ps))
    2b00:	8f 81       	ldd	r24, Y+7	; 0x07
    2b02:	98 85       	ldd	r25, Y+8	; 0x08
    2b04:	0e 94 b8 09 	call	0x1370	; 0x1370 <Stack_u8IsEmptyOp>
    2b08:	88 23       	and	r24, r24
    2b0a:	51 f2       	breq	.-108    	; 0x2aa0 <FromOctalToDec+0x2e>
    {
        Local_u8Current=StackChar_u8Pop(Ps);
        Local_u32Decimal=Local_u32Decimal+(Local_u8Current-'0')*POW(8,Local_u8Iterator);
        Local_u8Iterator++;
    }
    return Local_u32Decimal;
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b10:	ad 81       	ldd	r26, Y+5	; 0x05
    2b12:	be 81       	ldd	r27, Y+6	; 0x06
}
    2b14:	bc 01       	movw	r22, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	28 96       	adiw	r28, 0x08	; 8
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	ff 90       	pop	r15
    2b2e:	ef 90       	pop	r14
    2b30:	08 95       	ret

00002b32 <FromBinToDec>:

uint32 FromBinToDec(StackUint8* Ps)
{
    2b32:	ef 92       	push	r14
    2b34:	ff 92       	push	r15
    2b36:	0f 93       	push	r16
    2b38:	1f 93       	push	r17
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
    2b42:	28 97       	sbiw	r28, 0x08	; 8
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	f8 94       	cli
    2b48:	de bf       	out	0x3e, r29	; 62
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	cd bf       	out	0x3d, r28	; 61
    2b4e:	98 87       	std	Y+8, r25	; 0x08
    2b50:	8f 83       	std	Y+7, r24	; 0x07
    uint32 Local_u32Decimal=0;
    2b52:	1b 82       	std	Y+3, r1	; 0x03
    2b54:	1c 82       	std	Y+4, r1	; 0x04
    2b56:	1d 82       	std	Y+5, r1	; 0x05
    2b58:	1e 82       	std	Y+6, r1	; 0x06
    uint8 Local_u8Current=0;
    2b5a:	1a 82       	std	Y+2, r1	; 0x02
    uint8 Local_u8Iterator=0;
    2b5c:	19 82       	std	Y+1, r1	; 0x01
    2b5e:	30 c0       	rjmp	.+96     	; 0x2bc0 <FromBinToDec+0x8e>
    while(!Stack_u8IsEmptyOp(Ps))
    {
        Local_u8Current=StackChar_u8Pop(Ps);
    2b60:	8f 81       	ldd	r24, Y+7	; 0x07
    2b62:	98 85       	ldd	r25, Y+8	; 0x08
    2b64:	0e 94 07 0a 	call	0x140e	; 0x140e <StackChar_u8Pop>
    2b68:	8a 83       	std	Y+2, r24	; 0x02
        Local_u32Decimal=Local_u32Decimal+(Local_u8Current-'0')*POW(2,Local_u8Iterator);
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	88 2f       	mov	r24, r24
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	c0 97       	sbiw	r24, 0x30	; 48
    2b72:	7c 01       	movw	r14, r24
    2b74:	00 27       	eor	r16, r16
    2b76:	f7 fc       	sbrc	r15, 7
    2b78:	00 95       	com	r16
    2b7a:	10 2f       	mov	r17, r16
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	28 2f       	mov	r18, r24
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e0       	ldi	r20, 0x00	; 0
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	62 e0       	ldi	r22, 0x02	; 2
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	0e 94 5e 14 	call	0x28bc	; 0x28bc <POW>
    2b92:	9b 01       	movw	r18, r22
    2b94:	ac 01       	movw	r20, r24
    2b96:	c8 01       	movw	r24, r16
    2b98:	b7 01       	movw	r22, r14
    2b9a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsi3>
    2b9e:	9b 01       	movw	r18, r22
    2ba0:	ac 01       	movw	r20, r24
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba6:	ad 81       	ldd	r26, Y+5	; 0x05
    2ba8:	be 81       	ldd	r27, Y+6	; 0x06
    2baa:	82 0f       	add	r24, r18
    2bac:	93 1f       	adc	r25, r19
    2bae:	a4 1f       	adc	r26, r20
    2bb0:	b5 1f       	adc	r27, r21
    2bb2:	8b 83       	std	Y+3, r24	; 0x03
    2bb4:	9c 83       	std	Y+4, r25	; 0x04
    2bb6:	ad 83       	std	Y+5, r26	; 0x05
    2bb8:	be 83       	std	Y+6, r27	; 0x06
        Local_u8Iterator++;
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	89 83       	std	Y+1, r24	; 0x01
uint32 FromBinToDec(StackUint8* Ps)
{
    uint32 Local_u32Decimal=0;
    uint8 Local_u8Current=0;
    uint8 Local_u8Iterator=0;
    while(!Stack_u8IsEmptyOp(Ps))
    2bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc2:	98 85       	ldd	r25, Y+8	; 0x08
    2bc4:	0e 94 b8 09 	call	0x1370	; 0x1370 <Stack_u8IsEmptyOp>
    2bc8:	88 23       	and	r24, r24
    2bca:	51 f2       	breq	.-108    	; 0x2b60 <FromBinToDec+0x2e>
    {
        Local_u8Current=StackChar_u8Pop(Ps);
        Local_u32Decimal=Local_u32Decimal+(Local_u8Current-'0')*POW(2,Local_u8Iterator);
        Local_u8Iterator++;
    }
    return Local_u32Decimal;
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd0:	ad 81       	ldd	r26, Y+5	; 0x05
    2bd2:	be 81       	ldd	r27, Y+6	; 0x06
}
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	28 96       	adiw	r28, 0x08	; 8
    2bda:	0f b6       	in	r0, 0x3f	; 63
    2bdc:	f8 94       	cli
    2bde:	de bf       	out	0x3e, r29	; 62
    2be0:	0f be       	out	0x3f, r0	; 63
    2be2:	cd bf       	out	0x3d, r28	; 61
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	ff 90       	pop	r15
    2bee:	ef 90       	pop	r14
    2bf0:	08 95       	ret

00002bf2 <FromDecToBin>:

 void FromDecToBin(uint32 Cpy_u32Num,StackUint8* Ptr_sBin)
{
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <FromDecToBin+0x6>
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <FromDecToBin+0x8>
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <FromDecToBin+0xa>
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	69 83       	std	Y+1, r22	; 0x01
    2c02:	7a 83       	std	Y+2, r23	; 0x02
    2c04:	8b 83       	std	Y+3, r24	; 0x03
    2c06:	9c 83       	std	Y+4, r25	; 0x04
    2c08:	5e 83       	std	Y+6, r21	; 0x06
    2c0a:	4d 83       	std	Y+5, r20	; 0x05
    2c0c:	15 c0       	rjmp	.+42     	; 0x2c38 <FromDecToBin+0x46>
    while(Cpy_u32Num!=0)
    {
        StackChar_vPushOp(Ptr_sBin,((Cpy_u32Num%2)+'0'));
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	81 70       	andi	r24, 0x01	; 1
    2c12:	28 2f       	mov	r18, r24
    2c14:	20 5d       	subi	r18, 0xD0	; 208
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1a:	62 2f       	mov	r22, r18
    2c1c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <StackChar_vPushOp>
        Cpy_u32Num/=2;
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	9a 81       	ldd	r25, Y+2	; 0x02
    2c24:	ab 81       	ldd	r26, Y+3	; 0x03
    2c26:	bc 81       	ldd	r27, Y+4	; 0x04
    2c28:	b6 95       	lsr	r27
    2c2a:	a7 95       	ror	r26
    2c2c:	97 95       	ror	r25
    2c2e:	87 95       	ror	r24
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	9a 83       	std	Y+2, r25	; 0x02
    2c34:	ab 83       	std	Y+3, r26	; 0x03
    2c36:	bc 83       	std	Y+4, r27	; 0x04
    return Local_u32Decimal;
}

 void FromDecToBin(uint32 Cpy_u32Num,StackUint8* Ptr_sBin)
{
    while(Cpy_u32Num!=0)
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c3e:	bc 81       	ldd	r27, Y+4	; 0x04
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	a1 05       	cpc	r26, r1
    2c44:	b1 05       	cpc	r27, r1
    2c46:	19 f7       	brne	.-58     	; 0x2c0e <FromDecToBin+0x1c>
    {
        StackChar_vPushOp(Ptr_sBin,((Cpy_u32Num%2)+'0'));
        Cpy_u32Num/=2;
    }
}
    2c48:	26 96       	adiw	r28, 0x06	; 6
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	f8 94       	cli
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	cd bf       	out	0x3d, r28	; 61
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <FromDecToOctal>:
void FromDecToOctal(uint32 Cpy_u32Num,StackUint8* Ptr_sBin)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <FromDecToOctal+0x6>
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <FromDecToOctal+0x8>
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <FromDecToOctal+0xa>
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	69 83       	std	Y+1, r22	; 0x01
    2c6a:	7a 83       	std	Y+2, r23	; 0x02
    2c6c:	8b 83       	std	Y+3, r24	; 0x03
    2c6e:	9c 83       	std	Y+4, r25	; 0x04
    2c70:	5e 83       	std	Y+6, r21	; 0x06
    2c72:	4d 83       	std	Y+5, r20	; 0x05
    2c74:	19 c0       	rjmp	.+50     	; 0x2ca8 <FromDecToOctal+0x4e>
    while(Cpy_u32Num!=0)
    {
        StackChar_vPushOp(Ptr_sBin,((Cpy_u32Num%8)+'0'));
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	87 70       	andi	r24, 0x07	; 7
    2c7a:	28 2f       	mov	r18, r24
    2c7c:	20 5d       	subi	r18, 0xD0	; 208
    2c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c80:	9e 81       	ldd	r25, Y+6	; 0x06
    2c82:	62 2f       	mov	r22, r18
    2c84:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <StackChar_vPushOp>
        Cpy_u32Num/=8;
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c8e:	bc 81       	ldd	r27, Y+4	; 0x04
    2c90:	68 94       	set
    2c92:	12 f8       	bld	r1, 2
    2c94:	b6 95       	lsr	r27
    2c96:	a7 95       	ror	r26
    2c98:	97 95       	ror	r25
    2c9a:	87 95       	ror	r24
    2c9c:	16 94       	lsr	r1
    2c9e:	d1 f7       	brne	.-12     	; 0x2c94 <FromDecToOctal+0x3a>
    2ca0:	89 83       	std	Y+1, r24	; 0x01
    2ca2:	9a 83       	std	Y+2, r25	; 0x02
    2ca4:	ab 83       	std	Y+3, r26	; 0x03
    2ca6:	bc 83       	std	Y+4, r27	; 0x04
        Cpy_u32Num/=2;
    }
}
void FromDecToOctal(uint32 Cpy_u32Num,StackUint8* Ptr_sBin)
{
    while(Cpy_u32Num!=0)
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cac:	ab 81       	ldd	r26, Y+3	; 0x03
    2cae:	bc 81       	ldd	r27, Y+4	; 0x04
    2cb0:	00 97       	sbiw	r24, 0x00	; 0
    2cb2:	a1 05       	cpc	r26, r1
    2cb4:	b1 05       	cpc	r27, r1
    2cb6:	f9 f6       	brne	.-66     	; 0x2c76 <FromDecToOctal+0x1c>
    {
        StackChar_vPushOp(Ptr_sBin,((Cpy_u32Num%8)+'0'));
        Cpy_u32Num/=8;
    }
}
    2cb8:	26 96       	adiw	r28, 0x06	; 6
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	cf 91       	pop	r28
    2cc6:	df 91       	pop	r29
    2cc8:	08 95       	ret

00002cca <FromDecToHex>:
void FromDecToHex(uint32 Cpy_u32Num,StackUint8* Ptr_sBin)
{
    2cca:	df 93       	push	r29
    2ccc:	cf 93       	push	r28
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
    2cd2:	27 97       	sbiw	r28, 0x07	; 7
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	cd bf       	out	0x3d, r28	; 61
    2cde:	6a 83       	std	Y+2, r22	; 0x02
    2ce0:	7b 83       	std	Y+3, r23	; 0x03
    2ce2:	8c 83       	std	Y+4, r24	; 0x04
    2ce4:	9d 83       	std	Y+5, r25	; 0x05
    2ce6:	5f 83       	std	Y+7, r21	; 0x07
    2ce8:	4e 83       	std	Y+6, r20	; 0x06
    uint8 Local_u8Current=0;
    2cea:	19 82       	std	Y+1, r1	; 0x01
    2cec:	28 c0       	rjmp	.+80     	; 0x2d3e <FromDecToHex+0x74>
    while(Cpy_u32Num!=0)
    {
        Local_u8Current=Cpy_u32Num%16;
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	8f 70       	andi	r24, 0x0F	; 15
    2cf2:	89 83       	std	Y+1, r24	; 0x01
        if(Local_u8Current>=10)
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	8a 30       	cpi	r24, 0x0A	; 10
    2cf8:	48 f0       	brcs	.+18     	; 0x2d0c <FromDecToHex+0x42>
        {
            Local_u8Current=Local_u8Current+'A'-10;
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	89 5c       	subi	r24, 0xC9	; 201
    2cfe:	89 83       	std	Y+1, r24	; 0x01
            StackChar_vPushOp(Ptr_sBin,Local_u8Current);
    2d00:	8e 81       	ldd	r24, Y+6	; 0x06
    2d02:	9f 81       	ldd	r25, Y+7	; 0x07
    2d04:	69 81       	ldd	r22, Y+1	; 0x01
    2d06:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <StackChar_vPushOp>
    2d0a:	09 c0       	rjmp	.+18     	; 0x2d1e <FromDecToHex+0x54>
        }
        else
        {
            StackChar_vPushOp(Ptr_sBin,((Cpy_u32Num%16)+'0'));
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	8f 70       	andi	r24, 0x0F	; 15
    2d10:	28 2f       	mov	r18, r24
    2d12:	20 5d       	subi	r18, 0xD0	; 208
    2d14:	8e 81       	ldd	r24, Y+6	; 0x06
    2d16:	9f 81       	ldd	r25, Y+7	; 0x07
    2d18:	62 2f       	mov	r22, r18
    2d1a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <StackChar_vPushOp>
        }
        Cpy_u32Num/=16;
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	9b 81       	ldd	r25, Y+3	; 0x03
    2d22:	ac 81       	ldd	r26, Y+4	; 0x04
    2d24:	bd 81       	ldd	r27, Y+5	; 0x05
    2d26:	68 94       	set
    2d28:	13 f8       	bld	r1, 3
    2d2a:	b6 95       	lsr	r27
    2d2c:	a7 95       	ror	r26
    2d2e:	97 95       	ror	r25
    2d30:	87 95       	ror	r24
    2d32:	16 94       	lsr	r1
    2d34:	d1 f7       	brne	.-12     	; 0x2d2a <FromDecToHex+0x60>
    2d36:	8a 83       	std	Y+2, r24	; 0x02
    2d38:	9b 83       	std	Y+3, r25	; 0x03
    2d3a:	ac 83       	std	Y+4, r26	; 0x04
    2d3c:	bd 83       	std	Y+5, r27	; 0x05
    }
}
void FromDecToHex(uint32 Cpy_u32Num,StackUint8* Ptr_sBin)
{
    uint8 Local_u8Current=0;
    while(Cpy_u32Num!=0)
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	ac 81       	ldd	r26, Y+4	; 0x04
    2d44:	bd 81       	ldd	r27, Y+5	; 0x05
    2d46:	00 97       	sbiw	r24, 0x00	; 0
    2d48:	a1 05       	cpc	r26, r1
    2d4a:	b1 05       	cpc	r27, r1
    2d4c:	81 f6       	brne	.-96     	; 0x2cee <FromDecToHex+0x24>
        {
            StackChar_vPushOp(Ptr_sBin,((Cpy_u32Num%16)+'0'));
        }
        Cpy_u32Num/=16;
    }
}
    2d4e:	27 96       	adiw	r28, 0x07	; 7
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <MathErrCheck>:

uint8 MathErrCheck(Queue_f32* Ptr_qNumbers,Queue_uint8* Ptr_qOp)
{
    2d60:	0f 93       	push	r16
    2d62:	1f 93       	push	r17
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <MathErrCheck+0xa>
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <MathErrCheck+0xc>
    2d6c:	0f 92       	push	r0
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	9a 83       	std	Y+2, r25	; 0x02
    2d74:	89 83       	std	Y+1, r24	; 0x01
    2d76:	7c 83       	std	Y+4, r23	; 0x04
    2d78:	6b 83       	std	Y+3, r22	; 0x03
	if((Queue_u8CountNumb(Ptr_qNumbers)-Queue_u8CountOp(Ptr_qOp))==1)
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7e:	0e 94 b0 08 	call	0x1160	; 0x1160 <Queue_u8CountNumb>
    2d82:	08 2f       	mov	r16, r24
    2d84:	10 e0       	ldi	r17, 0x00	; 0
    2d86:	8b 81       	ldd	r24, Y+3	; 0x03
    2d88:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <Queue_u8CountOp>
    2d8e:	88 2f       	mov	r24, r24
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	98 01       	movw	r18, r16
    2d94:	28 1b       	sub	r18, r24
    2d96:	39 0b       	sbc	r19, r25
    2d98:	c9 01       	movw	r24, r18
    2d9a:	81 30       	cpi	r24, 0x01	; 1
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	11 f4       	brne	.+4      	; 0x2da4 <MathErrCheck+0x44>
	{
		return 0;
    2da0:	1d 82       	std	Y+5, r1	; 0x05
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <MathErrCheck+0x48>
	}
	else
	{
		return 1;
    2da4:	31 e0       	ldi	r19, 0x01	; 1
    2da6:	3d 83       	std	Y+5, r19	; 0x05
    2da8:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
    2dbc:	08 95       	ret

00002dbe <ReverseStackNum>:

void ReverseStackNum(StackF32* Ps)
{
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
    2dc6:	ac 97       	sbiw	r28, 0x2c	; 44
    2dc8:	0f b6       	in	r0, 0x3f	; 63
    2dca:	f8 94       	cli
    2dcc:	de bf       	out	0x3e, r29	; 62
    2dce:	0f be       	out	0x3f, r0	; 63
    2dd0:	cd bf       	out	0x3d, r28	; 61
    2dd2:	9c a7       	std	Y+44, r25	; 0x2c
    2dd4:	8b a7       	std	Y+43, r24	; 0x2b
	Queue_f32 Local_qNumbers;
	Queue_vInitQueueNum(&Local_qNumbers);
    2dd6:	ce 01       	movw	r24, r28
    2dd8:	01 96       	adiw	r24, 0x01	; 1
    2dda:	0e 94 99 07 	call	0xf32	; 0xf32 <Queue_vInitQueueNum>
    2dde:	0c c0       	rjmp	.+24     	; 0x2df8 <ReverseStackNum+0x3a>
	while(!Stack_u8IsEmptyNum(Ps))
	{
		Queue_vEnqueueNum(&Local_qNumbers, StackNum_u8Pop(Ps));
    2de0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2de2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2de4:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <StackNum_u8Pop>
    2de8:	9b 01       	movw	r18, r22
    2dea:	ac 01       	movw	r20, r24
    2dec:	ce 01       	movw	r24, r28
    2dee:	01 96       	adiw	r24, 0x01	; 1
    2df0:	ba 01       	movw	r22, r20
    2df2:	a9 01       	movw	r20, r18
    2df4:	0e 94 c1 07 	call	0xf82	; 0xf82 <Queue_vEnqueueNum>

void ReverseStackNum(StackF32* Ps)
{
	Queue_f32 Local_qNumbers;
	Queue_vInitQueueNum(&Local_qNumbers);
	while(!Stack_u8IsEmptyNum(Ps))
    2df8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dfa:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dfc:	0e 94 a0 09 	call	0x1340	; 0x1340 <Stack_u8IsEmptyNum>
    2e00:	88 23       	and	r24, r24
    2e02:	71 f3       	breq	.-36     	; 0x2de0 <ReverseStackNum+0x22>
    2e04:	0c c0       	rjmp	.+24     	; 0x2e1e <ReverseStackNum+0x60>
	{
		Queue_vEnqueueNum(&Local_qNumbers, StackNum_u8Pop(Ps));
	}
	while(!Queue_u8IsEmptyNum(&Local_qNumbers))
	{
		StackNum_vPushNum(Ps, Queue_f32DequeueNum(&Local_qNumbers));
    2e06:	ce 01       	movw	r24, r28
    2e08:	01 96       	adiw	r24, 0x01	; 1
    2e0a:	0e 94 56 08 	call	0x10ac	; 0x10ac <Queue_f32DequeueNum>
    2e0e:	9b 01       	movw	r18, r22
    2e10:	ac 01       	movw	r20, r24
    2e12:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e14:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e16:	ba 01       	movw	r22, r20
    2e18:	a9 01       	movw	r20, r18
    2e1a:	0e 94 46 09 	call	0x128c	; 0x128c <StackNum_vPushNum>
	Queue_vInitQueueNum(&Local_qNumbers);
	while(!Stack_u8IsEmptyNum(Ps))
	{
		Queue_vEnqueueNum(&Local_qNumbers, StackNum_u8Pop(Ps));
	}
	while(!Queue_u8IsEmptyNum(&Local_qNumbers))
    2e1e:	ce 01       	movw	r24, r28
    2e20:	01 96       	adiw	r24, 0x01	; 1
    2e22:	0e 94 47 07 	call	0xe8e	; 0xe8e <Queue_u8IsEmptyNum>
    2e26:	88 23       	and	r24, r24
    2e28:	71 f3       	breq	.-36     	; 0x2e06 <ReverseStackNum+0x48>
	{
		StackNum_vPushNum(Ps, Queue_f32DequeueNum(&Local_qNumbers));
	}
	return;
}
    2e2a:	ac 96       	adiw	r28, 0x2c	; 44
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	cd bf       	out	0x3d, r28	; 61
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	08 95       	ret

00002e3c <ReverseStackOp>:
void ReverseStackOp(StackUint8* Ps)
{
    2e3c:	df 93       	push	r29
    2e3e:	cf 93       	push	r28
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	2e 97       	sbiw	r28, 0x0e	; 14
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	9e 87       	std	Y+14, r25	; 0x0e
    2e52:	8d 87       	std	Y+13, r24	; 0x0d
	Queue_uint8 Local_qOp;
	Queue_vInitQueueOp(&Local_qOp);
    2e54:	ce 01       	movw	r24, r28
    2e56:	01 96       	adiw	r24, 0x01	; 1
    2e58:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Queue_vInitQueueOp>
    2e5c:	0a c0       	rjmp	.+20     	; 0x2e72 <ReverseStackOp+0x36>
	while(!Stack_u8IsEmptyOp(Ps))
	{
		Queue_vEnqueueOp(&Local_qOp, StackChar_u8Pop(Ps));
    2e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e62:	0e 94 07 0a 	call	0x140e	; 0x140e <StackChar_u8Pop>
    2e66:	28 2f       	mov	r18, r24
    2e68:	ce 01       	movw	r24, r28
    2e6a:	01 96       	adiw	r24, 0x01	; 1
    2e6c:	62 2f       	mov	r22, r18
    2e6e:	0e 94 18 08 	call	0x1030	; 0x1030 <Queue_vEnqueueOp>
}
void ReverseStackOp(StackUint8* Ps)
{
	Queue_uint8 Local_qOp;
	Queue_vInitQueueOp(&Local_qOp);
	while(!Stack_u8IsEmptyOp(Ps))
    2e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e76:	0e 94 b8 09 	call	0x1370	; 0x1370 <Stack_u8IsEmptyOp>
    2e7a:	88 23       	and	r24, r24
    2e7c:	81 f3       	breq	.-32     	; 0x2e5e <ReverseStackOp+0x22>
    2e7e:	0a c0       	rjmp	.+20     	; 0x2e94 <ReverseStackOp+0x58>
	{
		Queue_vEnqueueOp(&Local_qOp, StackChar_u8Pop(Ps));
	}
	while(!Queue_u8IsEmptyOp(&Local_qOp))
	{
		StackChar_vPushOp(Ps, Queue_f32DequeueOp(&Local_qOp));
    2e80:	ce 01       	movw	r24, r28
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	0e 94 8c 08 	call	0x1118	; 0x1118 <Queue_f32DequeueOp>
    2e88:	28 2f       	mov	r18, r24
    2e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8e:	62 2f       	mov	r22, r18
    2e90:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <StackChar_vPushOp>
	Queue_vInitQueueOp(&Local_qOp);
	while(!Stack_u8IsEmptyOp(Ps))
	{
		Queue_vEnqueueOp(&Local_qOp, StackChar_u8Pop(Ps));
	}
	while(!Queue_u8IsEmptyOp(&Local_qOp))
    2e94:	ce 01       	movw	r24, r28
    2e96:	01 96       	adiw	r24, 0x01	; 1
    2e98:	0e 94 70 07 	call	0xee0	; 0xee0 <Queue_u8IsEmptyOp>
    2e9c:	88 23       	and	r24, r24
    2e9e:	81 f3       	breq	.-32     	; 0x2e80 <ReverseStackOp+0x44>
	{
		StackChar_vPushOp(Ps, Queue_f32DequeueOp(&Local_qOp));
	}
	return;
}
    2ea0:	2e 96       	adiw	r28, 0x0e	; 14
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <Calculate>:
f32 Calculate(StackF32* Ptr_sNumbers,StackUint8* Ptr_sOp)
{
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
    2eba:	c3 56       	subi	r28, 0x63	; 99
    2ebc:	d0 40       	sbci	r29, 0x00	; 0
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e4 5a       	subi	r30, 0xA4	; 164
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	80 83       	st	Z, r24
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	e2 5a       	subi	r30, 0xA2	; 162
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	71 83       	std	Z+1, r23	; 0x01
    2eda:	60 83       	st	Z, r22
	Glob_u8MathErr=0;
    2edc:	10 92 1c 02 	sts	0x021C, r1
	StackF32 Local_qNumbers;
	StackUint8 Local_qOp;
	StackChar_vInit(&Local_qOp);
    2ee0:	ce 01       	movw	r24, r28
    2ee2:	85 5b       	subi	r24, 0xB5	; 181
    2ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee6:	0e 94 36 09 	call	0x126c	; 0x126c <StackChar_vInit>
	StackNum_vInit(&Local_qNumbers);
    2eea:	ce 01       	movw	r24, r28
    2eec:	0a 96       	adiw	r24, 0x0a	; 10
    2eee:	0e 94 26 09 	call	0x124c	; 0x124c <StackNum_vInit>
	f32 Local_f32Current,Local_f32Previous;
	uint8 Local_u8Op;
	ReverseStackNum(Ptr_sNumbers);
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	e4 5a       	subi	r30, 0xA4	; 164
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	80 81       	ld	r24, Z
    2efa:	91 81       	ldd	r25, Z+1	; 0x01
    2efc:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <ReverseStackNum>
	ReverseStackOp(Ptr_sOp);
    2f00:	fe 01       	movw	r30, r28
    2f02:	e2 5a       	subi	r30, 0xA2	; 162
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	80 81       	ld	r24, Z
    2f08:	91 81       	ldd	r25, Z+1	; 0x01
    2f0a:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <ReverseStackOp>
    2f0e:	9c c0       	rjmp	.+312    	; 0x3048 <Calculate+0x196>
	while(!Stack_u8IsEmptyOp(Ptr_sOp))
	{
		Local_u8Op=StackChar_u8Pop(Ptr_sOp);
    2f10:	fe 01       	movw	r30, r28
    2f12:	e2 5a       	subi	r30, 0xA2	; 162
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 81       	ld	r24, Z
    2f18:	91 81       	ldd	r25, Z+1	; 0x01
    2f1a:	0e 94 07 0a 	call	0x140e	; 0x140e <StackChar_u8Pop>
    2f1e:	89 83       	std	Y+1, r24	; 0x01
		Local_f32Previous=StackNum_u8Pop(Ptr_sNumbers);
    2f20:	fe 01       	movw	r30, r28
    2f22:	e4 5a       	subi	r30, 0xA4	; 164
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <StackNum_u8Pop>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	8a 83       	std	Y+2, r24	; 0x02
    2f34:	9b 83       	std	Y+3, r25	; 0x03
    2f36:	ac 83       	std	Y+4, r26	; 0x04
    2f38:	bd 83       	std	Y+5, r27	; 0x05
		if(Local_u8Op=='/')
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	8f 32       	cpi	r24, 0x2F	; 47
    2f3e:	09 f0       	breq	.+2      	; 0x2f42 <Calculate+0x90>
    2f40:	45 c0       	rjmp	.+138    	; 0x2fcc <Calculate+0x11a>
		{
			Local_f32Current=StackNum_u8Pop(Ptr_sNumbers);
    2f42:	fe 01       	movw	r30, r28
    2f44:	e4 5a       	subi	r30, 0xA4	; 164
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 81       	ld	r24, Z
    2f4a:	91 81       	ldd	r25, Z+1	; 0x01
    2f4c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <StackNum_u8Pop>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	8e 83       	std	Y+6, r24	; 0x06
    2f56:	9f 83       	std	Y+7, r25	; 0x07
    2f58:	a8 87       	std	Y+8, r26	; 0x08
    2f5a:	b9 87       	std	Y+9, r27	; 0x09
			if(Local_f32Current==0)
    2f5c:	6e 81       	ldd	r22, Y+6	; 0x06
    2f5e:	7f 81       	ldd	r23, Y+7	; 0x07
    2f60:	88 85       	ldd	r24, Y+8	; 0x08
    2f62:	99 85       	ldd	r25, Y+9	; 0x09
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e0       	ldi	r20, 0x00	; 0
    2f6a:	50 e0       	ldi	r21, 0x00	; 0
    2f6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2f70:	88 23       	and	r24, r24
    2f72:	71 f4       	brne	.+28     	; 0x2f90 <Calculate+0xde>
			{
				Glob_u8MathErr=1;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	80 93 1c 02 	sts	0x021C, r24
				return 0;
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	a0 e0       	ldi	r26, 0x00	; 0
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	a4 96       	adiw	r28, 0x24	; 36
    2f84:	8c af       	std	Y+60, r24	; 0x3c
    2f86:	9d af       	std	Y+61, r25	; 0x3d
    2f88:	ae af       	std	Y+62, r26	; 0x3e
    2f8a:	bf af       	std	Y+63, r27	; 0x3f
    2f8c:	a4 97       	sbiw	r28, 0x24	; 36
    2f8e:	e8 c0       	rjmp	.+464    	; 0x3160 <Calculate+0x2ae>
			}
			else
			{
				Local_f32Current=Local_f32Previous/Local_f32Current;
    2f90:	6a 81       	ldd	r22, Y+2	; 0x02
    2f92:	7b 81       	ldd	r23, Y+3	; 0x03
    2f94:	8c 81       	ldd	r24, Y+4	; 0x04
    2f96:	9d 81       	ldd	r25, Y+5	; 0x05
    2f98:	2e 81       	ldd	r18, Y+6	; 0x06
    2f9a:	3f 81       	ldd	r19, Y+7	; 0x07
    2f9c:	48 85       	ldd	r20, Y+8	; 0x08
    2f9e:	59 85       	ldd	r21, Y+9	; 0x09
    2fa0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	8e 83       	std	Y+6, r24	; 0x06
    2faa:	9f 83       	std	Y+7, r25	; 0x07
    2fac:	a8 87       	std	Y+8, r26	; 0x08
    2fae:	b9 87       	std	Y+9, r27	; 0x09
				StackNum_vPushNum(Ptr_sNumbers, Local_f32Current);
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e4 5a       	subi	r30, 0xA4	; 164
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	80 81       	ld	r24, Z
    2fb8:	91 81       	ldd	r25, Z+1	; 0x01
    2fba:	2e 81       	ldd	r18, Y+6	; 0x06
    2fbc:	3f 81       	ldd	r19, Y+7	; 0x07
    2fbe:	48 85       	ldd	r20, Y+8	; 0x08
    2fc0:	59 85       	ldd	r21, Y+9	; 0x09
    2fc2:	ba 01       	movw	r22, r20
    2fc4:	a9 01       	movw	r20, r18
    2fc6:	0e 94 46 09 	call	0x128c	; 0x128c <StackNum_vPushNum>
    2fca:	3e c0       	rjmp	.+124    	; 0x3048 <Calculate+0x196>
			}
		}
		else if(Local_u8Op=='*')
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	8a 32       	cpi	r24, 0x2A	; 42
    2fd0:	59 f5       	brne	.+86     	; 0x3028 <Calculate+0x176>
		{
			Local_f32Current=StackNum_u8Pop(Ptr_sNumbers);
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	e4 5a       	subi	r30, 0xA4	; 164
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	80 81       	ld	r24, Z
    2fda:	91 81       	ldd	r25, Z+1	; 0x01
    2fdc:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <StackNum_u8Pop>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	8e 83       	std	Y+6, r24	; 0x06
    2fe6:	9f 83       	std	Y+7, r25	; 0x07
    2fe8:	a8 87       	std	Y+8, r26	; 0x08
    2fea:	b9 87       	std	Y+9, r27	; 0x09
			Local_f32Current=Local_f32Previous*Local_f32Current;
    2fec:	6e 81       	ldd	r22, Y+6	; 0x06
    2fee:	7f 81       	ldd	r23, Y+7	; 0x07
    2ff0:	88 85       	ldd	r24, Y+8	; 0x08
    2ff2:	99 85       	ldd	r25, Y+9	; 0x09
    2ff4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ff6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ff8:	4c 81       	ldd	r20, Y+4	; 0x04
    2ffa:	5d 81       	ldd	r21, Y+5	; 0x05
    2ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	8e 83       	std	Y+6, r24	; 0x06
    3006:	9f 83       	std	Y+7, r25	; 0x07
    3008:	a8 87       	std	Y+8, r26	; 0x08
    300a:	b9 87       	std	Y+9, r27	; 0x09
			StackNum_vPushNum(Ptr_sNumbers, Local_f32Current);
    300c:	fe 01       	movw	r30, r28
    300e:	e4 5a       	subi	r30, 0xA4	; 164
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	80 81       	ld	r24, Z
    3014:	91 81       	ldd	r25, Z+1	; 0x01
    3016:	2e 81       	ldd	r18, Y+6	; 0x06
    3018:	3f 81       	ldd	r19, Y+7	; 0x07
    301a:	48 85       	ldd	r20, Y+8	; 0x08
    301c:	59 85       	ldd	r21, Y+9	; 0x09
    301e:	ba 01       	movw	r22, r20
    3020:	a9 01       	movw	r20, r18
    3022:	0e 94 46 09 	call	0x128c	; 0x128c <StackNum_vPushNum>
    3026:	10 c0       	rjmp	.+32     	; 0x3048 <Calculate+0x196>
		}
		else
		{
			StackChar_vPushOp(&Local_qOp, Local_u8Op);
    3028:	ce 01       	movw	r24, r28
    302a:	85 5b       	subi	r24, 0xB5	; 181
    302c:	9f 4f       	sbci	r25, 0xFF	; 255
    302e:	69 81       	ldd	r22, Y+1	; 0x01
    3030:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <StackChar_vPushOp>
			StackNum_vPushNum(&Local_qNumbers, Local_f32Previous);
    3034:	ce 01       	movw	r24, r28
    3036:	0a 96       	adiw	r24, 0x0a	; 10
    3038:	2a 81       	ldd	r18, Y+2	; 0x02
    303a:	3b 81       	ldd	r19, Y+3	; 0x03
    303c:	4c 81       	ldd	r20, Y+4	; 0x04
    303e:	5d 81       	ldd	r21, Y+5	; 0x05
    3040:	ba 01       	movw	r22, r20
    3042:	a9 01       	movw	r20, r18
    3044:	0e 94 46 09 	call	0x128c	; 0x128c <StackNum_vPushNum>
	StackNum_vInit(&Local_qNumbers);
	f32 Local_f32Current,Local_f32Previous;
	uint8 Local_u8Op;
	ReverseStackNum(Ptr_sNumbers);
	ReverseStackOp(Ptr_sOp);
	while(!Stack_u8IsEmptyOp(Ptr_sOp))
    3048:	fe 01       	movw	r30, r28
    304a:	e2 5a       	subi	r30, 0xA2	; 162
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	80 81       	ld	r24, Z
    3050:	91 81       	ldd	r25, Z+1	; 0x01
    3052:	0e 94 b8 09 	call	0x1370	; 0x1370 <Stack_u8IsEmptyOp>
    3056:	88 23       	and	r24, r24
    3058:	09 f4       	brne	.+2      	; 0x305c <Calculate+0x1aa>
    305a:	5a cf       	rjmp	.-332    	; 0x2f10 <Calculate+0x5e>
		{
			StackChar_vPushOp(&Local_qOp, Local_u8Op);
			StackNum_vPushNum(&Local_qNumbers, Local_f32Previous);
		}
	}
	StackNum_vPushNum(&Local_qNumbers, StackNum_u8Pop(Ptr_sNumbers));
    305c:	fe 01       	movw	r30, r28
    305e:	e4 5a       	subi	r30, 0xA4	; 164
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	80 81       	ld	r24, Z
    3064:	91 81       	ldd	r25, Z+1	; 0x01
    3066:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <StackNum_u8Pop>
    306a:	9b 01       	movw	r18, r22
    306c:	ac 01       	movw	r20, r24
    306e:	ce 01       	movw	r24, r28
    3070:	0a 96       	adiw	r24, 0x0a	; 10
    3072:	ba 01       	movw	r22, r20
    3074:	a9 01       	movw	r20, r18
    3076:	0e 94 46 09 	call	0x128c	; 0x128c <StackNum_vPushNum>
	ReverseStackNum(&Local_qNumbers);
    307a:	ce 01       	movw	r24, r28
    307c:	0a 96       	adiw	r24, 0x0a	; 10
    307e:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <ReverseStackNum>
	ReverseStackOp(&Local_qOp);
    3082:	ce 01       	movw	r24, r28
    3084:	85 5b       	subi	r24, 0xB5	; 181
    3086:	9f 4f       	sbci	r25, 0xFF	; 255
    3088:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <ReverseStackOp>
    308c:	55 c0       	rjmp	.+170    	; 0x3138 <Calculate+0x286>
	while(!Stack_u8IsEmptyOp(&Local_qOp))
	{
		Local_u8Op=StackChar_u8Pop(&Local_qOp);
    308e:	ce 01       	movw	r24, r28
    3090:	85 5b       	subi	r24, 0xB5	; 181
    3092:	9f 4f       	sbci	r25, 0xFF	; 255
    3094:	0e 94 07 0a 	call	0x140e	; 0x140e <StackChar_u8Pop>
    3098:	89 83       	std	Y+1, r24	; 0x01
		Local_f32Previous=StackNum_u8Pop(&Local_qNumbers);
    309a:	ce 01       	movw	r24, r28
    309c:	0a 96       	adiw	r24, 0x0a	; 10
    309e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <StackNum_u8Pop>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	8a 83       	std	Y+2, r24	; 0x02
    30a8:	9b 83       	std	Y+3, r25	; 0x03
    30aa:	ac 83       	std	Y+4, r26	; 0x04
    30ac:	bd 83       	std	Y+5, r27	; 0x05
		Local_f32Current=StackNum_u8Pop(&Local_qNumbers);
    30ae:	ce 01       	movw	r24, r28
    30b0:	0a 96       	adiw	r24, 0x0a	; 10
    30b2:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <StackNum_u8Pop>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	8e 83       	std	Y+6, r24	; 0x06
    30bc:	9f 83       	std	Y+7, r25	; 0x07
    30be:	a8 87       	std	Y+8, r26	; 0x08
    30c0:	b9 87       	std	Y+9, r27	; 0x09
		if(Local_u8Op=='+')
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	8b 32       	cpi	r24, 0x2B	; 43
    30c6:	d9 f4       	brne	.+54     	; 0x30fe <Calculate+0x24c>
		{
			Local_f32Current=Local_f32Current+Local_f32Previous;
    30c8:	6e 81       	ldd	r22, Y+6	; 0x06
    30ca:	7f 81       	ldd	r23, Y+7	; 0x07
    30cc:	88 85       	ldd	r24, Y+8	; 0x08
    30ce:	99 85       	ldd	r25, Y+9	; 0x09
    30d0:	2a 81       	ldd	r18, Y+2	; 0x02
    30d2:	3b 81       	ldd	r19, Y+3	; 0x03
    30d4:	4c 81       	ldd	r20, Y+4	; 0x04
    30d6:	5d 81       	ldd	r21, Y+5	; 0x05
    30d8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	8e 83       	std	Y+6, r24	; 0x06
    30e2:	9f 83       	std	Y+7, r25	; 0x07
    30e4:	a8 87       	std	Y+8, r26	; 0x08
    30e6:	b9 87       	std	Y+9, r27	; 0x09
			StackNum_vPushNum(&Local_qNumbers, Local_f32Current);
    30e8:	ce 01       	movw	r24, r28
    30ea:	0a 96       	adiw	r24, 0x0a	; 10
    30ec:	2e 81       	ldd	r18, Y+6	; 0x06
    30ee:	3f 81       	ldd	r19, Y+7	; 0x07
    30f0:	48 85       	ldd	r20, Y+8	; 0x08
    30f2:	59 85       	ldd	r21, Y+9	; 0x09
    30f4:	ba 01       	movw	r22, r20
    30f6:	a9 01       	movw	r20, r18
    30f8:	0e 94 46 09 	call	0x128c	; 0x128c <StackNum_vPushNum>
    30fc:	1d c0       	rjmp	.+58     	; 0x3138 <Calculate+0x286>
		}
		else if(Local_u8Op=='-')
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	8d 32       	cpi	r24, 0x2D	; 45
    3102:	d1 f4       	brne	.+52     	; 0x3138 <Calculate+0x286>
		{
			Local_f32Current=Local_f32Previous-Local_f32Current;
    3104:	6a 81       	ldd	r22, Y+2	; 0x02
    3106:	7b 81       	ldd	r23, Y+3	; 0x03
    3108:	8c 81       	ldd	r24, Y+4	; 0x04
    310a:	9d 81       	ldd	r25, Y+5	; 0x05
    310c:	2e 81       	ldd	r18, Y+6	; 0x06
    310e:	3f 81       	ldd	r19, Y+7	; 0x07
    3110:	48 85       	ldd	r20, Y+8	; 0x08
    3112:	59 85       	ldd	r21, Y+9	; 0x09
    3114:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	8e 83       	std	Y+6, r24	; 0x06
    311e:	9f 83       	std	Y+7, r25	; 0x07
    3120:	a8 87       	std	Y+8, r26	; 0x08
    3122:	b9 87       	std	Y+9, r27	; 0x09
			StackNum_vPushNum(&Local_qNumbers, Local_f32Current);
    3124:	ce 01       	movw	r24, r28
    3126:	0a 96       	adiw	r24, 0x0a	; 10
    3128:	2e 81       	ldd	r18, Y+6	; 0x06
    312a:	3f 81       	ldd	r19, Y+7	; 0x07
    312c:	48 85       	ldd	r20, Y+8	; 0x08
    312e:	59 85       	ldd	r21, Y+9	; 0x09
    3130:	ba 01       	movw	r22, r20
    3132:	a9 01       	movw	r20, r18
    3134:	0e 94 46 09 	call	0x128c	; 0x128c <StackNum_vPushNum>
		}
	}
	StackNum_vPushNum(&Local_qNumbers, StackNum_u8Pop(Ptr_sNumbers));
	ReverseStackNum(&Local_qNumbers);
	ReverseStackOp(&Local_qOp);
	while(!Stack_u8IsEmptyOp(&Local_qOp))
    3138:	ce 01       	movw	r24, r28
    313a:	85 5b       	subi	r24, 0xB5	; 181
    313c:	9f 4f       	sbci	r25, 0xFF	; 255
    313e:	0e 94 b8 09 	call	0x1370	; 0x1370 <Stack_u8IsEmptyOp>
    3142:	88 23       	and	r24, r24
    3144:	09 f4       	brne	.+2      	; 0x3148 <Calculate+0x296>
    3146:	a3 cf       	rjmp	.-186    	; 0x308e <Calculate+0x1dc>
		{
			Local_f32Current=Local_f32Previous-Local_f32Current;
			StackNum_vPushNum(&Local_qNumbers, Local_f32Current);
		}
	}
	return StackNum_u8Pop(&Local_qNumbers);
    3148:	ce 01       	movw	r24, r28
    314a:	0a 96       	adiw	r24, 0x0a	; 10
    314c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <StackNum_u8Pop>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	a4 96       	adiw	r28, 0x24	; 36
    3156:	8c af       	std	Y+60, r24	; 0x3c
    3158:	9d af       	std	Y+61, r25	; 0x3d
    315a:	ae af       	std	Y+62, r26	; 0x3e
    315c:	bf af       	std	Y+63, r27	; 0x3f
    315e:	a4 97       	sbiw	r28, 0x24	; 36
    3160:	a4 96       	adiw	r28, 0x24	; 36
    3162:	8c ad       	ldd	r24, Y+60	; 0x3c
    3164:	9d ad       	ldd	r25, Y+61	; 0x3d
    3166:	ae ad       	ldd	r26, Y+62	; 0x3e
    3168:	bf ad       	ldd	r27, Y+63	; 0x3f
    316a:	a4 97       	sbiw	r28, 0x24	; 36
}
    316c:	bc 01       	movw	r22, r24
    316e:	cd 01       	movw	r24, r26
    3170:	cd 59       	subi	r28, 0x9D	; 157
    3172:	df 4f       	sbci	r29, 0xFF	; 255
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	cd bf       	out	0x3d, r28	; 61
    317e:	cf 91       	pop	r28
    3180:	df 91       	pop	r29
    3182:	08 95       	ret

00003184 <SimpleCalculator>:
void SimpleCalculator()
{
    3184:	df 93       	push	r29
    3186:	cf 93       	push	r28
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	c7 55       	subi	r28, 0x57	; 87
    318e:	d0 40       	sbci	r29, 0x00	; 0
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	f8 94       	cli
    3194:	de bf       	out	0x3e, r29	; 62
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	cd bf       	out	0x3d, r28	; 61
	CLCD_vClear();
    319a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    319e:	8f ef       	ldi	r24, 0xFF	; 255
    31a0:	8d 83       	std	Y+5, r24	; 0x05
	StackF32 Local_sNumbers;
	StackUint8 Local_sOperators;
	StackChar_vInit(&Local_sOperators);
    31a2:	ce 01       	movw	r24, r28
    31a4:	89 5b       	subi	r24, 0xB9	; 185
    31a6:	9f 4f       	sbci	r25, 0xFF	; 255
    31a8:	0e 94 36 09 	call	0x126c	; 0x126c <StackChar_vInit>
	StackNum_vInit(&Local_sNumbers);
    31ac:	ce 01       	movw	r24, r28
    31ae:	06 96       	adiw	r24, 0x06	; 6
    31b0:	0e 94 26 09 	call	0x124c	; 0x124c <StackNum_vInit>
	uint32 Local_u32Number=0;
    31b4:	19 82       	std	Y+1, r1	; 0x01
    31b6:	1a 82       	std	Y+2, r1	; 0x02
    31b8:	1b 82       	std	Y+3, r1	; 0x03
    31ba:	1c 82       	std	Y+4, r1	; 0x04
    31bc:	b8 c0       	rjmp	.+368    	; 0x332e <SimpleCalculator+0x1aa>
	while((1)&&(Glob_u8Reset==0))
	{
		while((Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)&&(Glob_u8Reset==0))
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
    31be:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    31c2:	8d 83       	std	Y+5, r24	; 0x05
	StackChar_vInit(&Local_sOperators);
	StackNum_vInit(&Local_sNumbers);
	uint32 Local_u32Number=0;
	while((1)&&(Glob_u8Reset==0))
	{
		while((Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)&&(Glob_u8Reset==0))
    31c4:	8d 81       	ldd	r24, Y+5	; 0x05
    31c6:	8f 3f       	cpi	r24, 0xFF	; 255
    31c8:	21 f4       	brne	.+8      	; 0x31d2 <SimpleCalculator+0x4e>
    31ca:	80 91 1d 02 	lds	r24, 0x021D
    31ce:	88 23       	and	r24, r24
    31d0:	b1 f3       	breq	.-20     	; 0x31be <SimpleCalculator+0x3a>
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
		}
		if(Local_u8PressedButton=='A')
    31d2:	8d 81       	ldd	r24, Y+5	; 0x05
    31d4:	81 34       	cpi	r24, 0x41	; 65
    31d6:	71 f4       	brne	.+28     	; 0x31f4 <SimpleCalculator+0x70>
		{
			StackChar_vInit(&Local_sOperators);
    31d8:	ce 01       	movw	r24, r28
    31da:	89 5b       	subi	r24, 0xB9	; 185
    31dc:	9f 4f       	sbci	r25, 0xFF	; 255
    31de:	0e 94 36 09 	call	0x126c	; 0x126c <StackChar_vInit>
			StackNum_vInit(&Local_sNumbers);
    31e2:	ce 01       	movw	r24, r28
    31e4:	06 96       	adiw	r24, 0x06	; 6
    31e6:	0e 94 26 09 	call	0x124c	; 0x124c <StackNum_vInit>
			CLCD_vClear();
    31ea:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    31ee:	8f ef       	ldi	r24, 0xFF	; 255
    31f0:	8d 83       	std	Y+5, r24	; 0x05
    31f2:	9d c0       	rjmp	.+314    	; 0x332e <SimpleCalculator+0x1aa>
		}
		else if((Local_u8PressedButton=='+')||(Local_u8PressedButton=='-')||(Local_u8PressedButton=='*')||(Local_u8PressedButton=='/'))
    31f4:	8d 81       	ldd	r24, Y+5	; 0x05
    31f6:	8b 32       	cpi	r24, 0x2B	; 43
    31f8:	49 f0       	breq	.+18     	; 0x320c <SimpleCalculator+0x88>
    31fa:	8d 81       	ldd	r24, Y+5	; 0x05
    31fc:	8d 32       	cpi	r24, 0x2D	; 45
    31fe:	31 f0       	breq	.+12     	; 0x320c <SimpleCalculator+0x88>
    3200:	8d 81       	ldd	r24, Y+5	; 0x05
    3202:	8a 32       	cpi	r24, 0x2A	; 42
    3204:	19 f0       	breq	.+6      	; 0x320c <SimpleCalculator+0x88>
    3206:	8d 81       	ldd	r24, Y+5	; 0x05
    3208:	8f 32       	cpi	r24, 0x2F	; 47
    320a:	f1 f4       	brne	.+60     	; 0x3248 <SimpleCalculator+0xc4>
		{
			CLCD_vSendData(Local_u8PressedButton);
    320c:	8d 81       	ldd	r24, Y+5	; 0x05
    320e:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
			StackNum_vPushNum(&Local_sNumbers, (f32)Local_u32Number);
    3212:	69 81       	ldd	r22, Y+1	; 0x01
    3214:	7a 81       	ldd	r23, Y+2	; 0x02
    3216:	8b 81       	ldd	r24, Y+3	; 0x03
    3218:	9c 81       	ldd	r25, Y+4	; 0x04
    321a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    321e:	9b 01       	movw	r18, r22
    3220:	ac 01       	movw	r20, r24
    3222:	ce 01       	movw	r24, r28
    3224:	06 96       	adiw	r24, 0x06	; 6
    3226:	ba 01       	movw	r22, r20
    3228:	a9 01       	movw	r20, r18
    322a:	0e 94 46 09 	call	0x128c	; 0x128c <StackNum_vPushNum>
			StackChar_vPushOp(&Local_sOperators, Local_u8PressedButton);
    322e:	ce 01       	movw	r24, r28
    3230:	89 5b       	subi	r24, 0xB9	; 185
    3232:	9f 4f       	sbci	r25, 0xFF	; 255
    3234:	6d 81       	ldd	r22, Y+5	; 0x05
    3236:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <StackChar_vPushOp>
			Local_u32Number=0;
    323a:	19 82       	std	Y+1, r1	; 0x01
    323c:	1a 82       	std	Y+2, r1	; 0x02
    323e:	1b 82       	std	Y+3, r1	; 0x03
    3240:	1c 82       	std	Y+4, r1	; 0x04
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3242:	8f ef       	ldi	r24, 0xFF	; 255
    3244:	8d 83       	std	Y+5, r24	; 0x05
    3246:	73 c0       	rjmp	.+230    	; 0x332e <SimpleCalculator+0x1aa>
		}
		else if((Local_u8PressedButton>='0')&&(Local_u8PressedButton<='9'))
    3248:	8d 81       	ldd	r24, Y+5	; 0x05
    324a:	80 33       	cpi	r24, 0x30	; 48
    324c:	38 f1       	brcs	.+78     	; 0x329c <SimpleCalculator+0x118>
    324e:	8d 81       	ldd	r24, Y+5	; 0x05
    3250:	8a 33       	cpi	r24, 0x3A	; 58
    3252:	20 f5       	brcc	.+72     	; 0x329c <SimpleCalculator+0x118>
		{
			CLCD_vSendData(Local_u8PressedButton);
    3254:	8d 81       	ldd	r24, Y+5	; 0x05
    3256:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
			Local_u32Number=Local_u32Number*10+(Local_u8PressedButton-'0');
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	9a 81       	ldd	r25, Y+2	; 0x02
    325e:	ab 81       	ldd	r26, Y+3	; 0x03
    3260:	bc 81       	ldd	r27, Y+4	; 0x04
    3262:	2a e0       	ldi	r18, 0x0A	; 10
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e0       	ldi	r20, 0x00	; 0
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	bc 01       	movw	r22, r24
    326c:	cd 01       	movw	r24, r26
    326e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsi3>
    3272:	9b 01       	movw	r18, r22
    3274:	ac 01       	movw	r20, r24
    3276:	8d 81       	ldd	r24, Y+5	; 0x05
    3278:	88 2f       	mov	r24, r24
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	c0 97       	sbiw	r24, 0x30	; 48
    327e:	aa 27       	eor	r26, r26
    3280:	97 fd       	sbrc	r25, 7
    3282:	a0 95       	com	r26
    3284:	ba 2f       	mov	r27, r26
    3286:	82 0f       	add	r24, r18
    3288:	93 1f       	adc	r25, r19
    328a:	a4 1f       	adc	r26, r20
    328c:	b5 1f       	adc	r27, r21
    328e:	89 83       	std	Y+1, r24	; 0x01
    3290:	9a 83       	std	Y+2, r25	; 0x02
    3292:	ab 83       	std	Y+3, r26	; 0x03
    3294:	bc 83       	std	Y+4, r27	; 0x04
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3296:	8f ef       	ldi	r24, 0xFF	; 255
    3298:	8d 83       	std	Y+5, r24	; 0x05
    329a:	49 c0       	rjmp	.+146    	; 0x332e <SimpleCalculator+0x1aa>
		}
		else if(Local_u8PressedButton=='=')
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	8d 33       	cpi	r24, 0x3D	; 61
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <SimpleCalculator+0x120>
    32a2:	45 c0       	rjmp	.+138    	; 0x332e <SimpleCalculator+0x1aa>
		{
			CLCD_vSendPosition(0, 1);
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	61 e0       	ldi	r22, 0x01	; 1
    32a8:	0e 94 c4 0c 	call	0x1988	; 0x1988 <CLCD_vSendPosition>
			CLCD_vSendData(Local_u8PressedButton);
    32ac:	8d 81       	ldd	r24, Y+5	; 0x05
    32ae:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
			StackNum_vPushNum(&Local_sNumbers, (f32)Local_u32Number);
    32b2:	69 81       	ldd	r22, Y+1	; 0x01
    32b4:	7a 81       	ldd	r23, Y+2	; 0x02
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ba:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    32be:	9b 01       	movw	r18, r22
    32c0:	ac 01       	movw	r20, r24
    32c2:	ce 01       	movw	r24, r28
    32c4:	06 96       	adiw	r24, 0x06	; 6
    32c6:	ba 01       	movw	r22, r20
    32c8:	a9 01       	movw	r20, r18
    32ca:	0e 94 46 09 	call	0x128c	; 0x128c <StackNum_vPushNum>
			CLCD_vSendNumber((sint32)(Calculate(&Local_sNumbers, &Local_sOperators)));
    32ce:	ce 01       	movw	r24, r28
    32d0:	06 96       	adiw	r24, 0x06	; 6
    32d2:	9e 01       	movw	r18, r28
    32d4:	29 5b       	subi	r18, 0xB9	; 185
    32d6:	3f 4f       	sbci	r19, 0xFF	; 255
    32d8:	b9 01       	movw	r22, r18
    32da:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Calculate>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	bc 01       	movw	r22, r24
    32f0:	cd 01       	movw	r24, r26
    32f2:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <CLCD_vSendNumber>
			StackChar_vInit(&Local_sOperators);
    32f6:	ce 01       	movw	r24, r28
    32f8:	89 5b       	subi	r24, 0xB9	; 185
    32fa:	9f 4f       	sbci	r25, 0xFF	; 255
    32fc:	0e 94 36 09 	call	0x126c	; 0x126c <StackChar_vInit>
			StackNum_vInit(&Local_sNumbers);
    3300:	ce 01       	movw	r24, r28
    3302:	06 96       	adiw	r24, 0x06	; 6
    3304:	0e 94 26 09 	call	0x124c	; 0x124c <StackNum_vInit>
			Local_u32Number=0;
    3308:	19 82       	std	Y+1, r1	; 0x01
    330a:	1a 82       	std	Y+2, r1	; 0x02
    330c:	1b 82       	std	Y+3, r1	; 0x03
    330e:	1c 82       	std	Y+4, r1	; 0x04
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3310:	8f ef       	ldi	r24, 0xFF	; 255
    3312:	8d 83       	std	Y+5, r24	; 0x05
    3314:	03 c0       	rjmp	.+6      	; 0x331c <SimpleCalculator+0x198>
			while((Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)&&(Glob_u8Reset==0))
			{
				Local_u8PressedButton=KPD_u8GetPressedButton();
    3316:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    331a:	8d 83       	std	Y+5, r24	; 0x05
			CLCD_vSendNumber((sint32)(Calculate(&Local_sNumbers, &Local_sOperators)));
			StackChar_vInit(&Local_sOperators);
			StackNum_vInit(&Local_sNumbers);
			Local_u32Number=0;
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
			while((Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)&&(Glob_u8Reset==0))
    331c:	8d 81       	ldd	r24, Y+5	; 0x05
    331e:	8f 3f       	cpi	r24, 0xFF	; 255
    3320:	21 f4       	brne	.+8      	; 0x332a <SimpleCalculator+0x1a6>
    3322:	80 91 1d 02 	lds	r24, 0x021D
    3326:	88 23       	and	r24, r24
    3328:	b1 f3       	breq	.-20     	; 0x3316 <SimpleCalculator+0x192>
			{
				Local_u8PressedButton=KPD_u8GetPressedButton();
			}
			CLCD_vClear();
    332a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
	StackF32 Local_sNumbers;
	StackUint8 Local_sOperators;
	StackChar_vInit(&Local_sOperators);
	StackNum_vInit(&Local_sNumbers);
	uint32 Local_u32Number=0;
	while((1)&&(Glob_u8Reset==0))
    332e:	80 91 1d 02 	lds	r24, 0x021D
    3332:	88 23       	and	r24, r24
    3334:	09 f4       	brne	.+2      	; 0x3338 <SimpleCalculator+0x1b4>
    3336:	46 cf       	rjmp	.-372    	; 0x31c4 <SimpleCalculator+0x40>
				Local_u8PressedButton=KPD_u8GetPressedButton();
			}
			CLCD_vClear();
		}
	}
	if(Glob_u8Reset==1)
    3338:	80 91 1d 02 	lds	r24, 0x021D
    333c:	81 30       	cpi	r24, 0x01	; 1
    333e:	11 f4       	brne	.+4      	; 0x3344 <SimpleCalculator+0x1c0>
	{
		Glob_u8Reset=0;
    3340:	10 92 1d 02 	sts	0x021D, r1
	}
	return;
}
    3344:	c9 5a       	subi	r28, 0xA9	; 169
    3346:	df 4f       	sbci	r29, 0xFF	; 255
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	cd bf       	out	0x3d, r28	; 61
    3352:	cf 91       	pop	r28
    3354:	df 91       	pop	r29
    3356:	08 95       	ret

00003358 <PreCalculator>:

void PreCalculator()
{
    3358:	df 93       	push	r29
    335a:	cf 93       	push	r28
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	c9 55       	subi	r28, 0x59	; 89
    3362:	d0 40       	sbci	r29, 0x00	; 0
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
	StackUint8 Local_sOperators;
	StackChar_vInit(&Local_sOperators);
    336e:	ce 01       	movw	r24, r28
    3370:	08 96       	adiw	r24, 0x08	; 8
    3372:	0e 94 36 09 	call	0x126c	; 0x126c <StackChar_vInit>
	StackF32 Local_sNumbers;
	StackNum_vInit(&Local_sNumbers);
    3376:	ce 01       	movw	r24, r28
    3378:	49 96       	adiw	r24, 0x19	; 25
    337a:	0e 94 26 09 	call	0x124c	; 0x124c <StackNum_vInit>
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    337e:	8f ef       	ldi	r24, 0xFF	; 255
    3380:	8f 83       	std	Y+7, r24	; 0x07
	uint8 Local_u8Counter=0;
    3382:	1e 82       	std	Y+6, r1	; 0x06
    3384:	d3 c0       	rjmp	.+422    	; 0x352c <PreCalculator+0x1d4>
	while(Glob_u8Reset==0)
	{
		CLCD_vClear();
    3386:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
		CLCD_vSendString("Enter Operations");
    338a:	80 e6       	ldi	r24, 0x60	; 96
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
		CLCD_vSendPosition(0, 1);
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	61 e0       	ldi	r22, 0x01	; 1
    3396:	0e 94 c4 0c 	call	0x1988	; 0x1988 <CLCD_vSendPosition>
		Local_u8Counter=0;
    339a:	1e 82       	std	Y+6, r1	; 0x06
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    339c:	8f ef       	ldi	r24, 0xFF	; 255
    339e:	8f 83       	std	Y+7, r24	; 0x07
    33a0:	26 c0       	rjmp	.+76     	; 0x33ee <PreCalculator+0x96>
		while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
		{
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    33a2:	8f ef       	ldi	r24, 0xFF	; 255
    33a4:	8f 83       	std	Y+7, r24	; 0x07
    33a6:	03 c0       	rjmp	.+6      	; 0x33ae <PreCalculator+0x56>
			while((Glob_u8Reset==0)&&(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON))
			{
				Local_u8PressedButton=KPD_u8GetPressedButton();
    33a8:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    33ac:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8Counter=0;
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
		while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
		{
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
			while((Glob_u8Reset==0)&&(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON))
    33ae:	80 91 1d 02 	lds	r24, 0x021D
    33b2:	88 23       	and	r24, r24
    33b4:	19 f4       	brne	.+6      	; 0x33bc <PreCalculator+0x64>
    33b6:	8f 81       	ldd	r24, Y+7	; 0x07
    33b8:	8f 3f       	cpi	r24, 0xFF	; 255
    33ba:	b1 f3       	breq	.-20     	; 0x33a8 <PreCalculator+0x50>
			{
				Local_u8PressedButton=KPD_u8GetPressedButton();
			}
			if((Local_u8PressedButton=='+')||(Local_u8PressedButton=='-')||(Local_u8PressedButton=='*')||(Local_u8PressedButton=='/'))
    33bc:	8f 81       	ldd	r24, Y+7	; 0x07
    33be:	8b 32       	cpi	r24, 0x2B	; 43
    33c0:	49 f0       	breq	.+18     	; 0x33d4 <PreCalculator+0x7c>
    33c2:	8f 81       	ldd	r24, Y+7	; 0x07
    33c4:	8d 32       	cpi	r24, 0x2D	; 45
    33c6:	31 f0       	breq	.+12     	; 0x33d4 <PreCalculator+0x7c>
    33c8:	8f 81       	ldd	r24, Y+7	; 0x07
    33ca:	8a 32       	cpi	r24, 0x2A	; 42
    33cc:	19 f0       	breq	.+6      	; 0x33d4 <PreCalculator+0x7c>
    33ce:	8f 81       	ldd	r24, Y+7	; 0x07
    33d0:	8f 32       	cpi	r24, 0x2F	; 47
    33d2:	69 f4       	brne	.+26     	; 0x33ee <PreCalculator+0x96>
			{
				CLCD_vSendData(Local_u8PressedButton);
    33d4:	8f 81       	ldd	r24, Y+7	; 0x07
    33d6:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
				StackChar_vPushOp(&Local_sOperators, Local_u8PressedButton);
    33da:	ce 01       	movw	r24, r28
    33dc:	08 96       	adiw	r24, 0x08	; 8
    33de:	6f 81       	ldd	r22, Y+7	; 0x07
    33e0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <StackChar_vPushOp>
				Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    33e4:	8f ef       	ldi	r24, 0xFF	; 255
    33e6:	8f 83       	std	Y+7, r24	; 0x07
				Local_u8Counter++;
    33e8:	8e 81       	ldd	r24, Y+6	; 0x06
    33ea:	8f 5f       	subi	r24, 0xFF	; 255
    33ec:	8e 83       	std	Y+6, r24	; 0x06
		CLCD_vClear();
		CLCD_vSendString("Enter Operations");
		CLCD_vSendPosition(0, 1);
		Local_u8Counter=0;
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
		while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
    33ee:	80 91 1d 02 	lds	r24, 0x021D
    33f2:	88 23       	and	r24, r24
    33f4:	19 f4       	brne	.+6      	; 0x33fc <PreCalculator+0xa4>
    33f6:	8f 81       	ldd	r24, Y+7	; 0x07
    33f8:	8d 33       	cpi	r24, 0x3D	; 61
    33fa:	99 f6       	brne	.-90     	; 0x33a2 <PreCalculator+0x4a>
				StackChar_vPushOp(&Local_sOperators, Local_u8PressedButton);
				Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
				Local_u8Counter++;
			}
		}
		uint32 Local_u32Number=0;
    33fc:	1a 82       	std	Y+2, r1	; 0x02
    33fe:	1b 82       	std	Y+3, r1	; 0x03
    3400:	1c 82       	std	Y+4, r1	; 0x04
    3402:	1d 82       	std	Y+5, r1	; 0x05
		for(uint8 Local_u8Iterator=1;Local_u8Iterator<=Local_u8Counter+1;Local_u8Iterator++)
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	89 83       	std	Y+1, r24	; 0x01
    3408:	63 c0       	rjmp	.+198    	; 0x34d0 <PreCalculator+0x178>
		{
			CLCD_vClear();
    340a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
			CLCD_vSendString("Enter Number");
    340e:	81 e7       	ldi	r24, 0x71	; 113
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
			CLCD_vSendData(Local_u8Iterator+'0');
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	80 5d       	subi	r24, 0xD0	; 208
    341a:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
			CLCD_vSendPosition(0, 1);
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	61 e0       	ldi	r22, 0x01	; 1
    3422:	0e 94 c4 0c 	call	0x1988	; 0x1988 <CLCD_vSendPosition>
			Local_u32Number=0;
    3426:	1a 82       	std	Y+2, r1	; 0x02
    3428:	1b 82       	std	Y+3, r1	; 0x03
    342a:	1c 82       	std	Y+4, r1	; 0x04
    342c:	1d 82       	std	Y+5, r1	; 0x05
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    342e:	8f ef       	ldi	r24, 0xFF	; 255
    3430:	8f 83       	std	Y+7, r24	; 0x07
    3432:	36 c0       	rjmp	.+108    	; 0x34a0 <PreCalculator+0x148>
			while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
			{
				 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3434:	8f ef       	ldi	r24, 0xFF	; 255
    3436:	8f 83       	std	Y+7, r24	; 0x07
    3438:	03 c0       	rjmp	.+6      	; 0x3440 <PreCalculator+0xe8>
				while((Glob_u8Reset==0)&&(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON))
				{
					Local_u8PressedButton=KPD_u8GetPressedButton();
    343a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    343e:	8f 83       	std	Y+7, r24	; 0x07
			Local_u32Number=0;
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
			while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
			{
				 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
				while((Glob_u8Reset==0)&&(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON))
    3440:	80 91 1d 02 	lds	r24, 0x021D
    3444:	88 23       	and	r24, r24
    3446:	19 f4       	brne	.+6      	; 0x344e <PreCalculator+0xf6>
    3448:	8f 81       	ldd	r24, Y+7	; 0x07
    344a:	8f 3f       	cpi	r24, 0xFF	; 255
    344c:	b1 f3       	breq	.-20     	; 0x343a <PreCalculator+0xe2>
				{
					Local_u8PressedButton=KPD_u8GetPressedButton();
				}
				if((Local_u8PressedButton>='0')&&(Local_u8PressedButton<='9'))
    344e:	8f 81       	ldd	r24, Y+7	; 0x07
    3450:	80 33       	cpi	r24, 0x30	; 48
    3452:	30 f1       	brcs	.+76     	; 0x34a0 <PreCalculator+0x148>
    3454:	8f 81       	ldd	r24, Y+7	; 0x07
    3456:	8a 33       	cpi	r24, 0x3A	; 58
    3458:	18 f5       	brcc	.+70     	; 0x34a0 <PreCalculator+0x148>
				{
					CLCD_vSendData(Local_u8PressedButton);
    345a:	8f 81       	ldd	r24, Y+7	; 0x07
    345c:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
					Local_u32Number=Local_u32Number*10+(Local_u8PressedButton-'0');
    3460:	8a 81       	ldd	r24, Y+2	; 0x02
    3462:	9b 81       	ldd	r25, Y+3	; 0x03
    3464:	ac 81       	ldd	r26, Y+4	; 0x04
    3466:	bd 81       	ldd	r27, Y+5	; 0x05
    3468:	2a e0       	ldi	r18, 0x0A	; 10
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e0       	ldi	r20, 0x00	; 0
    346e:	50 e0       	ldi	r21, 0x00	; 0
    3470:	bc 01       	movw	r22, r24
    3472:	cd 01       	movw	r24, r26
    3474:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsi3>
    3478:	9b 01       	movw	r18, r22
    347a:	ac 01       	movw	r20, r24
    347c:	8f 81       	ldd	r24, Y+7	; 0x07
    347e:	88 2f       	mov	r24, r24
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	c0 97       	sbiw	r24, 0x30	; 48
    3484:	aa 27       	eor	r26, r26
    3486:	97 fd       	sbrc	r25, 7
    3488:	a0 95       	com	r26
    348a:	ba 2f       	mov	r27, r26
    348c:	82 0f       	add	r24, r18
    348e:	93 1f       	adc	r25, r19
    3490:	a4 1f       	adc	r26, r20
    3492:	b5 1f       	adc	r27, r21
    3494:	8a 83       	std	Y+2, r24	; 0x02
    3496:	9b 83       	std	Y+3, r25	; 0x03
    3498:	ac 83       	std	Y+4, r26	; 0x04
    349a:	bd 83       	std	Y+5, r27	; 0x05
					Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    349c:	8f ef       	ldi	r24, 0xFF	; 255
    349e:	8f 83       	std	Y+7, r24	; 0x07
			CLCD_vSendString("Enter Number");
			CLCD_vSendData(Local_u8Iterator+'0');
			CLCD_vSendPosition(0, 1);
			Local_u32Number=0;
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
			while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
    34a0:	80 91 1d 02 	lds	r24, 0x021D
    34a4:	88 23       	and	r24, r24
    34a6:	19 f4       	brne	.+6      	; 0x34ae <PreCalculator+0x156>
    34a8:	8f 81       	ldd	r24, Y+7	; 0x07
    34aa:	8d 33       	cpi	r24, 0x3D	; 61
    34ac:	19 f6       	brne	.-122    	; 0x3434 <PreCalculator+0xdc>
					CLCD_vSendData(Local_u8PressedButton);
					Local_u32Number=Local_u32Number*10+(Local_u8PressedButton-'0');
					Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
				}
			}
			StackNum_vPushNum(&Local_sNumbers, Local_u32Number);
    34ae:	6a 81       	ldd	r22, Y+2	; 0x02
    34b0:	7b 81       	ldd	r23, Y+3	; 0x03
    34b2:	8c 81       	ldd	r24, Y+4	; 0x04
    34b4:	9d 81       	ldd	r25, Y+5	; 0x05
    34b6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    34ba:	9b 01       	movw	r18, r22
    34bc:	ac 01       	movw	r20, r24
    34be:	ce 01       	movw	r24, r28
    34c0:	49 96       	adiw	r24, 0x19	; 25
    34c2:	ba 01       	movw	r22, r20
    34c4:	a9 01       	movw	r20, r18
    34c6:	0e 94 46 09 	call	0x128c	; 0x128c <StackNum_vPushNum>
				Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
				Local_u8Counter++;
			}
		}
		uint32 Local_u32Number=0;
		for(uint8 Local_u8Iterator=1;Local_u8Iterator<=Local_u8Counter+1;Local_u8Iterator++)
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	8f 5f       	subi	r24, 0xFF	; 255
    34ce:	89 83       	std	Y+1, r24	; 0x01
    34d0:	89 81       	ldd	r24, Y+1	; 0x01
    34d2:	28 2f       	mov	r18, r24
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	8e 81       	ldd	r24, Y+6	; 0x06
    34d8:	88 2f       	mov	r24, r24
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	01 96       	adiw	r24, 0x01	; 1
    34de:	82 17       	cp	r24, r18
    34e0:	93 07       	cpc	r25, r19
    34e2:	0c f0       	brlt	.+2      	; 0x34e6 <PreCalculator+0x18e>
    34e4:	92 cf       	rjmp	.-220    	; 0x340a <PreCalculator+0xb2>
					Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
				}
			}
			StackNum_vPushNum(&Local_sNumbers, Local_u32Number);
		}
		CLCD_vClear();
    34e6:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
		CLCD_vSendNumber((sint32)Calculate(&Local_sNumbers, &Local_sOperators));
    34ea:	ce 01       	movw	r24, r28
    34ec:	49 96       	adiw	r24, 0x19	; 25
    34ee:	9e 01       	movw	r18, r28
    34f0:	28 5f       	subi	r18, 0xF8	; 248
    34f2:	3f 4f       	sbci	r19, 0xFF	; 255
    34f4:	b9 01       	movw	r22, r18
    34f6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Calculate>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	bc 01       	movw	r22, r24
    350c:	cd 01       	movw	r24, r26
    350e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <CLCD_vSendNumber>
    3512:	03 c0       	rjmp	.+6      	; 0x351a <PreCalculator+0x1c2>
		while((Local_u8PressedButton!='A')&&(Glob_u8Reset==0))
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
    3514:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    3518:	8f 83       	std	Y+7, r24	; 0x07
			}
			StackNum_vPushNum(&Local_sNumbers, Local_u32Number);
		}
		CLCD_vClear();
		CLCD_vSendNumber((sint32)Calculate(&Local_sNumbers, &Local_sOperators));
		while((Local_u8PressedButton!='A')&&(Glob_u8Reset==0))
    351a:	8f 81       	ldd	r24, Y+7	; 0x07
    351c:	81 34       	cpi	r24, 0x41	; 65
    351e:	21 f0       	breq	.+8      	; 0x3528 <PreCalculator+0x1d0>
    3520:	80 91 1d 02 	lds	r24, 0x021D
    3524:	88 23       	and	r24, r24
    3526:	b1 f3       	breq	.-20     	; 0x3514 <PreCalculator+0x1bc>
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
		}
		CLCD_vClear();
    3528:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
	StackChar_vInit(&Local_sOperators);
	StackF32 Local_sNumbers;
	StackNum_vInit(&Local_sNumbers);
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
	uint8 Local_u8Counter=0;
	while(Glob_u8Reset==0)
    352c:	80 91 1d 02 	lds	r24, 0x021D
    3530:	88 23       	and	r24, r24
    3532:	09 f4       	brne	.+2      	; 0x3536 <PreCalculator+0x1de>
    3534:	28 cf       	rjmp	.-432    	; 0x3386 <PreCalculator+0x2e>
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
		}
		CLCD_vClear();
	}
	if(Glob_u8Reset==1)
    3536:	80 91 1d 02 	lds	r24, 0x021D
    353a:	81 30       	cpi	r24, 0x01	; 1
    353c:	11 f4       	brne	.+4      	; 0x3542 <PreCalculator+0x1ea>
	{
		Glob_u8Reset=0;
    353e:	10 92 1d 02 	sts	0x021D, r1
	}
	return;
}
    3542:	c7 5a       	subi	r28, 0xA7	; 167
    3544:	df 4f       	sbci	r29, 0xFF	; 255
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	cf 91       	pop	r28
    3552:	df 91       	pop	r29
    3554:	08 95       	ret

00003556 <PostCalculator>:

void PostCalculator()
{
    3556:	df 93       	push	r29
    3558:	cf 93       	push	r28
    355a:	cd b7       	in	r28, 0x3d	; 61
    355c:	de b7       	in	r29, 0x3e	; 62
    355e:	c9 55       	subi	r28, 0x59	; 89
    3560:	d0 40       	sbci	r29, 0x00	; 0
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	f8 94       	cli
    3566:	de bf       	out	0x3e, r29	; 62
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	cd bf       	out	0x3d, r28	; 61
	StackUint8 Local_sOperators;
	StackChar_vInit(&Local_sOperators);
    356c:	ce 01       	movw	r24, r28
    356e:	08 96       	adiw	r24, 0x08	; 8
    3570:	0e 94 36 09 	call	0x126c	; 0x126c <StackChar_vInit>
	StackF32 Local_sNumbers;
	StackNum_vInit(&Local_sNumbers);
    3574:	ce 01       	movw	r24, r28
    3576:	49 96       	adiw	r24, 0x19	; 25
    3578:	0e 94 26 09 	call	0x124c	; 0x124c <StackNum_vInit>
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    357c:	8f ef       	ldi	r24, 0xFF	; 255
    357e:	8f 83       	std	Y+7, r24	; 0x07
	uint8 Local_u8Counter=0;
    3580:	1e 82       	std	Y+6, r1	; 0x06
    3582:	f1 c0       	rjmp	.+482    	; 0x3766 <PostCalculator+0x210>
	while(Glob_u8Reset==0)
	{
		CLCD_vClear();
    3584:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
		CLCD_vSendString("Enter Numbers");
    3588:	8e e7       	ldi	r24, 0x7E	; 126
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
		CLCD_vSendPosition(0, 1);
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	61 e0       	ldi	r22, 0x01	; 1
    3594:	0e 94 c4 0c 	call	0x1988	; 0x1988 <CLCD_vSendPosition>
		Local_u8Counter=0;
    3598:	1e 82       	std	Y+6, r1	; 0x06
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    359a:	8f ef       	ldi	r24, 0xFF	; 255
    359c:	8f 83       	std	Y+7, r24	; 0x07
		uint32 Local_u32Number=0;
    359e:	1a 82       	std	Y+2, r1	; 0x02
    35a0:	1b 82       	std	Y+3, r1	; 0x03
    35a2:	1c 82       	std	Y+4, r1	; 0x04
    35a4:	1d 82       	std	Y+5, r1	; 0x05
    35a6:	5b c0       	rjmp	.+182    	; 0x365e <PostCalculator+0x108>
		while((Glob_u8Reset==0)&&(Local_u8PressedButton!='A'))
		{
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    35a8:	8f ef       	ldi	r24, 0xFF	; 255
    35aa:	8f 83       	std	Y+7, r24	; 0x07
    35ac:	03 c0       	rjmp	.+6      	; 0x35b4 <PostCalculator+0x5e>
			while((Glob_u8Reset==0)&&(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON))
			{
				Local_u8PressedButton=KPD_u8GetPressedButton();
    35ae:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    35b2:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
		uint32 Local_u32Number=0;
		while((Glob_u8Reset==0)&&(Local_u8PressedButton!='A'))
		{
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
			while((Glob_u8Reset==0)&&(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON))
    35b4:	80 91 1d 02 	lds	r24, 0x021D
    35b8:	88 23       	and	r24, r24
    35ba:	19 f4       	brne	.+6      	; 0x35c2 <PostCalculator+0x6c>
    35bc:	8f 81       	ldd	r24, Y+7	; 0x07
    35be:	8f 3f       	cpi	r24, 0xFF	; 255
    35c0:	b1 f3       	breq	.-20     	; 0x35ae <PostCalculator+0x58>
			{
				Local_u8PressedButton=KPD_u8GetPressedButton();
			}
			if((Local_u8PressedButton>='0')&&(Local_u8PressedButton<='9'))
    35c2:	8f 81       	ldd	r24, Y+7	; 0x07
    35c4:	80 33       	cpi	r24, 0x30	; 48
    35c6:	38 f1       	brcs	.+78     	; 0x3616 <PostCalculator+0xc0>
    35c8:	8f 81       	ldd	r24, Y+7	; 0x07
    35ca:	8a 33       	cpi	r24, 0x3A	; 58
    35cc:	20 f5       	brcc	.+72     	; 0x3616 <PostCalculator+0xc0>
			{
				CLCD_vSendData(Local_u8PressedButton);
    35ce:	8f 81       	ldd	r24, Y+7	; 0x07
    35d0:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
				Local_u32Number=Local_u32Number*10+Local_u8PressedButton-'0';
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	9b 81       	ldd	r25, Y+3	; 0x03
    35d8:	ac 81       	ldd	r26, Y+4	; 0x04
    35da:	bd 81       	ldd	r27, Y+5	; 0x05
    35dc:	2a e0       	ldi	r18, 0x0A	; 10
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	40 e0       	ldi	r20, 0x00	; 0
    35e2:	50 e0       	ldi	r21, 0x00	; 0
    35e4:	bc 01       	movw	r22, r24
    35e6:	cd 01       	movw	r24, r26
    35e8:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsi3>
    35ec:	9b 01       	movw	r18, r22
    35ee:	ac 01       	movw	r20, r24
    35f0:	8f 81       	ldd	r24, Y+7	; 0x07
    35f2:	88 2f       	mov	r24, r24
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	a0 e0       	ldi	r26, 0x00	; 0
    35f8:	b0 e0       	ldi	r27, 0x00	; 0
    35fa:	82 0f       	add	r24, r18
    35fc:	93 1f       	adc	r25, r19
    35fe:	a4 1f       	adc	r26, r20
    3600:	b5 1f       	adc	r27, r21
    3602:	c0 97       	sbiw	r24, 0x30	; 48
    3604:	a1 09       	sbc	r26, r1
    3606:	b1 09       	sbc	r27, r1
    3608:	8a 83       	std	Y+2, r24	; 0x02
    360a:	9b 83       	std	Y+3, r25	; 0x03
    360c:	ac 83       	std	Y+4, r26	; 0x04
    360e:	bd 83       	std	Y+5, r27	; 0x05
				Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3610:	8f ef       	ldi	r24, 0xFF	; 255
    3612:	8f 83       	std	Y+7, r24	; 0x07
    3614:	24 c0       	rjmp	.+72     	; 0x365e <PostCalculator+0x108>
			}
			else if(Local_u8PressedButton=='=')
    3616:	8f 81       	ldd	r24, Y+7	; 0x07
    3618:	8d 33       	cpi	r24, 0x3D	; 61
    361a:	09 f5       	brne	.+66     	; 0x365e <PostCalculator+0x108>
			{
				Local_u8Counter++;
    361c:	8e 81       	ldd	r24, Y+6	; 0x06
    361e:	8f 5f       	subi	r24, 0xFF	; 255
    3620:	8e 83       	std	Y+6, r24	; 0x06
				StackNum_vPushNum(&Local_sNumbers, Local_u32Number);
    3622:	6a 81       	ldd	r22, Y+2	; 0x02
    3624:	7b 81       	ldd	r23, Y+3	; 0x03
    3626:	8c 81       	ldd	r24, Y+4	; 0x04
    3628:	9d 81       	ldd	r25, Y+5	; 0x05
    362a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    362e:	9b 01       	movw	r18, r22
    3630:	ac 01       	movw	r20, r24
    3632:	ce 01       	movw	r24, r28
    3634:	49 96       	adiw	r24, 0x19	; 25
    3636:	ba 01       	movw	r22, r20
    3638:	a9 01       	movw	r20, r18
    363a:	0e 94 46 09 	call	0x128c	; 0x128c <StackNum_vPushNum>
				Local_u32Number=0;
    363e:	1a 82       	std	Y+2, r1	; 0x02
    3640:	1b 82       	std	Y+3, r1	; 0x03
    3642:	1c 82       	std	Y+4, r1	; 0x04
    3644:	1d 82       	std	Y+5, r1	; 0x05
				Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3646:	8f ef       	ldi	r24, 0xFF	; 255
    3648:	8f 83       	std	Y+7, r24	; 0x07
				CLCD_vClear();
    364a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
				CLCD_vSendString("Enter Numbers");
    364e:	8e e7       	ldi	r24, 0x7E	; 126
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
				CLCD_vSendPosition(0, 1);
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	61 e0       	ldi	r22, 0x01	; 1
    365a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <CLCD_vSendPosition>
		CLCD_vSendString("Enter Numbers");
		CLCD_vSendPosition(0, 1);
		Local_u8Counter=0;
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
		uint32 Local_u32Number=0;
		while((Glob_u8Reset==0)&&(Local_u8PressedButton!='A'))
    365e:	80 91 1d 02 	lds	r24, 0x021D
    3662:	88 23       	and	r24, r24
    3664:	21 f4       	brne	.+8      	; 0x366e <PostCalculator+0x118>
    3666:	8f 81       	ldd	r24, Y+7	; 0x07
    3668:	81 34       	cpi	r24, 0x41	; 65
    366a:	09 f0       	breq	.+2      	; 0x366e <PostCalculator+0x118>
    366c:	9d cf       	rjmp	.-198    	; 0x35a8 <PostCalculator+0x52>
				CLCD_vClear();
				CLCD_vSendString("Enter Numbers");
				CLCD_vSendPosition(0, 1);
			}
		}
		CLCD_vClear();
    366e:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
		CLCD_vSendString("Enter ");
    3672:	8c e8       	ldi	r24, 0x8C	; 140
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
		CLCD_vSendData(Local_u8Counter-1+'0');
    367a:	8e 81       	ldd	r24, Y+6	; 0x06
    367c:	81 5d       	subi	r24, 0xD1	; 209
    367e:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
		CLCD_vSendString("operation");
    3682:	83 e9       	ldi	r24, 0x93	; 147
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
		uint8 Local_u8OpCounter=0;
    368a:	19 82       	std	Y+1, r1	; 0x01
		CLCD_vSendPosition(0, 1);
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	61 e0       	ldi	r22, 0x01	; 1
    3690:	0e 94 c4 0c 	call	0x1988	; 0x1988 <CLCD_vSendPosition>
    3694:	26 c0       	rjmp	.+76     	; 0x36e2 <PostCalculator+0x18c>
		while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
		{
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3696:	8f ef       	ldi	r24, 0xFF	; 255
    3698:	8f 83       	std	Y+7, r24	; 0x07
    369a:	03 c0       	rjmp	.+6      	; 0x36a2 <PostCalculator+0x14c>
			while((Glob_u8Reset==0)&&(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON))
			{
				Local_u8PressedButton=KPD_u8GetPressedButton();
    369c:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    36a0:	8f 83       	std	Y+7, r24	; 0x07
		uint8 Local_u8OpCounter=0;
		CLCD_vSendPosition(0, 1);
		while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
		{
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
			while((Glob_u8Reset==0)&&(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON))
    36a2:	80 91 1d 02 	lds	r24, 0x021D
    36a6:	88 23       	and	r24, r24
    36a8:	19 f4       	brne	.+6      	; 0x36b0 <PostCalculator+0x15a>
    36aa:	8f 81       	ldd	r24, Y+7	; 0x07
    36ac:	8f 3f       	cpi	r24, 0xFF	; 255
    36ae:	b1 f3       	breq	.-20     	; 0x369c <PostCalculator+0x146>
			{
				Local_u8PressedButton=KPD_u8GetPressedButton();
			}
			if((Local_u8PressedButton=='+')||(Local_u8PressedButton=='-')||(Local_u8PressedButton=='*')||(Local_u8PressedButton=='/'))
    36b0:	8f 81       	ldd	r24, Y+7	; 0x07
    36b2:	8b 32       	cpi	r24, 0x2B	; 43
    36b4:	49 f0       	breq	.+18     	; 0x36c8 <PostCalculator+0x172>
    36b6:	8f 81       	ldd	r24, Y+7	; 0x07
    36b8:	8d 32       	cpi	r24, 0x2D	; 45
    36ba:	31 f0       	breq	.+12     	; 0x36c8 <PostCalculator+0x172>
    36bc:	8f 81       	ldd	r24, Y+7	; 0x07
    36be:	8a 32       	cpi	r24, 0x2A	; 42
    36c0:	19 f0       	breq	.+6      	; 0x36c8 <PostCalculator+0x172>
    36c2:	8f 81       	ldd	r24, Y+7	; 0x07
    36c4:	8f 32       	cpi	r24, 0x2F	; 47
    36c6:	69 f4       	brne	.+26     	; 0x36e2 <PostCalculator+0x18c>
			{
				CLCD_vSendData(Local_u8PressedButton);
    36c8:	8f 81       	ldd	r24, Y+7	; 0x07
    36ca:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
				StackChar_vPushOp(&Local_sOperators, Local_u8PressedButton);
    36ce:	ce 01       	movw	r24, r28
    36d0:	08 96       	adiw	r24, 0x08	; 8
    36d2:	6f 81       	ldd	r22, Y+7	; 0x07
    36d4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <StackChar_vPushOp>
				Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    36d8:	8f ef       	ldi	r24, 0xFF	; 255
    36da:	8f 83       	std	Y+7, r24	; 0x07
				Local_u8OpCounter++;
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	8f 5f       	subi	r24, 0xFF	; 255
    36e0:	89 83       	std	Y+1, r24	; 0x01
		CLCD_vSendString("Enter ");
		CLCD_vSendData(Local_u8Counter-1+'0');
		CLCD_vSendString("operation");
		uint8 Local_u8OpCounter=0;
		CLCD_vSendPosition(0, 1);
		while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
    36e2:	80 91 1d 02 	lds	r24, 0x021D
    36e6:	88 23       	and	r24, r24
    36e8:	19 f4       	brne	.+6      	; 0x36f0 <PostCalculator+0x19a>
    36ea:	8f 81       	ldd	r24, Y+7	; 0x07
    36ec:	8d 33       	cpi	r24, 0x3D	; 61
    36ee:	99 f6       	brne	.-90     	; 0x3696 <PostCalculator+0x140>
				StackChar_vPushOp(&Local_sOperators, Local_u8PressedButton);
				Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
				Local_u8OpCounter++;
			}
		}
		if((Local_u8OpCounter>=Local_u8Counter)||(Local_u8Counter-Local_u8OpCounter!=1))
    36f0:	99 81       	ldd	r25, Y+1	; 0x01
    36f2:	8e 81       	ldd	r24, Y+6	; 0x06
    36f4:	98 17       	cp	r25, r24
    36f6:	68 f4       	brcc	.+26     	; 0x3712 <PostCalculator+0x1bc>
    36f8:	8e 81       	ldd	r24, Y+6	; 0x06
    36fa:	28 2f       	mov	r18, r24
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	88 2f       	mov	r24, r24
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	a9 01       	movw	r20, r18
    3706:	48 1b       	sub	r20, r24
    3708:	59 0b       	sbc	r21, r25
    370a:	ca 01       	movw	r24, r20
    370c:	81 30       	cpi	r24, 0x01	; 1
    370e:	91 05       	cpc	r25, r1
    3710:	39 f0       	breq	.+14     	; 0x3720 <PostCalculator+0x1ca>
		{
			CLCD_vClear();
    3712:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
			CLCD_vSendString("Math Error");
    3716:	8d e9       	ldi	r24, 0x9D	; 157
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
    371e:	1a c0       	rjmp	.+52     	; 0x3754 <PostCalculator+0x1fe>
		}
		else
		{
			CLCD_vClear();
    3720:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
			CLCD_vSendNumber((sint32)Calculate(&Local_sNumbers, &Local_sOperators));
    3724:	ce 01       	movw	r24, r28
    3726:	49 96       	adiw	r24, 0x19	; 25
    3728:	9e 01       	movw	r18, r28
    372a:	28 5f       	subi	r18, 0xF8	; 248
    372c:	3f 4f       	sbci	r19, 0xFF	; 255
    372e:	b9 01       	movw	r22, r18
    3730:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Calculate>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	bc 01       	movw	r22, r24
    373a:	cd 01       	movw	r24, r26
    373c:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	bc 01       	movw	r22, r24
    3746:	cd 01       	movw	r24, r26
    3748:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <CLCD_vSendNumber>
    374c:	03 c0       	rjmp	.+6      	; 0x3754 <PostCalculator+0x1fe>
		}
		while((Local_u8PressedButton!='A')&&(Glob_u8Reset==0))
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
    374e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    3752:	8f 83       	std	Y+7, r24	; 0x07
		else
		{
			CLCD_vClear();
			CLCD_vSendNumber((sint32)Calculate(&Local_sNumbers, &Local_sOperators));
		}
		while((Local_u8PressedButton!='A')&&(Glob_u8Reset==0))
    3754:	8f 81       	ldd	r24, Y+7	; 0x07
    3756:	81 34       	cpi	r24, 0x41	; 65
    3758:	21 f0       	breq	.+8      	; 0x3762 <PostCalculator+0x20c>
    375a:	80 91 1d 02 	lds	r24, 0x021D
    375e:	88 23       	and	r24, r24
    3760:	b1 f3       	breq	.-20     	; 0x374e <PostCalculator+0x1f8>
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
		}
		CLCD_vClear();
    3762:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
	StackChar_vInit(&Local_sOperators);
	StackF32 Local_sNumbers;
	StackNum_vInit(&Local_sNumbers);
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
	uint8 Local_u8Counter=0;
	while(Glob_u8Reset==0)
    3766:	80 91 1d 02 	lds	r24, 0x021D
    376a:	88 23       	and	r24, r24
    376c:	09 f4       	brne	.+2      	; 0x3770 <PostCalculator+0x21a>
    376e:	0a cf       	rjmp	.-492    	; 0x3584 <PostCalculator+0x2e>
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
		}
		CLCD_vClear();
	}
	if(Glob_u8Reset==1)
    3770:	80 91 1d 02 	lds	r24, 0x021D
    3774:	81 30       	cpi	r24, 0x01	; 1
    3776:	11 f4       	brne	.+4      	; 0x377c <PostCalculator+0x226>
	{
		Glob_u8Reset=0;
    3778:	10 92 1d 02 	sts	0x021D, r1
	}
	return;

}
    377c:	c7 5a       	subi	r28, 0xA7	; 167
    377e:	df 4f       	sbci	r29, 0xFF	; 255
    3780:	0f b6       	in	r0, 0x3f	; 63
    3782:	f8 94       	cli
    3784:	de bf       	out	0x3e, r29	; 62
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	cd bf       	out	0x3d, r28	; 61
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	08 95       	ret

00003790 <GetBin>:

void GetBin(StackUint8* Ptr_sBin)
{
    3790:	df 93       	push	r29
    3792:	cf 93       	push	r28
    3794:	00 d0       	rcall	.+0      	; 0x3796 <GetBin+0x6>
    3796:	0f 92       	push	r0
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	9b 83       	std	Y+3, r25	; 0x03
    379e:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_vClear();
    37a0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    37a4:	8f ef       	ldi	r24, 0xFF	; 255
    37a6:	89 83       	std	Y+1, r24	; 0x01
    37a8:	17 c0       	rjmp	.+46     	; 0x37d8 <GetBin+0x48>
	while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
	{
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    37aa:	8f ef       	ldi	r24, 0xFF	; 255
    37ac:	89 83       	std	Y+1, r24	; 0x01
    37ae:	03 c0       	rjmp	.+6      	; 0x37b6 <GetBin+0x26>
		while(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
    37b0:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    37b4:	89 83       	std	Y+1, r24	; 0x01
	CLCD_vClear();
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
	while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
	{
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
		while(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	8f 3f       	cpi	r24, 0xFF	; 255
    37ba:	d1 f3       	breq	.-12     	; 0x37b0 <GetBin+0x20>
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
		}
		if((Local_u8PressedButton=='1')||(Local_u8PressedButton=='0'))
    37bc:	89 81       	ldd	r24, Y+1	; 0x01
    37be:	81 33       	cpi	r24, 0x31	; 49
    37c0:	19 f0       	breq	.+6      	; 0x37c8 <GetBin+0x38>
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	80 33       	cpi	r24, 0x30	; 48
    37c6:	41 f4       	brne	.+16     	; 0x37d8 <GetBin+0x48>
		{
			CLCD_vSendData(Local_u8PressedButton);
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
    37ca:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
			StackChar_vPushOp(Ptr_sBin, Local_u8PressedButton);
    37ce:	8a 81       	ldd	r24, Y+2	; 0x02
    37d0:	9b 81       	ldd	r25, Y+3	; 0x03
    37d2:	69 81       	ldd	r22, Y+1	; 0x01
    37d4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <StackChar_vPushOp>

void GetBin(StackUint8* Ptr_sBin)
{
	CLCD_vClear();
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
	while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
    37d8:	80 91 1d 02 	lds	r24, 0x021D
    37dc:	88 23       	and	r24, r24
    37de:	19 f4       	brne	.+6      	; 0x37e6 <GetBin+0x56>
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	8d 33       	cpi	r24, 0x3D	; 61
    37e4:	11 f7       	brne	.-60     	; 0x37aa <GetBin+0x1a>
			CLCD_vSendData(Local_u8PressedButton);
			StackChar_vPushOp(Ptr_sBin, Local_u8PressedButton);
		}
	}
	return;
}
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	0f 90       	pop	r0
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	08 95       	ret

000037f2 <GetOctal>:

void GetOctal(StackUint8* Ptr_sBin)
{
    37f2:	df 93       	push	r29
    37f4:	cf 93       	push	r28
    37f6:	00 d0       	rcall	.+0      	; 0x37f8 <GetOctal+0x6>
    37f8:	0f 92       	push	r0
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    37fe:	9b 83       	std	Y+3, r25	; 0x03
    3800:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_vClear();
    3802:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3806:	8f ef       	ldi	r24, 0xFF	; 255
    3808:	89 83       	std	Y+1, r24	; 0x01
    380a:	17 c0       	rjmp	.+46     	; 0x383a <GetOctal+0x48>
	while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
	{
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    380c:	8f ef       	ldi	r24, 0xFF	; 255
    380e:	89 83       	std	Y+1, r24	; 0x01
    3810:	03 c0       	rjmp	.+6      	; 0x3818 <GetOctal+0x26>
		while(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
    3812:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    3816:	89 83       	std	Y+1, r24	; 0x01
	CLCD_vClear();
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
	while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
	{
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
		while(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)
    3818:	89 81       	ldd	r24, Y+1	; 0x01
    381a:	8f 3f       	cpi	r24, 0xFF	; 255
    381c:	d1 f3       	breq	.-12     	; 0x3812 <GetOctal+0x20>
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
		}
		if((Local_u8PressedButton>='0')&&(Local_u8PressedButton<='7'))
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	80 33       	cpi	r24, 0x30	; 48
    3822:	58 f0       	brcs	.+22     	; 0x383a <GetOctal+0x48>
    3824:	89 81       	ldd	r24, Y+1	; 0x01
    3826:	88 33       	cpi	r24, 0x38	; 56
    3828:	40 f4       	brcc	.+16     	; 0x383a <GetOctal+0x48>
		{
			CLCD_vSendData(Local_u8PressedButton);
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
			StackChar_vPushOp(Ptr_sBin, Local_u8PressedButton);
    3830:	8a 81       	ldd	r24, Y+2	; 0x02
    3832:	9b 81       	ldd	r25, Y+3	; 0x03
    3834:	69 81       	ldd	r22, Y+1	; 0x01
    3836:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <StackChar_vPushOp>

void GetOctal(StackUint8* Ptr_sBin)
{
	CLCD_vClear();
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
	while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
    383a:	80 91 1d 02 	lds	r24, 0x021D
    383e:	88 23       	and	r24, r24
    3840:	19 f4       	brne	.+6      	; 0x3848 <GetOctal+0x56>
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	8d 33       	cpi	r24, 0x3D	; 61
    3846:	11 f7       	brne	.-60     	; 0x380c <GetOctal+0x1a>
			CLCD_vSendData(Local_u8PressedButton);
			StackChar_vPushOp(Ptr_sBin, Local_u8PressedButton);
		}
	}
	return;
}
    3848:	0f 90       	pop	r0
    384a:	0f 90       	pop	r0
    384c:	0f 90       	pop	r0
    384e:	cf 91       	pop	r28
    3850:	df 91       	pop	r29
    3852:	08 95       	ret

00003854 <GetHex>:

void GetHex(StackUint8* Ptr_sBin)
{
    3854:	df 93       	push	r29
    3856:	cf 93       	push	r28
    3858:	00 d0       	rcall	.+0      	; 0x385a <GetHex+0x6>
    385a:	0f 92       	push	r0
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
    3860:	9b 83       	std	Y+3, r25	; 0x03
    3862:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_vClear();
    3864:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3868:	8f ef       	ldi	r24, 0xFF	; 255
    386a:	89 83       	std	Y+1, r24	; 0x01
    386c:	17 c0       	rjmp	.+46     	; 0x389c <GetHex+0x48>
	while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
	{
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    386e:	8f ef       	ldi	r24, 0xFF	; 255
    3870:	89 83       	std	Y+1, r24	; 0x01
    3872:	03 c0       	rjmp	.+6      	; 0x387a <GetHex+0x26>
		while(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
    3874:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    3878:	89 83       	std	Y+1, r24	; 0x01
	CLCD_vClear();
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
	while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
	{
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
		while(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	8f 3f       	cpi	r24, 0xFF	; 255
    387e:	d1 f3       	breq	.-12     	; 0x3874 <GetHex+0x20>
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
		}
		if((Local_u8PressedButton>='0')&&(Local_u8PressedButton<='9'))
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	80 33       	cpi	r24, 0x30	; 48
    3884:	58 f0       	brcs	.+22     	; 0x389c <GetHex+0x48>
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	8a 33       	cpi	r24, 0x3A	; 58
    388a:	40 f4       	brcc	.+16     	; 0x389c <GetHex+0x48>
		{
			CLCD_vSendData(Local_u8PressedButton);
    388c:	89 81       	ldd	r24, Y+1	; 0x01
    388e:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
			StackChar_vPushOp(Ptr_sBin, Local_u8PressedButton);
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
    3894:	9b 81       	ldd	r25, Y+3	; 0x03
    3896:	69 81       	ldd	r22, Y+1	; 0x01
    3898:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <StackChar_vPushOp>

void GetHex(StackUint8* Ptr_sBin)
{
	CLCD_vClear();
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
	while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
    389c:	80 91 1d 02 	lds	r24, 0x021D
    38a0:	88 23       	and	r24, r24
    38a2:	19 f4       	brne	.+6      	; 0x38aa <GetHex+0x56>
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	8d 33       	cpi	r24, 0x3D	; 61
    38a8:	11 f7       	brne	.-60     	; 0x386e <GetHex+0x1a>
			CLCD_vSendData(Local_u8PressedButton);
			StackChar_vPushOp(Ptr_sBin, Local_u8PressedButton);
		}
	}
	return;
}
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
    38b0:	cf 91       	pop	r28
    38b2:	df 91       	pop	r29
    38b4:	08 95       	ret

000038b6 <GetDecimal>:

uint32 GetDecimal()
{
    38b6:	df 93       	push	r29
    38b8:	cf 93       	push	r28
    38ba:	00 d0       	rcall	.+0      	; 0x38bc <GetDecimal+0x6>
    38bc:	00 d0       	rcall	.+0      	; 0x38be <GetDecimal+0x8>
    38be:	0f 92       	push	r0
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
	CLCD_vClear();
    38c4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    38c8:	8f ef       	ldi	r24, 0xFF	; 255
    38ca:	8d 83       	std	Y+5, r24	; 0x05
	uint32 Local_u32Number=0;
    38cc:	19 82       	std	Y+1, r1	; 0x01
    38ce:	1a 82       	std	Y+2, r1	; 0x02
    38d0:	1b 82       	std	Y+3, r1	; 0x03
    38d2:	1c 82       	std	Y+4, r1	; 0x04
    38d4:	30 c0       	rjmp	.+96     	; 0x3936 <GetDecimal+0x80>
	while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
	{
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    38d6:	8f ef       	ldi	r24, 0xFF	; 255
    38d8:	8d 83       	std	Y+5, r24	; 0x05
    38da:	03 c0       	rjmp	.+6      	; 0x38e2 <GetDecimal+0x2c>
		while(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
    38dc:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    38e0:	8d 83       	std	Y+5, r24	; 0x05
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
	uint32 Local_u32Number=0;
	while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
	{
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
		while(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)
    38e2:	8d 81       	ldd	r24, Y+5	; 0x05
    38e4:	8f 3f       	cpi	r24, 0xFF	; 255
    38e6:	d1 f3       	breq	.-12     	; 0x38dc <GetDecimal+0x26>
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
		}
		if((Local_u8PressedButton>='0')&&(Local_u8PressedButton<='9'))
    38e8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ea:	80 33       	cpi	r24, 0x30	; 48
    38ec:	20 f1       	brcs	.+72     	; 0x3936 <GetDecimal+0x80>
    38ee:	8d 81       	ldd	r24, Y+5	; 0x05
    38f0:	8a 33       	cpi	r24, 0x3A	; 58
    38f2:	08 f5       	brcc	.+66     	; 0x3936 <GetDecimal+0x80>
		{
			CLCD_vSendData(Local_u8PressedButton);
    38f4:	8d 81       	ldd	r24, Y+5	; 0x05
    38f6:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
			Local_u32Number=Local_u32Number*10+Local_u8PressedButton-'0';
    38fa:	89 81       	ldd	r24, Y+1	; 0x01
    38fc:	9a 81       	ldd	r25, Y+2	; 0x02
    38fe:	ab 81       	ldd	r26, Y+3	; 0x03
    3900:	bc 81       	ldd	r27, Y+4	; 0x04
    3902:	2a e0       	ldi	r18, 0x0A	; 10
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e0       	ldi	r20, 0x00	; 0
    3908:	50 e0       	ldi	r21, 0x00	; 0
    390a:	bc 01       	movw	r22, r24
    390c:	cd 01       	movw	r24, r26
    390e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__mulsi3>
    3912:	9b 01       	movw	r18, r22
    3914:	ac 01       	movw	r20, r24
    3916:	8d 81       	ldd	r24, Y+5	; 0x05
    3918:	88 2f       	mov	r24, r24
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	a0 e0       	ldi	r26, 0x00	; 0
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	82 0f       	add	r24, r18
    3922:	93 1f       	adc	r25, r19
    3924:	a4 1f       	adc	r26, r20
    3926:	b5 1f       	adc	r27, r21
    3928:	c0 97       	sbiw	r24, 0x30	; 48
    392a:	a1 09       	sbc	r26, r1
    392c:	b1 09       	sbc	r27, r1
    392e:	89 83       	std	Y+1, r24	; 0x01
    3930:	9a 83       	std	Y+2, r25	; 0x02
    3932:	ab 83       	std	Y+3, r26	; 0x03
    3934:	bc 83       	std	Y+4, r27	; 0x04
uint32 GetDecimal()
{
	CLCD_vClear();
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
	uint32 Local_u32Number=0;
	while((Glob_u8Reset==0)&&(Local_u8PressedButton!='='))
    3936:	80 91 1d 02 	lds	r24, 0x021D
    393a:	88 23       	and	r24, r24
    393c:	19 f4       	brne	.+6      	; 0x3944 <GetDecimal+0x8e>
    393e:	8d 81       	ldd	r24, Y+5	; 0x05
    3940:	8d 33       	cpi	r24, 0x3D	; 61
    3942:	49 f6       	brne	.-110    	; 0x38d6 <GetDecimal+0x20>
		{
			CLCD_vSendData(Local_u8PressedButton);
			Local_u32Number=Local_u32Number*10+Local_u8PressedButton-'0';
		}
	}
	return Local_u32Number;
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	9a 81       	ldd	r25, Y+2	; 0x02
    3948:	ab 81       	ldd	r26, Y+3	; 0x03
    394a:	bc 81       	ldd	r27, Y+4	; 0x04
}
    394c:	bc 01       	movw	r22, r24
    394e:	cd 01       	movw	r24, r26
    3950:	0f 90       	pop	r0
    3952:	0f 90       	pop	r0
    3954:	0f 90       	pop	r0
    3956:	0f 90       	pop	r0
    3958:	0f 90       	pop	r0
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	08 95       	ret

00003960 <BaseSelect>:

uint8 BaseSelect()
{
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	00 d0       	rcall	.+0      	; 0x3966 <BaseSelect+0x6>
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8PinValue=DIO_u8PIN_HIGH;
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	89 83       	std	Y+1, r24	; 0x01
    396e:	37 c0       	rjmp	.+110    	; 0x39de <BaseSelect+0x7e>
	while((Glob_u8Reset==0))
	{
		DIO_u8ReadPinValue(DIO_u8PORTC, DIO_u8PIN0, &Local_u8PinValue);
    3970:	82 e0       	ldi	r24, 0x02	; 2
    3972:	60 e0       	ldi	r22, 0x00	; 0
    3974:	9e 01       	movw	r18, r28
    3976:	2f 5f       	subi	r18, 0xFF	; 255
    3978:	3f 4f       	sbci	r19, 0xFF	; 255
    397a:	a9 01       	movw	r20, r18
    397c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_u8ReadPinValue>
		if(Local_u8PinValue==DIO_u8PIN_LOW)
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	88 23       	and	r24, r24
    3984:	11 f4       	brne	.+4      	; 0x398a <BaseSelect+0x2a>
		{
			return 0;
    3986:	1a 82       	std	Y+2, r1	; 0x02
    3988:	30 c0       	rjmp	.+96     	; 0x39ea <BaseSelect+0x8a>
		}
		DIO_u8ReadPinValue(DIO_u8PORTC, DIO_u8PIN1, &Local_u8PinValue);
    398a:	82 e0       	ldi	r24, 0x02	; 2
    398c:	61 e0       	ldi	r22, 0x01	; 1
    398e:	9e 01       	movw	r18, r28
    3990:	2f 5f       	subi	r18, 0xFF	; 255
    3992:	3f 4f       	sbci	r19, 0xFF	; 255
    3994:	a9 01       	movw	r20, r18
    3996:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_u8ReadPinValue>
		if(Local_u8PinValue==DIO_u8PIN_LOW)
    399a:	89 81       	ldd	r24, Y+1	; 0x01
    399c:	88 23       	and	r24, r24
    399e:	19 f4       	brne	.+6      	; 0x39a6 <BaseSelect+0x46>
		{
			return 1;
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	8a 83       	std	Y+2, r24	; 0x02
    39a4:	22 c0       	rjmp	.+68     	; 0x39ea <BaseSelect+0x8a>
		}
		DIO_u8ReadPinValue(DIO_u8PORTC, DIO_u8PIN2, &Local_u8PinValue);
    39a6:	82 e0       	ldi	r24, 0x02	; 2
    39a8:	62 e0       	ldi	r22, 0x02	; 2
    39aa:	9e 01       	movw	r18, r28
    39ac:	2f 5f       	subi	r18, 0xFF	; 255
    39ae:	3f 4f       	sbci	r19, 0xFF	; 255
    39b0:	a9 01       	movw	r20, r18
    39b2:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_u8ReadPinValue>
		if(Local_u8PinValue==DIO_u8PIN_LOW)
    39b6:	89 81       	ldd	r24, Y+1	; 0x01
    39b8:	88 23       	and	r24, r24
    39ba:	19 f4       	brne	.+6      	; 0x39c2 <BaseSelect+0x62>
		{
			return 2;
    39bc:	82 e0       	ldi	r24, 0x02	; 2
    39be:	8a 83       	std	Y+2, r24	; 0x02
    39c0:	14 c0       	rjmp	.+40     	; 0x39ea <BaseSelect+0x8a>
		}
		DIO_u8ReadPinValue(DIO_u8PORTC, DIO_u8PIN3, &Local_u8PinValue);
    39c2:	82 e0       	ldi	r24, 0x02	; 2
    39c4:	63 e0       	ldi	r22, 0x03	; 3
    39c6:	9e 01       	movw	r18, r28
    39c8:	2f 5f       	subi	r18, 0xFF	; 255
    39ca:	3f 4f       	sbci	r19, 0xFF	; 255
    39cc:	a9 01       	movw	r20, r18
    39ce:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_u8ReadPinValue>
		if(Local_u8PinValue==DIO_u8PIN_LOW)
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	88 23       	and	r24, r24
    39d6:	19 f4       	brne	.+6      	; 0x39de <BaseSelect+0x7e>
		{
			return 3;
    39d8:	83 e0       	ldi	r24, 0x03	; 3
    39da:	8a 83       	std	Y+2, r24	; 0x02
    39dc:	06 c0       	rjmp	.+12     	; 0x39ea <BaseSelect+0x8a>
}

uint8 BaseSelect()
{
	uint8 Local_u8PinValue=DIO_u8PIN_HIGH;
	while((Glob_u8Reset==0))
    39de:	80 91 1d 02 	lds	r24, 0x021D
    39e2:	88 23       	and	r24, r24
    39e4:	29 f2       	breq	.-118    	; 0x3970 <BaseSelect+0x10>
		if(Local_u8PinValue==DIO_u8PIN_LOW)
		{
			return 3;
		}
	}
	return 4;
    39e6:	84 e0       	ldi	r24, 0x04	; 4
    39e8:	8a 83       	std	Y+2, r24	; 0x02
    39ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	cf 91       	pop	r28
    39f2:	df 91       	pop	r29
    39f4:	08 95       	ret

000039f6 <PrintNumber>:

void PrintNumber(StackUint8* Ptr_sNumber)
{
    39f6:	df 93       	push	r29
    39f8:	cf 93       	push	r28
    39fa:	00 d0       	rcall	.+0      	; 0x39fc <PrintNumber+0x6>
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	9a 83       	std	Y+2, r25	; 0x02
    3a02:	89 83       	std	Y+1, r24	; 0x01
    3a04:	06 c0       	rjmp	.+12     	; 0x3a12 <PrintNumber+0x1c>
	while(!Stack_u8IsEmptyOp(Ptr_sNumber))
	{
		CLCD_vSendData(StackChar_u8Pop(Ptr_sNumber));
    3a06:	89 81       	ldd	r24, Y+1	; 0x01
    3a08:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0a:	0e 94 07 0a 	call	0x140e	; 0x140e <StackChar_u8Pop>
    3a0e:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLCD_vSendData>
	return 4;
}

void PrintNumber(StackUint8* Ptr_sNumber)
{
	while(!Stack_u8IsEmptyOp(Ptr_sNumber))
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	9a 81       	ldd	r25, Y+2	; 0x02
    3a16:	0e 94 b8 09 	call	0x1370	; 0x1370 <Stack_u8IsEmptyOp>
    3a1a:	88 23       	and	r24, r24
    3a1c:	a1 f3       	breq	.-24     	; 0x3a06 <PrintNumber+0x10>
	{
		CLCD_vSendData(StackChar_u8Pop(Ptr_sNumber));
	}
}
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <Base>:

void Base(void)
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	c6 55       	subi	r28, 0x56	; 86
    3a32:	d0 40       	sbci	r29, 0x00	; 0
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON,Local_u8PinValue;
    3a3e:	8f ef       	ldi	r24, 0xFF	; 255
    3a40:	8a 8b       	std	Y+18, r24	; 0x12
    3a42:	08 c2       	rjmp	.+1040   	; 0x3e54 <Base+0x42c>
	while(1&&(Glob_u8Reset==0))
	{
		CLCD_vClear();
    3a44:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
		CLCD_vSendString("Convert From:");
    3a48:	88 ea       	ldi	r24, 0xA8	; 168
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
		Local_u8PinValue=BaseSelect();
    3a50:	0e 94 b0 1c 	call	0x3960	; 0x3960 <BaseSelect>
    3a54:	89 8b       	std	Y+17, r24	; 0x11
		if(Local_u8PinValue==0)
    3a56:	89 89       	ldd	r24, Y+17	; 0x11
    3a58:	88 23       	and	r24, r24
    3a5a:	09 f0       	breq	.+2      	; 0x3a5e <Base+0x36>
    3a5c:	7d c0       	rjmp	.+250    	; 0x3b58 <Base+0x130>
		{
			StackUint8 Local_sBinary;
			StackChar_vInit(&Local_sBinary);
    3a5e:	ce 01       	movw	r24, r28
    3a60:	43 96       	adiw	r24, 0x13	; 19
    3a62:	0e 94 36 09 	call	0x126c	; 0x126c <StackChar_vInit>
			GetBin(&Local_sBinary);
    3a66:	ce 01       	movw	r24, r28
    3a68:	43 96       	adiw	r24, 0x13	; 19
    3a6a:	0e 94 c8 1b 	call	0x3790	; 0x3790 <GetBin>
			uint32 Local_u32Number=0;
    3a6e:	1d 86       	std	Y+13, r1	; 0x0d
    3a70:	1e 86       	std	Y+14, r1	; 0x0e
    3a72:	1f 86       	std	Y+15, r1	; 0x0f
    3a74:	18 8a       	std	Y+16, r1	; 0x10
			if(Glob_u8Reset==0)
    3a76:	80 91 1d 02 	lds	r24, 0x021D
    3a7a:	88 23       	and	r24, r24
    3a7c:	09 f0       	breq	.+2      	; 0x3a80 <Base+0x58>
    3a7e:	e1 c1       	rjmp	.+962    	; 0x3e42 <Base+0x41a>
			{
				CLCD_vClear();
    3a80:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
				CLCD_vSendString("Convert To:");
    3a84:	86 eb       	ldi	r24, 0xB6	; 182
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
				Local_u8PinValue=BaseSelect();
    3a8c:	0e 94 b0 1c 	call	0x3960	; 0x3960 <BaseSelect>
    3a90:	89 8b       	std	Y+17, r24	; 0x11
				if(Local_u8PinValue==0)
    3a92:	89 89       	ldd	r24, Y+17	; 0x11
    3a94:	88 23       	and	r24, r24
    3a96:	39 f4       	brne	.+14     	; 0x3aa6 <Base+0x7e>
				{
					CLCD_vClear();
    3a98:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
					PrintNumber(&Local_sBinary);
    3a9c:	ce 01       	movw	r24, r28
    3a9e:	43 96       	adiw	r24, 0x13	; 19
    3aa0:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <PrintNumber>
    3aa4:	ce c1       	rjmp	.+924    	; 0x3e42 <Base+0x41a>
				}
				else if(Local_u8PinValue==1)
    3aa6:	89 89       	ldd	r24, Y+17	; 0x11
    3aa8:	81 30       	cpi	r24, 0x01	; 1
    3aaa:	e9 f4       	brne	.+58     	; 0x3ae6 <Base+0xbe>
				{
					CLCD_vClear();
    3aac:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
					Local_u32Number=FromBinToDec(&Local_sBinary);
    3ab0:	ce 01       	movw	r24, r28
    3ab2:	43 96       	adiw	r24, 0x13	; 19
    3ab4:	0e 94 99 15 	call	0x2b32	; 0x2b32 <FromBinToDec>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	8d 87       	std	Y+13, r24	; 0x0d
    3abe:	9e 87       	std	Y+14, r25	; 0x0e
    3ac0:	af 87       	std	Y+15, r26	; 0x0f
    3ac2:	b8 8b       	std	Y+16, r27	; 0x10
					FromDecToOctal(Local_u32Number, &Local_sBinary);
    3ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ac8:	af 85       	ldd	r26, Y+15	; 0x0f
    3aca:	b8 89       	ldd	r27, Y+16	; 0x10
    3acc:	9e 01       	movw	r18, r28
    3ace:	2d 5e       	subi	r18, 0xED	; 237
    3ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad2:	bc 01       	movw	r22, r24
    3ad4:	cd 01       	movw	r24, r26
    3ad6:	a9 01       	movw	r20, r18
    3ad8:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <FromDecToOctal>
					PrintNumber(&Local_sBinary);
    3adc:	ce 01       	movw	r24, r28
    3ade:	43 96       	adiw	r24, 0x13	; 19
    3ae0:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <PrintNumber>
    3ae4:	ae c1       	rjmp	.+860    	; 0x3e42 <Base+0x41a>
				}
				else if(Local_u8PinValue==2)
    3ae6:	89 89       	ldd	r24, Y+17	; 0x11
    3ae8:	82 30       	cpi	r24, 0x02	; 2
    3aea:	a9 f4       	brne	.+42     	; 0x3b16 <Base+0xee>
				{
					CLCD_vClear();
    3aec:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
					Local_u32Number=FromBinToDec(&Local_sBinary);
    3af0:	ce 01       	movw	r24, r28
    3af2:	43 96       	adiw	r24, 0x13	; 19
    3af4:	0e 94 99 15 	call	0x2b32	; 0x2b32 <FromBinToDec>
    3af8:	dc 01       	movw	r26, r24
    3afa:	cb 01       	movw	r24, r22
    3afc:	8d 87       	std	Y+13, r24	; 0x0d
    3afe:	9e 87       	std	Y+14, r25	; 0x0e
    3b00:	af 87       	std	Y+15, r26	; 0x0f
    3b02:	b8 8b       	std	Y+16, r27	; 0x10
					CLCD_vSendNumber((sint32)Local_u32Number);
    3b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b08:	af 85       	ldd	r26, Y+15	; 0x0f
    3b0a:	b8 89       	ldd	r27, Y+16	; 0x10
    3b0c:	bc 01       	movw	r22, r24
    3b0e:	cd 01       	movw	r24, r26
    3b10:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <CLCD_vSendNumber>
    3b14:	96 c1       	rjmp	.+812    	; 0x3e42 <Base+0x41a>
				}
				else if(Local_u8PinValue==3)
    3b16:	89 89       	ldd	r24, Y+17	; 0x11
    3b18:	83 30       	cpi	r24, 0x03	; 3
    3b1a:	09 f0       	breq	.+2      	; 0x3b1e <Base+0xf6>
    3b1c:	92 c1       	rjmp	.+804    	; 0x3e42 <Base+0x41a>
				{
					CLCD_vClear();
    3b1e:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
					Local_u32Number=FromBinToDec(&Local_sBinary);
    3b22:	ce 01       	movw	r24, r28
    3b24:	43 96       	adiw	r24, 0x13	; 19
    3b26:	0e 94 99 15 	call	0x2b32	; 0x2b32 <FromBinToDec>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	8d 87       	std	Y+13, r24	; 0x0d
    3b30:	9e 87       	std	Y+14, r25	; 0x0e
    3b32:	af 87       	std	Y+15, r26	; 0x0f
    3b34:	b8 8b       	std	Y+16, r27	; 0x10
					FromDecToHex(Local_u32Number, &Local_sBinary);
    3b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3a:	af 85       	ldd	r26, Y+15	; 0x0f
    3b3c:	b8 89       	ldd	r27, Y+16	; 0x10
    3b3e:	9e 01       	movw	r18, r28
    3b40:	2d 5e       	subi	r18, 0xED	; 237
    3b42:	3f 4f       	sbci	r19, 0xFF	; 255
    3b44:	bc 01       	movw	r22, r24
    3b46:	cd 01       	movw	r24, r26
    3b48:	a9 01       	movw	r20, r18
    3b4a:	0e 94 65 16 	call	0x2cca	; 0x2cca <FromDecToHex>
					PrintNumber(&Local_sBinary);
    3b4e:	ce 01       	movw	r24, r28
    3b50:	43 96       	adiw	r24, 0x13	; 19
    3b52:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <PrintNumber>
    3b56:	75 c1       	rjmp	.+746    	; 0x3e42 <Base+0x41a>
				}
			}
		}
		else if(Local_u8PinValue==1)
    3b58:	89 89       	ldd	r24, Y+17	; 0x11
    3b5a:	81 30       	cpi	r24, 0x01	; 1
    3b5c:	09 f0       	breq	.+2      	; 0x3b60 <Base+0x138>
    3b5e:	7d c0       	rjmp	.+250    	; 0x3c5a <Base+0x232>
		{
			StackUint8 Local_sOctal;
			StackChar_vInit(&Local_sOctal);
    3b60:	ce 01       	movw	r24, r28
    3b62:	84 96       	adiw	r24, 0x24	; 36
    3b64:	0e 94 36 09 	call	0x126c	; 0x126c <StackChar_vInit>
			GetOctal(&Local_sOctal);
    3b68:	ce 01       	movw	r24, r28
    3b6a:	84 96       	adiw	r24, 0x24	; 36
    3b6c:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <GetOctal>
			if(Glob_u8Reset==0)
    3b70:	80 91 1d 02 	lds	r24, 0x021D
    3b74:	88 23       	and	r24, r24
    3b76:	09 f0       	breq	.+2      	; 0x3b7a <Base+0x152>
    3b78:	64 c1       	rjmp	.+712    	; 0x3e42 <Base+0x41a>
			{
				CLCD_vClear();
    3b7a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
				CLCD_vSendString("Convert To:");
    3b7e:	86 eb       	ldi	r24, 0xB6	; 182
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
				Local_u8PinValue=BaseSelect();
    3b86:	0e 94 b0 1c 	call	0x3960	; 0x3960 <BaseSelect>
    3b8a:	89 8b       	std	Y+17, r24	; 0x11
				uint32 Local_u32Number=0;
    3b8c:	19 86       	std	Y+9, r1	; 0x09
    3b8e:	1a 86       	std	Y+10, r1	; 0x0a
    3b90:	1b 86       	std	Y+11, r1	; 0x0b
    3b92:	1c 86       	std	Y+12, r1	; 0x0c
				if(Local_u8PinValue==0)
    3b94:	89 89       	ldd	r24, Y+17	; 0x11
    3b96:	88 23       	and	r24, r24
    3b98:	e9 f4       	brne	.+58     	; 0x3bd4 <Base+0x1ac>
				{
					CLCD_vClear();
    3b9a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
					Local_u32Number=FromOctalToDec(&Local_sOctal);
    3b9e:	ce 01       	movw	r24, r28
    3ba0:	84 96       	adiw	r24, 0x24	; 36
    3ba2:	0e 94 39 15 	call	0x2a72	; 0x2a72 <FromOctalToDec>
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	cb 01       	movw	r24, r22
    3baa:	89 87       	std	Y+9, r24	; 0x09
    3bac:	9a 87       	std	Y+10, r25	; 0x0a
    3bae:	ab 87       	std	Y+11, r26	; 0x0b
    3bb0:	bc 87       	std	Y+12, r27	; 0x0c
					FromDecToBin(Local_u32Number, &Local_sOctal);
    3bb2:	89 85       	ldd	r24, Y+9	; 0x09
    3bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb6:	ab 85       	ldd	r26, Y+11	; 0x0b
    3bb8:	bc 85       	ldd	r27, Y+12	; 0x0c
    3bba:	9e 01       	movw	r18, r28
    3bbc:	2c 5d       	subi	r18, 0xDC	; 220
    3bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc0:	bc 01       	movw	r22, r24
    3bc2:	cd 01       	movw	r24, r26
    3bc4:	a9 01       	movw	r20, r18
    3bc6:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <FromDecToBin>
					PrintNumber(&Local_sOctal);
    3bca:	ce 01       	movw	r24, r28
    3bcc:	84 96       	adiw	r24, 0x24	; 36
    3bce:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <PrintNumber>
    3bd2:	37 c1       	rjmp	.+622    	; 0x3e42 <Base+0x41a>
				}
				else if(Local_u8PinValue==1)
    3bd4:	89 89       	ldd	r24, Y+17	; 0x11
    3bd6:	81 30       	cpi	r24, 0x01	; 1
    3bd8:	39 f4       	brne	.+14     	; 0x3be8 <Base+0x1c0>
				{
					CLCD_vClear();
    3bda:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
					PrintNumber(&Local_sOctal);
    3bde:	ce 01       	movw	r24, r28
    3be0:	84 96       	adiw	r24, 0x24	; 36
    3be2:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <PrintNumber>
    3be6:	2d c1       	rjmp	.+602    	; 0x3e42 <Base+0x41a>
				}
				else if(Local_u8PinValue==2)
    3be8:	89 89       	ldd	r24, Y+17	; 0x11
    3bea:	82 30       	cpi	r24, 0x02	; 2
    3bec:	a9 f4       	brne	.+42     	; 0x3c18 <Base+0x1f0>
				{
					CLCD_vClear();
    3bee:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
					Local_u32Number=FromOctalToDec(&Local_sOctal);
    3bf2:	ce 01       	movw	r24, r28
    3bf4:	84 96       	adiw	r24, 0x24	; 36
    3bf6:	0e 94 39 15 	call	0x2a72	; 0x2a72 <FromOctalToDec>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	89 87       	std	Y+9, r24	; 0x09
    3c00:	9a 87       	std	Y+10, r25	; 0x0a
    3c02:	ab 87       	std	Y+11, r26	; 0x0b
    3c04:	bc 87       	std	Y+12, r27	; 0x0c
					CLCD_vSendNumber((sint32)Local_u32Number);
    3c06:	89 85       	ldd	r24, Y+9	; 0x09
    3c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0a:	ab 85       	ldd	r26, Y+11	; 0x0b
    3c0c:	bc 85       	ldd	r27, Y+12	; 0x0c
    3c0e:	bc 01       	movw	r22, r24
    3c10:	cd 01       	movw	r24, r26
    3c12:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <CLCD_vSendNumber>
    3c16:	15 c1       	rjmp	.+554    	; 0x3e42 <Base+0x41a>
				}
				else if(Local_u8PinValue==3)
    3c18:	89 89       	ldd	r24, Y+17	; 0x11
    3c1a:	83 30       	cpi	r24, 0x03	; 3
    3c1c:	09 f0       	breq	.+2      	; 0x3c20 <Base+0x1f8>
    3c1e:	11 c1       	rjmp	.+546    	; 0x3e42 <Base+0x41a>
				{
					CLCD_vClear();
    3c20:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
					Local_u32Number=FromOctalToDec(&Local_sOctal);
    3c24:	ce 01       	movw	r24, r28
    3c26:	84 96       	adiw	r24, 0x24	; 36
    3c28:	0e 94 39 15 	call	0x2a72	; 0x2a72 <FromOctalToDec>
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22
    3c30:	89 87       	std	Y+9, r24	; 0x09
    3c32:	9a 87       	std	Y+10, r25	; 0x0a
    3c34:	ab 87       	std	Y+11, r26	; 0x0b
    3c36:	bc 87       	std	Y+12, r27	; 0x0c
					FromDecToHex(Local_u32Number, &Local_sOctal);
    3c38:	89 85       	ldd	r24, Y+9	; 0x09
    3c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3c:	ab 85       	ldd	r26, Y+11	; 0x0b
    3c3e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3c40:	9e 01       	movw	r18, r28
    3c42:	2c 5d       	subi	r18, 0xDC	; 220
    3c44:	3f 4f       	sbci	r19, 0xFF	; 255
    3c46:	bc 01       	movw	r22, r24
    3c48:	cd 01       	movw	r24, r26
    3c4a:	a9 01       	movw	r20, r18
    3c4c:	0e 94 65 16 	call	0x2cca	; 0x2cca <FromDecToHex>
					PrintNumber(&Local_sOctal);
    3c50:	ce 01       	movw	r24, r28
    3c52:	84 96       	adiw	r24, 0x24	; 36
    3c54:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <PrintNumber>
    3c58:	f4 c0       	rjmp	.+488    	; 0x3e42 <Base+0x41a>
				}
			}
		}
		else if(Local_u8PinValue==2)
    3c5a:	89 89       	ldd	r24, Y+17	; 0x11
    3c5c:	82 30       	cpi	r24, 0x02	; 2
    3c5e:	09 f0       	breq	.+2      	; 0x3c62 <Base+0x23a>
    3c60:	6a c0       	rjmp	.+212    	; 0x3d36 <Base+0x30e>
		{
			uint32 Local_u32Number=0;
    3c62:	1d 82       	std	Y+5, r1	; 0x05
    3c64:	1e 82       	std	Y+6, r1	; 0x06
    3c66:	1f 82       	std	Y+7, r1	; 0x07
    3c68:	18 86       	std	Y+8, r1	; 0x08
			Local_u32Number=GetDecimal();
    3c6a:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <GetDecimal>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	8d 83       	std	Y+5, r24	; 0x05
    3c74:	9e 83       	std	Y+6, r25	; 0x06
    3c76:	af 83       	std	Y+7, r26	; 0x07
    3c78:	b8 87       	std	Y+8, r27	; 0x08
			CLCD_vClear();
    3c7a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
			CLCD_vSendString("Convert To:");
    3c7e:	86 eb       	ldi	r24, 0xB6	; 182
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
			Local_u8PinValue=BaseSelect();
    3c86:	0e 94 b0 1c 	call	0x3960	; 0x3960 <BaseSelect>
    3c8a:	89 8b       	std	Y+17, r24	; 0x11
			StackUint8 Local_sNumber;
			StackChar_vInit(&Local_sNumber);
    3c8c:	ce 01       	movw	r24, r28
    3c8e:	c5 96       	adiw	r24, 0x35	; 53
    3c90:	0e 94 36 09 	call	0x126c	; 0x126c <StackChar_vInit>
			if(Local_u8PinValue==0)
    3c94:	89 89       	ldd	r24, Y+17	; 0x11
    3c96:	88 23       	and	r24, r24
    3c98:	99 f4       	brne	.+38     	; 0x3cc0 <Base+0x298>
			{
				CLCD_vClear();
    3c9a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
				FromDecToBin(Local_u32Number, &Local_sNumber);
    3c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca2:	af 81       	ldd	r26, Y+7	; 0x07
    3ca4:	b8 85       	ldd	r27, Y+8	; 0x08
    3ca6:	9e 01       	movw	r18, r28
    3ca8:	2b 5c       	subi	r18, 0xCB	; 203
    3caa:	3f 4f       	sbci	r19, 0xFF	; 255
    3cac:	bc 01       	movw	r22, r24
    3cae:	cd 01       	movw	r24, r26
    3cb0:	a9 01       	movw	r20, r18
    3cb2:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <FromDecToBin>
				PrintNumber(&Local_sNumber);
    3cb6:	ce 01       	movw	r24, r28
    3cb8:	c5 96       	adiw	r24, 0x35	; 53
    3cba:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <PrintNumber>
    3cbe:	c1 c0       	rjmp	.+386    	; 0x3e42 <Base+0x41a>
			}
			else if(Local_u8PinValue==1)
    3cc0:	89 89       	ldd	r24, Y+17	; 0x11
    3cc2:	81 30       	cpi	r24, 0x01	; 1
    3cc4:	99 f4       	brne	.+38     	; 0x3cec <Base+0x2c4>
			{
				CLCD_vClear();
    3cc6:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
				FromDecToOctal(Local_u32Number, &Local_sNumber);
    3cca:	8d 81       	ldd	r24, Y+5	; 0x05
    3ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cce:	af 81       	ldd	r26, Y+7	; 0x07
    3cd0:	b8 85       	ldd	r27, Y+8	; 0x08
    3cd2:	9e 01       	movw	r18, r28
    3cd4:	2b 5c       	subi	r18, 0xCB	; 203
    3cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd8:	bc 01       	movw	r22, r24
    3cda:	cd 01       	movw	r24, r26
    3cdc:	a9 01       	movw	r20, r18
    3cde:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <FromDecToOctal>
				PrintNumber(&Local_sNumber);
    3ce2:	ce 01       	movw	r24, r28
    3ce4:	c5 96       	adiw	r24, 0x35	; 53
    3ce6:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <PrintNumber>
    3cea:	ab c0       	rjmp	.+342    	; 0x3e42 <Base+0x41a>
			}
			else if(Local_u8PinValue==2)
    3cec:	89 89       	ldd	r24, Y+17	; 0x11
    3cee:	82 30       	cpi	r24, 0x02	; 2
    3cf0:	59 f4       	brne	.+22     	; 0x3d08 <Base+0x2e0>
			{
				CLCD_vClear();
    3cf2:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
				CLCD_vSendNumber((sint32)Local_u32Number);
    3cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfa:	af 81       	ldd	r26, Y+7	; 0x07
    3cfc:	b8 85       	ldd	r27, Y+8	; 0x08
    3cfe:	bc 01       	movw	r22, r24
    3d00:	cd 01       	movw	r24, r26
    3d02:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <CLCD_vSendNumber>
    3d06:	9d c0       	rjmp	.+314    	; 0x3e42 <Base+0x41a>
			}
			else if(Local_u8PinValue==3)
    3d08:	89 89       	ldd	r24, Y+17	; 0x11
    3d0a:	83 30       	cpi	r24, 0x03	; 3
    3d0c:	09 f0       	breq	.+2      	; 0x3d10 <Base+0x2e8>
    3d0e:	99 c0       	rjmp	.+306    	; 0x3e42 <Base+0x41a>
			{
				CLCD_vClear();
    3d10:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
				FromDecToHex(Local_u32Number, &Local_sNumber);
    3d14:	8d 81       	ldd	r24, Y+5	; 0x05
    3d16:	9e 81       	ldd	r25, Y+6	; 0x06
    3d18:	af 81       	ldd	r26, Y+7	; 0x07
    3d1a:	b8 85       	ldd	r27, Y+8	; 0x08
    3d1c:	9e 01       	movw	r18, r28
    3d1e:	2b 5c       	subi	r18, 0xCB	; 203
    3d20:	3f 4f       	sbci	r19, 0xFF	; 255
    3d22:	bc 01       	movw	r22, r24
    3d24:	cd 01       	movw	r24, r26
    3d26:	a9 01       	movw	r20, r18
    3d28:	0e 94 65 16 	call	0x2cca	; 0x2cca <FromDecToHex>
				PrintNumber(&Local_sNumber);
    3d2c:	ce 01       	movw	r24, r28
    3d2e:	c5 96       	adiw	r24, 0x35	; 53
    3d30:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <PrintNumber>
    3d34:	86 c0       	rjmp	.+268    	; 0x3e42 <Base+0x41a>
			}
		}
		else if(Local_u8PinValue==3)
    3d36:	89 89       	ldd	r24, Y+17	; 0x11
    3d38:	83 30       	cpi	r24, 0x03	; 3
    3d3a:	09 f0       	breq	.+2      	; 0x3d3e <Base+0x316>
    3d3c:	82 c0       	rjmp	.+260    	; 0x3e42 <Base+0x41a>
		{
			StackUint8 Local_sHex;
			StackChar_vInit(&Local_sHex);
    3d3e:	ce 01       	movw	r24, r28
    3d40:	8a 5b       	subi	r24, 0xBA	; 186
    3d42:	9f 4f       	sbci	r25, 0xFF	; 255
    3d44:	0e 94 36 09 	call	0x126c	; 0x126c <StackChar_vInit>
			GetHex(&Local_sHex);
    3d48:	ce 01       	movw	r24, r28
    3d4a:	8a 5b       	subi	r24, 0xBA	; 186
    3d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d4e:	0e 94 2a 1c 	call	0x3854	; 0x3854 <GetHex>
			CLCD_vClear();
    3d52:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
			CLCD_vSendString("Convert To:");
    3d56:	86 eb       	ldi	r24, 0xB6	; 182
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
			Local_u8PinValue=BaseSelect();
    3d5e:	0e 94 b0 1c 	call	0x3960	; 0x3960 <BaseSelect>
    3d62:	89 8b       	std	Y+17, r24	; 0x11
			uint32 Local_u32Number=0;
    3d64:	19 82       	std	Y+1, r1	; 0x01
    3d66:	1a 82       	std	Y+2, r1	; 0x02
    3d68:	1b 82       	std	Y+3, r1	; 0x03
    3d6a:	1c 82       	std	Y+4, r1	; 0x04
			if(Local_u8PinValue==0)
    3d6c:	89 89       	ldd	r24, Y+17	; 0x11
    3d6e:	88 23       	and	r24, r24
    3d70:	f9 f4       	brne	.+62     	; 0x3db0 <Base+0x388>
			{
				CLCD_vClear();
    3d72:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
				Local_u32Number=FromHexToDec(&Local_sHex);
    3d76:	ce 01       	movw	r24, r28
    3d78:	8a 5b       	subi	r24, 0xBA	; 186
    3d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d7c:	0e 94 ac 14 	call	0x2958	; 0x2958 <FromHexToDec>
    3d80:	dc 01       	movw	r26, r24
    3d82:	cb 01       	movw	r24, r22
    3d84:	89 83       	std	Y+1, r24	; 0x01
    3d86:	9a 83       	std	Y+2, r25	; 0x02
    3d88:	ab 83       	std	Y+3, r26	; 0x03
    3d8a:	bc 83       	std	Y+4, r27	; 0x04
				FromDecToBin(Local_u32Number, &Local_sHex);
    3d8c:	89 81       	ldd	r24, Y+1	; 0x01
    3d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d90:	ab 81       	ldd	r26, Y+3	; 0x03
    3d92:	bc 81       	ldd	r27, Y+4	; 0x04
    3d94:	9e 01       	movw	r18, r28
    3d96:	2a 5b       	subi	r18, 0xBA	; 186
    3d98:	3f 4f       	sbci	r19, 0xFF	; 255
    3d9a:	bc 01       	movw	r22, r24
    3d9c:	cd 01       	movw	r24, r26
    3d9e:	a9 01       	movw	r20, r18
    3da0:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <FromDecToBin>
				PrintNumber(&Local_sHex);
    3da4:	ce 01       	movw	r24, r28
    3da6:	8a 5b       	subi	r24, 0xBA	; 186
    3da8:	9f 4f       	sbci	r25, 0xFF	; 255
    3daa:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <PrintNumber>
    3dae:	49 c0       	rjmp	.+146    	; 0x3e42 <Base+0x41a>
			}
			else if(Local_u8PinValue==1)
    3db0:	89 89       	ldd	r24, Y+17	; 0x11
    3db2:	81 30       	cpi	r24, 0x01	; 1
    3db4:	f9 f4       	brne	.+62     	; 0x3df4 <Base+0x3cc>
			{
				CLCD_vClear();
    3db6:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
				Local_u32Number=FromHexToDec(&Local_sHex);
    3dba:	ce 01       	movw	r24, r28
    3dbc:	8a 5b       	subi	r24, 0xBA	; 186
    3dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc0:	0e 94 ac 14 	call	0x2958	; 0x2958 <FromHexToDec>
    3dc4:	dc 01       	movw	r26, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	89 83       	std	Y+1, r24	; 0x01
    3dca:	9a 83       	std	Y+2, r25	; 0x02
    3dcc:	ab 83       	std	Y+3, r26	; 0x03
    3dce:	bc 83       	std	Y+4, r27	; 0x04
				FromDecToOctal(Local_u32Number, &Local_sHex);
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd4:	ab 81       	ldd	r26, Y+3	; 0x03
    3dd6:	bc 81       	ldd	r27, Y+4	; 0x04
    3dd8:	9e 01       	movw	r18, r28
    3dda:	2a 5b       	subi	r18, 0xBA	; 186
    3ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dde:	bc 01       	movw	r22, r24
    3de0:	cd 01       	movw	r24, r26
    3de2:	a9 01       	movw	r20, r18
    3de4:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <FromDecToOctal>
				PrintNumber(&Local_sHex);
    3de8:	ce 01       	movw	r24, r28
    3dea:	8a 5b       	subi	r24, 0xBA	; 186
    3dec:	9f 4f       	sbci	r25, 0xFF	; 255
    3dee:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <PrintNumber>
    3df2:	27 c0       	rjmp	.+78     	; 0x3e42 <Base+0x41a>
			}
			else if(Local_u8PinValue==2)
    3df4:	89 89       	ldd	r24, Y+17	; 0x11
    3df6:	82 30       	cpi	r24, 0x02	; 2
    3df8:	b1 f4       	brne	.+44     	; 0x3e26 <Base+0x3fe>
			{
				CLCD_vClear();
    3dfa:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
				Local_u32Number=FromHexToDec(&Local_sHex);
    3dfe:	ce 01       	movw	r24, r28
    3e00:	8a 5b       	subi	r24, 0xBA	; 186
    3e02:	9f 4f       	sbci	r25, 0xFF	; 255
    3e04:	0e 94 ac 14 	call	0x2958	; 0x2958 <FromHexToDec>
    3e08:	dc 01       	movw	r26, r24
    3e0a:	cb 01       	movw	r24, r22
    3e0c:	89 83       	std	Y+1, r24	; 0x01
    3e0e:	9a 83       	std	Y+2, r25	; 0x02
    3e10:	ab 83       	std	Y+3, r26	; 0x03
    3e12:	bc 83       	std	Y+4, r27	; 0x04
				CLCD_vSendNumber((sint32)Local_u32Number);
    3e14:	89 81       	ldd	r24, Y+1	; 0x01
    3e16:	9a 81       	ldd	r25, Y+2	; 0x02
    3e18:	ab 81       	ldd	r26, Y+3	; 0x03
    3e1a:	bc 81       	ldd	r27, Y+4	; 0x04
    3e1c:	bc 01       	movw	r22, r24
    3e1e:	cd 01       	movw	r24, r26
    3e20:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <CLCD_vSendNumber>
    3e24:	0e c0       	rjmp	.+28     	; 0x3e42 <Base+0x41a>
			}
			else if(Local_u8PinValue==3)
    3e26:	89 89       	ldd	r24, Y+17	; 0x11
    3e28:	83 30       	cpi	r24, 0x03	; 3
    3e2a:	59 f4       	brne	.+22     	; 0x3e42 <Base+0x41a>
			{
				CLCD_vClear();
    3e2c:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
				PrintNumber(&Local_sHex);
    3e30:	ce 01       	movw	r24, r28
    3e32:	8a 5b       	subi	r24, 0xBA	; 186
    3e34:	9f 4f       	sbci	r25, 0xFF	; 255
    3e36:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <PrintNumber>
    3e3a:	03 c0       	rjmp	.+6      	; 0x3e42 <Base+0x41a>
			}
		}
		while((Local_u8PressedButton!='A')&&(Glob_u8Reset==0))
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
    3e3c:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    3e40:	8a 8b       	std	Y+18, r24	; 0x12
			{
				CLCD_vClear();
				PrintNumber(&Local_sHex);
			}
		}
		while((Local_u8PressedButton!='A')&&(Glob_u8Reset==0))
    3e42:	8a 89       	ldd	r24, Y+18	; 0x12
    3e44:	81 34       	cpi	r24, 0x41	; 65
    3e46:	21 f0       	breq	.+8      	; 0x3e50 <Base+0x428>
    3e48:	80 91 1d 02 	lds	r24, 0x021D
    3e4c:	88 23       	and	r24, r24
    3e4e:	b1 f3       	breq	.-20     	; 0x3e3c <Base+0x414>
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
		}
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3e50:	8f ef       	ldi	r24, 0xFF	; 255
    3e52:	8a 8b       	std	Y+18, r24	; 0x12
}

void Base(void)
{
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON,Local_u8PinValue;
	while(1&&(Glob_u8Reset==0))
    3e54:	80 91 1d 02 	lds	r24, 0x021D
    3e58:	88 23       	and	r24, r24
    3e5a:	09 f4       	brne	.+2      	; 0x3e5e <Base+0x436>
    3e5c:	f3 cd       	rjmp	.-1050   	; 0x3a44 <Base+0x1c>
		{
			Local_u8PressedButton=KPD_u8GetPressedButton();
		}
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
	}
	if(Glob_u8Reset==1)
    3e5e:	80 91 1d 02 	lds	r24, 0x021D
    3e62:	81 30       	cpi	r24, 0x01	; 1
    3e64:	11 f4       	brne	.+4      	; 0x3e6a <Base+0x442>
	{
		Glob_u8Reset=0;
    3e66:	10 92 1d 02 	sts	0x021D, r1
	}
}
    3e6a:	ca 5a       	subi	r28, 0xAA	; 170
    3e6c:	df 4f       	sbci	r29, 0xFF	; 255
    3e6e:	0f b6       	in	r0, 0x3f	; 63
    3e70:	f8 94       	cli
    3e72:	de bf       	out	0x3e, r29	; 62
    3e74:	0f be       	out	0x3f, r0	; 63
    3e76:	cd bf       	out	0x3d, r28	; 61
    3e78:	cf 91       	pop	r28
    3e7a:	df 91       	pop	r29
    3e7c:	08 95       	ret

00003e7e <main>:
void main(void)
{
    3e7e:	df 93       	push	r29
    3e80:	cf 93       	push	r28
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
    3e86:	62 97       	sbiw	r28, 0x12	; 18
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	f8 94       	cli
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	cd bf       	out	0x3d, r28	; 61
	PORT_vInitDirection();
    3e92:	0e 94 30 14 	call	0x2860	; 0x2860 <PORT_vInitDirection>
	GIE_vEnableGlobalInterrupt();
    3e96:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <GIE_vEnableGlobalInterrupt>
	CLCD_vInitLcd();
    3e9a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <CLCD_vInitLcd>
	EXTI_u8SetSenseCtrl(INT2, FALLING_EDGE);
    3e9e:	82 e0       	ldi	r24, 0x02	; 2
    3ea0:	62 e0       	ldi	r22, 0x02	; 2
    3ea2:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <EXTI_u8SetSenseCtrl>
	EXTI_u8SetCallBack(INT2, &ISR);
    3ea6:	24 e5       	ldi	r18, 0x54	; 84
    3ea8:	34 e1       	ldi	r19, 0x14	; 20
    3eaa:	82 e0       	ldi	r24, 0x02	; 2
    3eac:	b9 01       	movw	r22, r18
    3eae:	0e 94 0c 11 	call	0x2218	; 0x2218 <EXTI_u8SetCallBack>
	uint8 Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3eb2:	8f ef       	ldi	r24, 0xFF	; 255
    3eb4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 Local_u8Flag=0;
    3eb6:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		CLCD_vClear();
    3eb8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
		Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3ebc:	8f ef       	ldi	r24, 0xFF	; 255
    3ebe:	88 8b       	std	Y+16, r24	; 0x10
		Local_u8Flag=0;
    3ec0:	1f 86       	std	Y+15, r1	; 0x0f
		while(1)
		{
			if(Local_u8Flag==1)
    3ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ec4:	81 30       	cpi	r24, 0x01	; 1
    3ec6:	09 f0       	breq	.+2      	; 0x3eca <main+0x4c>
    3ec8:	7a c0       	rjmp	.+244    	; 0x3fbe <main+0x140>
			{
				CLCD_vClear();
    3eca:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
				CLCD_vSendString("Wrong Choice");
    3ece:	82 ec       	ldi	r24, 0xC2	; 194
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
    3ed6:	80 e0       	ldi	r24, 0x00	; 0
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	a6 e9       	ldi	r26, 0x96	; 150
    3edc:	b3 e4       	ldi	r27, 0x43	; 67
    3ede:	8b 87       	std	Y+11, r24	; 0x0b
    3ee0:	9c 87       	std	Y+12, r25	; 0x0c
    3ee2:	ad 87       	std	Y+13, r26	; 0x0d
    3ee4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eee:	20 e0       	ldi	r18, 0x00	; 0
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	4a e7       	ldi	r20, 0x7A	; 122
    3ef4:	55 e4       	ldi	r21, 0x45	; 69
    3ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efa:	dc 01       	movw	r26, r24
    3efc:	cb 01       	movw	r24, r22
    3efe:	8f 83       	std	Y+7, r24	; 0x07
    3f00:	98 87       	std	Y+8, r25	; 0x08
    3f02:	a9 87       	std	Y+9, r26	; 0x09
    3f04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f06:	6f 81       	ldd	r22, Y+7	; 0x07
    3f08:	78 85       	ldd	r23, Y+8	; 0x08
    3f0a:	89 85       	ldd	r24, Y+9	; 0x09
    3f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	40 e8       	ldi	r20, 0x80	; 128
    3f14:	5f e3       	ldi	r21, 0x3F	; 63
    3f16:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f1a:	88 23       	and	r24, r24
    3f1c:	2c f4       	brge	.+10     	; 0x3f28 <main+0xaa>
		__ticks = 1;
    3f1e:	81 e0       	ldi	r24, 0x01	; 1
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	9e 83       	std	Y+6, r25	; 0x06
    3f24:	8d 83       	std	Y+5, r24	; 0x05
    3f26:	3f c0       	rjmp	.+126    	; 0x3fa6 <main+0x128>
	else if (__tmp > 65535)
    3f28:	6f 81       	ldd	r22, Y+7	; 0x07
    3f2a:	78 85       	ldd	r23, Y+8	; 0x08
    3f2c:	89 85       	ldd	r24, Y+9	; 0x09
    3f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	3f ef       	ldi	r19, 0xFF	; 255
    3f34:	4f e7       	ldi	r20, 0x7F	; 127
    3f36:	57 e4       	ldi	r21, 0x47	; 71
    3f38:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f3c:	18 16       	cp	r1, r24
    3f3e:	4c f5       	brge	.+82     	; 0x3f92 <main+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	40 e2       	ldi	r20, 0x20	; 32
    3f4e:	51 e4       	ldi	r21, 0x41	; 65
    3f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	bc 01       	movw	r22, r24
    3f5a:	cd 01       	movw	r24, r26
    3f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f60:	dc 01       	movw	r26, r24
    3f62:	cb 01       	movw	r24, r22
    3f64:	9e 83       	std	Y+6, r25	; 0x06
    3f66:	8d 83       	std	Y+5, r24	; 0x05
    3f68:	0f c0       	rjmp	.+30     	; 0x3f88 <main+0x10a>
    3f6a:	80 e9       	ldi	r24, 0x90	; 144
    3f6c:	91 e0       	ldi	r25, 0x01	; 1
    3f6e:	9c 83       	std	Y+4, r25	; 0x04
    3f70:	8b 83       	std	Y+3, r24	; 0x03
    3f72:	8b 81       	ldd	r24, Y+3	; 0x03
    3f74:	9c 81       	ldd	r25, Y+4	; 0x04
    3f76:	01 97       	sbiw	r24, 0x01	; 1
    3f78:	f1 f7       	brne	.-4      	; 0x3f76 <main+0xf8>
    3f7a:	9c 83       	std	Y+4, r25	; 0x04
    3f7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f80:	9e 81       	ldd	r25, Y+6	; 0x06
    3f82:	01 97       	sbiw	r24, 0x01	; 1
    3f84:	9e 83       	std	Y+6, r25	; 0x06
    3f86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f88:	8d 81       	ldd	r24, Y+5	; 0x05
    3f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f8c:	00 97       	sbiw	r24, 0x00	; 0
    3f8e:	69 f7       	brne	.-38     	; 0x3f6a <main+0xec>
    3f90:	14 c0       	rjmp	.+40     	; 0x3fba <main+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f92:	6f 81       	ldd	r22, Y+7	; 0x07
    3f94:	78 85       	ldd	r23, Y+8	; 0x08
    3f96:	89 85       	ldd	r24, Y+9	; 0x09
    3f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	9e 83       	std	Y+6, r25	; 0x06
    3fa4:	8d 83       	std	Y+5, r24	; 0x05
    3fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    3faa:	9a 83       	std	Y+2, r25	; 0x02
    3fac:	89 83       	std	Y+1, r24	; 0x01
    3fae:	89 81       	ldd	r24, Y+1	; 0x01
    3fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb2:	01 97       	sbiw	r24, 0x01	; 1
    3fb4:	f1 f7       	brne	.-4      	; 0x3fb2 <main+0x134>
    3fb6:	9a 83       	std	Y+2, r25	; 0x02
    3fb8:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(300);
				CLCD_vClear();
    3fba:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
			}
			CLCD_vSendString("Press");
    3fbe:	8f ec       	ldi	r24, 0xCF	; 207
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
			CLCD_vSendPosition(0, 1);
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	61 e0       	ldi	r22, 0x01	; 1
    3fca:	0e 94 c4 0c 	call	0x1988	; 0x1988 <CLCD_vSendPosition>
			CLCD_vSendString("1-Simple 2-Base");
    3fce:	85 ed       	ldi	r24, 0xD5	; 213
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    3fd6:	8f ef       	ldi	r24, 0xFF	; 255
    3fd8:	88 8b       	std	Y+16, r24	; 0x10
    3fda:	03 c0       	rjmp	.+6      	; 0x3fe2 <main+0x164>
			while(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)
			{
				Local_u8PressedButton=KPD_u8GetPressedButton();
    3fdc:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    3fe0:	88 8b       	std	Y+16, r24	; 0x10
			}
			CLCD_vSendString("Press");
			CLCD_vSendPosition(0, 1);
			CLCD_vSendString("1-Simple 2-Base");
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
			while(Local_u8PressedButton==KPD_u8UNPRESSEDBUTTON)
    3fe2:	88 89       	ldd	r24, Y+16	; 0x10
    3fe4:	8f 3f       	cpi	r24, 0xFF	; 255
    3fe6:	d1 f3       	breq	.-12     	; 0x3fdc <main+0x15e>
			{
				Local_u8PressedButton=KPD_u8GetPressedButton();
			}
			Local_u8Flag=1;
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	8f 87       	std	Y+15, r24	; 0x0f
			if((Local_u8PressedButton=='1')||(Local_u8PressedButton=='2'))
    3fec:	88 89       	ldd	r24, Y+16	; 0x10
    3fee:	81 33       	cpi	r24, 0x31	; 49
    3ff0:	21 f0       	breq	.+8      	; 0x3ffa <main+0x17c>
    3ff2:	88 89       	ldd	r24, Y+16	; 0x10
    3ff4:	82 33       	cpi	r24, 0x32	; 50
    3ff6:	09 f0       	breq	.+2      	; 0x3ffa <main+0x17c>
    3ff8:	64 cf       	rjmp	.-312    	; 0x3ec2 <main+0x44>
			{
				break;
			}
		}
		if(Local_u8PressedButton=='1')
    3ffa:	88 89       	ldd	r24, Y+16	; 0x10
    3ffc:	81 33       	cpi	r24, 0x31	; 49
    3ffe:	09 f0       	breq	.+2      	; 0x4002 <main+0x184>
    4000:	44 c0       	rjmp	.+136    	; 0x408a <main+0x20c>
		{
			EXTI_u8EnableIntChannel(INT2);
    4002:	82 e0       	ldi	r24, 0x02	; 2
    4004:	0e 94 91 11 	call	0x2322	; 0x2322 <EXTI_u8EnableIntChannel>
			CLCD_vClear();
    4008:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <CLCD_vClear>
			CLCD_vSendString("Press 1-In");
    400c:	85 ee       	ldi	r24, 0xE5	; 229
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
			CLCD_vSendPosition(0, 1);
    4014:	80 e0       	ldi	r24, 0x00	; 0
    4016:	61 e0       	ldi	r22, 0x01	; 1
    4018:	0e 94 c4 0c 	call	0x1988	; 0x1988 <CLCD_vSendPosition>
			CLCD_vSendString("2-Post  3-Pre");
    401c:	80 ef       	ldi	r24, 0xF0	; 240
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	0e 94 af 0b 	call	0x175e	; 0x175e <CLCD_vSendString>
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
    4024:	8f ef       	ldi	r24, 0xFF	; 255
    4026:	88 8b       	std	Y+16, r24	; 0x10
    4028:	0c c0       	rjmp	.+24     	; 0x4042 <main+0x1c4>
			while((Glob_u8Reset==0))
			{
				Local_u8PressedButton=KPD_u8GetPressedButton();
    402a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <KPD_u8GetPressedButton>
    402e:	88 8b       	std	Y+16, r24	; 0x10
				if((Local_u8PressedButton=='1')||(Local_u8PressedButton=='2')||(Local_u8PressedButton=='3'))
    4030:	88 89       	ldd	r24, Y+16	; 0x10
    4032:	81 33       	cpi	r24, 0x31	; 49
    4034:	51 f0       	breq	.+20     	; 0x404a <main+0x1cc>
    4036:	88 89       	ldd	r24, Y+16	; 0x10
    4038:	82 33       	cpi	r24, 0x32	; 50
    403a:	39 f0       	breq	.+14     	; 0x404a <main+0x1cc>
    403c:	88 89       	ldd	r24, Y+16	; 0x10
    403e:	83 33       	cpi	r24, 0x33	; 51
    4040:	21 f0       	breq	.+8      	; 0x404a <main+0x1cc>
			CLCD_vClear();
			CLCD_vSendString("Press 1-In");
			CLCD_vSendPosition(0, 1);
			CLCD_vSendString("2-Post  3-Pre");
			Local_u8PressedButton=KPD_u8UNPRESSEDBUTTON;
			while((Glob_u8Reset==0))
    4042:	80 91 1d 02 	lds	r24, 0x021D
    4046:	88 23       	and	r24, r24
    4048:	81 f3       	breq	.-32     	; 0x402a <main+0x1ac>
				if((Local_u8PressedButton=='1')||(Local_u8PressedButton=='2')||(Local_u8PressedButton=='3'))
				{
					break;
				}
			}
			switch (Local_u8PressedButton) {
    404a:	88 89       	ldd	r24, Y+16	; 0x10
    404c:	28 2f       	mov	r18, r24
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	3a 8b       	std	Y+18, r19	; 0x12
    4052:	29 8b       	std	Y+17, r18	; 0x11
    4054:	89 89       	ldd	r24, Y+17	; 0x11
    4056:	9a 89       	ldd	r25, Y+18	; 0x12
    4058:	82 33       	cpi	r24, 0x32	; 50
    405a:	91 05       	cpc	r25, r1
    405c:	69 f0       	breq	.+26     	; 0x4078 <main+0x1fa>
    405e:	29 89       	ldd	r18, Y+17	; 0x11
    4060:	3a 89       	ldd	r19, Y+18	; 0x12
    4062:	23 33       	cpi	r18, 0x33	; 51
    4064:	31 05       	cpc	r19, r1
    4066:	59 f0       	breq	.+22     	; 0x407e <main+0x200>
    4068:	89 89       	ldd	r24, Y+17	; 0x11
    406a:	9a 89       	ldd	r25, Y+18	; 0x12
    406c:	81 33       	cpi	r24, 0x31	; 49
    406e:	91 05       	cpc	r25, r1
    4070:	41 f4       	brne	.+16     	; 0x4082 <main+0x204>
				case '1':SimpleCalculator();break;
    4072:	0e 94 c2 18 	call	0x3184	; 0x3184 <SimpleCalculator>
    4076:	05 c0       	rjmp	.+10     	; 0x4082 <main+0x204>
				case '2':PostCalculator();break;
    4078:	0e 94 ab 1a 	call	0x3556	; 0x3556 <PostCalculator>
    407c:	02 c0       	rjmp	.+4      	; 0x4082 <main+0x204>
				case '3':PreCalculator();break;
    407e:	0e 94 ac 19 	call	0x3358	; 0x3358 <PreCalculator>
			}
			EXTI_u8DisableIntChannel(INT2);
    4082:	82 e0       	ldi	r24, 0x02	; 2
    4084:	0e 94 c1 11 	call	0x2382	; 0x2382 <EXTI_u8DisableIntChannel>
    4088:	17 cf       	rjmp	.-466    	; 0x3eb8 <main+0x3a>
		}
		else if(Local_u8PressedButton=='2')
    408a:	88 89       	ldd	r24, Y+16	; 0x10
    408c:	82 33       	cpi	r24, 0x32	; 50
    408e:	09 f0       	breq	.+2      	; 0x4092 <main+0x214>
    4090:	13 cf       	rjmp	.-474    	; 0x3eb8 <main+0x3a>
		{
			EXTI_u8EnableIntChannel(INT2);
    4092:	82 e0       	ldi	r24, 0x02	; 2
    4094:	0e 94 91 11 	call	0x2322	; 0x2322 <EXTI_u8EnableIntChannel>
			Base();
    4098:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <Base>
			EXTI_u8DisableIntChannel(INT2);
    409c:	82 e0       	ldi	r24, 0x02	; 2
    409e:	0e 94 c1 11 	call	0x2382	; 0x2382 <EXTI_u8DisableIntChannel>
    40a2:	0a cf       	rjmp	.-492    	; 0x3eb8 <main+0x3a>

000040a4 <__mulsi3>:
    40a4:	62 9f       	mul	r22, r18
    40a6:	d0 01       	movw	r26, r0
    40a8:	73 9f       	mul	r23, r19
    40aa:	f0 01       	movw	r30, r0
    40ac:	82 9f       	mul	r24, r18
    40ae:	e0 0d       	add	r30, r0
    40b0:	f1 1d       	adc	r31, r1
    40b2:	64 9f       	mul	r22, r20
    40b4:	e0 0d       	add	r30, r0
    40b6:	f1 1d       	adc	r31, r1
    40b8:	92 9f       	mul	r25, r18
    40ba:	f0 0d       	add	r31, r0
    40bc:	83 9f       	mul	r24, r19
    40be:	f0 0d       	add	r31, r0
    40c0:	74 9f       	mul	r23, r20
    40c2:	f0 0d       	add	r31, r0
    40c4:	65 9f       	mul	r22, r21
    40c6:	f0 0d       	add	r31, r0
    40c8:	99 27       	eor	r25, r25
    40ca:	72 9f       	mul	r23, r18
    40cc:	b0 0d       	add	r27, r0
    40ce:	e1 1d       	adc	r30, r1
    40d0:	f9 1f       	adc	r31, r25
    40d2:	63 9f       	mul	r22, r19
    40d4:	b0 0d       	add	r27, r0
    40d6:	e1 1d       	adc	r30, r1
    40d8:	f9 1f       	adc	r31, r25
    40da:	bd 01       	movw	r22, r26
    40dc:	cf 01       	movw	r24, r30
    40de:	11 24       	eor	r1, r1
    40e0:	08 95       	ret

000040e2 <__divmodsi4>:
    40e2:	97 fb       	bst	r25, 7
    40e4:	09 2e       	mov	r0, r25
    40e6:	05 26       	eor	r0, r21
    40e8:	0e d0       	rcall	.+28     	; 0x4106 <__divmodsi4_neg1>
    40ea:	57 fd       	sbrc	r21, 7
    40ec:	04 d0       	rcall	.+8      	; 0x40f6 <__divmodsi4_neg2>
    40ee:	14 d0       	rcall	.+40     	; 0x4118 <__udivmodsi4>
    40f0:	0a d0       	rcall	.+20     	; 0x4106 <__divmodsi4_neg1>
    40f2:	00 1c       	adc	r0, r0
    40f4:	38 f4       	brcc	.+14     	; 0x4104 <__divmodsi4_exit>

000040f6 <__divmodsi4_neg2>:
    40f6:	50 95       	com	r21
    40f8:	40 95       	com	r20
    40fa:	30 95       	com	r19
    40fc:	21 95       	neg	r18
    40fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4100:	4f 4f       	sbci	r20, 0xFF	; 255
    4102:	5f 4f       	sbci	r21, 0xFF	; 255

00004104 <__divmodsi4_exit>:
    4104:	08 95       	ret

00004106 <__divmodsi4_neg1>:
    4106:	f6 f7       	brtc	.-4      	; 0x4104 <__divmodsi4_exit>
    4108:	90 95       	com	r25
    410a:	80 95       	com	r24
    410c:	70 95       	com	r23
    410e:	61 95       	neg	r22
    4110:	7f 4f       	sbci	r23, 0xFF	; 255
    4112:	8f 4f       	sbci	r24, 0xFF	; 255
    4114:	9f 4f       	sbci	r25, 0xFF	; 255
    4116:	08 95       	ret

00004118 <__udivmodsi4>:
    4118:	a1 e2       	ldi	r26, 0x21	; 33
    411a:	1a 2e       	mov	r1, r26
    411c:	aa 1b       	sub	r26, r26
    411e:	bb 1b       	sub	r27, r27
    4120:	fd 01       	movw	r30, r26
    4122:	0d c0       	rjmp	.+26     	; 0x413e <__udivmodsi4_ep>

00004124 <__udivmodsi4_loop>:
    4124:	aa 1f       	adc	r26, r26
    4126:	bb 1f       	adc	r27, r27
    4128:	ee 1f       	adc	r30, r30
    412a:	ff 1f       	adc	r31, r31
    412c:	a2 17       	cp	r26, r18
    412e:	b3 07       	cpc	r27, r19
    4130:	e4 07       	cpc	r30, r20
    4132:	f5 07       	cpc	r31, r21
    4134:	20 f0       	brcs	.+8      	; 0x413e <__udivmodsi4_ep>
    4136:	a2 1b       	sub	r26, r18
    4138:	b3 0b       	sbc	r27, r19
    413a:	e4 0b       	sbc	r30, r20
    413c:	f5 0b       	sbc	r31, r21

0000413e <__udivmodsi4_ep>:
    413e:	66 1f       	adc	r22, r22
    4140:	77 1f       	adc	r23, r23
    4142:	88 1f       	adc	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	1a 94       	dec	r1
    4148:	69 f7       	brne	.-38     	; 0x4124 <__udivmodsi4_loop>
    414a:	60 95       	com	r22
    414c:	70 95       	com	r23
    414e:	80 95       	com	r24
    4150:	90 95       	com	r25
    4152:	9b 01       	movw	r18, r22
    4154:	ac 01       	movw	r20, r24
    4156:	bd 01       	movw	r22, r26
    4158:	cf 01       	movw	r24, r30
    415a:	08 95       	ret

0000415c <__prologue_saves__>:
    415c:	2f 92       	push	r2
    415e:	3f 92       	push	r3
    4160:	4f 92       	push	r4
    4162:	5f 92       	push	r5
    4164:	6f 92       	push	r6
    4166:	7f 92       	push	r7
    4168:	8f 92       	push	r8
    416a:	9f 92       	push	r9
    416c:	af 92       	push	r10
    416e:	bf 92       	push	r11
    4170:	cf 92       	push	r12
    4172:	df 92       	push	r13
    4174:	ef 92       	push	r14
    4176:	ff 92       	push	r15
    4178:	0f 93       	push	r16
    417a:	1f 93       	push	r17
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	cd b7       	in	r28, 0x3d	; 61
    4182:	de b7       	in	r29, 0x3e	; 62
    4184:	ca 1b       	sub	r28, r26
    4186:	db 0b       	sbc	r29, r27
    4188:	0f b6       	in	r0, 0x3f	; 63
    418a:	f8 94       	cli
    418c:	de bf       	out	0x3e, r29	; 62
    418e:	0f be       	out	0x3f, r0	; 63
    4190:	cd bf       	out	0x3d, r28	; 61
    4192:	09 94       	ijmp

00004194 <__epilogue_restores__>:
    4194:	2a 88       	ldd	r2, Y+18	; 0x12
    4196:	39 88       	ldd	r3, Y+17	; 0x11
    4198:	48 88       	ldd	r4, Y+16	; 0x10
    419a:	5f 84       	ldd	r5, Y+15	; 0x0f
    419c:	6e 84       	ldd	r6, Y+14	; 0x0e
    419e:	7d 84       	ldd	r7, Y+13	; 0x0d
    41a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    41a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    41a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    41a6:	b9 84       	ldd	r11, Y+9	; 0x09
    41a8:	c8 84       	ldd	r12, Y+8	; 0x08
    41aa:	df 80       	ldd	r13, Y+7	; 0x07
    41ac:	ee 80       	ldd	r14, Y+6	; 0x06
    41ae:	fd 80       	ldd	r15, Y+5	; 0x05
    41b0:	0c 81       	ldd	r16, Y+4	; 0x04
    41b2:	1b 81       	ldd	r17, Y+3	; 0x03
    41b4:	aa 81       	ldd	r26, Y+2	; 0x02
    41b6:	b9 81       	ldd	r27, Y+1	; 0x01
    41b8:	ce 0f       	add	r28, r30
    41ba:	d1 1d       	adc	r29, r1
    41bc:	0f b6       	in	r0, 0x3f	; 63
    41be:	f8 94       	cli
    41c0:	de bf       	out	0x3e, r29	; 62
    41c2:	0f be       	out	0x3f, r0	; 63
    41c4:	cd bf       	out	0x3d, r28	; 61
    41c6:	ed 01       	movw	r28, r26
    41c8:	08 95       	ret

000041ca <_exit>:
    41ca:	f8 94       	cli

000041cc <__stop_program>:
    41cc:	ff cf       	rjmp	.-2      	; 0x41cc <__stop_program>
